
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Skill
 * 
 */
export type Skill = $Result.DefaultSelection<Prisma.$SkillPayload>
/**
 * Model UserSkillsOffered
 * 
 */
export type UserSkillsOffered = $Result.DefaultSelection<Prisma.$UserSkillsOfferedPayload>
/**
 * Model UserSkillsWanted
 * 
 */
export type UserSkillsWanted = $Result.DefaultSelection<Prisma.$UserSkillsWantedPayload>
/**
 * Model SwapRequest
 * 
 */
export type SwapRequest = $Result.DefaultSelection<Prisma.$SwapRequestPayload>
/**
 * Model Rating
 * 
 */
export type Rating = $Result.DefaultSelection<Prisma.$RatingPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model BroadcastMessage
 * 
 */
export type BroadcastMessage = $Result.DefaultSelection<Prisma.$BroadcastMessagePayload>
/**
 * Model AdminLog
 * 
 */
export type AdminLog = $Result.DefaultSelection<Prisma.$AdminLogPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.skill`: Exposes CRUD operations for the **Skill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skills
    * const skills = await prisma.skill.findMany()
    * ```
    */
  get skill(): Prisma.SkillDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSkillsOffered`: Exposes CRUD operations for the **UserSkillsOffered** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSkillsOffereds
    * const userSkillsOffereds = await prisma.userSkillsOffered.findMany()
    * ```
    */
  get userSkillsOffered(): Prisma.UserSkillsOfferedDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSkillsWanted`: Exposes CRUD operations for the **UserSkillsWanted** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSkillsWanteds
    * const userSkillsWanteds = await prisma.userSkillsWanted.findMany()
    * ```
    */
  get userSkillsWanted(): Prisma.UserSkillsWantedDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.swapRequest`: Exposes CRUD operations for the **SwapRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SwapRequests
    * const swapRequests = await prisma.swapRequest.findMany()
    * ```
    */
  get swapRequest(): Prisma.SwapRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rating`: Exposes CRUD operations for the **Rating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ratings
    * const ratings = await prisma.rating.findMany()
    * ```
    */
  get rating(): Prisma.RatingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.broadcastMessage`: Exposes CRUD operations for the **BroadcastMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BroadcastMessages
    * const broadcastMessages = await prisma.broadcastMessage.findMany()
    * ```
    */
  get broadcastMessage(): Prisma.BroadcastMessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.adminLog`: Exposes CRUD operations for the **AdminLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminLogs
    * const adminLogs = await prisma.adminLog.findMany()
    * ```
    */
  get adminLog(): Prisma.AdminLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Skill: 'Skill',
    UserSkillsOffered: 'UserSkillsOffered',
    UserSkillsWanted: 'UserSkillsWanted',
    SwapRequest: 'SwapRequest',
    Rating: 'Rating',
    Review: 'Review',
    BroadcastMessage: 'BroadcastMessage',
    AdminLog: 'AdminLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "skill" | "userSkillsOffered" | "userSkillsWanted" | "swapRequest" | "rating" | "review" | "broadcastMessage" | "adminLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Skill: {
        payload: Prisma.$SkillPayload<ExtArgs>
        fields: Prisma.SkillFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkillFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkillFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          findFirst: {
            args: Prisma.SkillFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkillFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          findMany: {
            args: Prisma.SkillFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          create: {
            args: Prisma.SkillCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          createMany: {
            args: Prisma.SkillCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkillCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          delete: {
            args: Prisma.SkillDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          update: {
            args: Prisma.SkillUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          deleteMany: {
            args: Prisma.SkillDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkillUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SkillUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          upsert: {
            args: Prisma.SkillUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          aggregate: {
            args: Prisma.SkillAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkill>
          }
          groupBy: {
            args: Prisma.SkillGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkillGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkillCountArgs<ExtArgs>
            result: $Utils.Optional<SkillCountAggregateOutputType> | number
          }
        }
      }
      UserSkillsOffered: {
        payload: Prisma.$UserSkillsOfferedPayload<ExtArgs>
        fields: Prisma.UserSkillsOfferedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSkillsOfferedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsOfferedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSkillsOfferedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsOfferedPayload>
          }
          findFirst: {
            args: Prisma.UserSkillsOfferedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsOfferedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSkillsOfferedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsOfferedPayload>
          }
          findMany: {
            args: Prisma.UserSkillsOfferedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsOfferedPayload>[]
          }
          create: {
            args: Prisma.UserSkillsOfferedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsOfferedPayload>
          }
          createMany: {
            args: Prisma.UserSkillsOfferedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSkillsOfferedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsOfferedPayload>[]
          }
          delete: {
            args: Prisma.UserSkillsOfferedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsOfferedPayload>
          }
          update: {
            args: Prisma.UserSkillsOfferedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsOfferedPayload>
          }
          deleteMany: {
            args: Prisma.UserSkillsOfferedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSkillsOfferedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSkillsOfferedUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsOfferedPayload>[]
          }
          upsert: {
            args: Prisma.UserSkillsOfferedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsOfferedPayload>
          }
          aggregate: {
            args: Prisma.UserSkillsOfferedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSkillsOffered>
          }
          groupBy: {
            args: Prisma.UserSkillsOfferedGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSkillsOfferedGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSkillsOfferedCountArgs<ExtArgs>
            result: $Utils.Optional<UserSkillsOfferedCountAggregateOutputType> | number
          }
        }
      }
      UserSkillsWanted: {
        payload: Prisma.$UserSkillsWantedPayload<ExtArgs>
        fields: Prisma.UserSkillsWantedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSkillsWantedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsWantedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSkillsWantedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsWantedPayload>
          }
          findFirst: {
            args: Prisma.UserSkillsWantedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsWantedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSkillsWantedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsWantedPayload>
          }
          findMany: {
            args: Prisma.UserSkillsWantedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsWantedPayload>[]
          }
          create: {
            args: Prisma.UserSkillsWantedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsWantedPayload>
          }
          createMany: {
            args: Prisma.UserSkillsWantedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSkillsWantedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsWantedPayload>[]
          }
          delete: {
            args: Prisma.UserSkillsWantedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsWantedPayload>
          }
          update: {
            args: Prisma.UserSkillsWantedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsWantedPayload>
          }
          deleteMany: {
            args: Prisma.UserSkillsWantedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSkillsWantedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSkillsWantedUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsWantedPayload>[]
          }
          upsert: {
            args: Prisma.UserSkillsWantedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSkillsWantedPayload>
          }
          aggregate: {
            args: Prisma.UserSkillsWantedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSkillsWanted>
          }
          groupBy: {
            args: Prisma.UserSkillsWantedGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSkillsWantedGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSkillsWantedCountArgs<ExtArgs>
            result: $Utils.Optional<UserSkillsWantedCountAggregateOutputType> | number
          }
        }
      }
      SwapRequest: {
        payload: Prisma.$SwapRequestPayload<ExtArgs>
        fields: Prisma.SwapRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SwapRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SwapRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>
          }
          findFirst: {
            args: Prisma.SwapRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SwapRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>
          }
          findMany: {
            args: Prisma.SwapRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>[]
          }
          create: {
            args: Prisma.SwapRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>
          }
          createMany: {
            args: Prisma.SwapRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SwapRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>[]
          }
          delete: {
            args: Prisma.SwapRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>
          }
          update: {
            args: Prisma.SwapRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>
          }
          deleteMany: {
            args: Prisma.SwapRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SwapRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SwapRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>[]
          }
          upsert: {
            args: Prisma.SwapRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>
          }
          aggregate: {
            args: Prisma.SwapRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSwapRequest>
          }
          groupBy: {
            args: Prisma.SwapRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<SwapRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.SwapRequestCountArgs<ExtArgs>
            result: $Utils.Optional<SwapRequestCountAggregateOutputType> | number
          }
        }
      }
      Rating: {
        payload: Prisma.$RatingPayload<ExtArgs>
        fields: Prisma.RatingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RatingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RatingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          findFirst: {
            args: Prisma.RatingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RatingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          findMany: {
            args: Prisma.RatingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>[]
          }
          create: {
            args: Prisma.RatingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          createMany: {
            args: Prisma.RatingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RatingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>[]
          }
          delete: {
            args: Prisma.RatingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          update: {
            args: Prisma.RatingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          deleteMany: {
            args: Prisma.RatingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RatingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RatingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>[]
          }
          upsert: {
            args: Prisma.RatingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          aggregate: {
            args: Prisma.RatingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRating>
          }
          groupBy: {
            args: Prisma.RatingGroupByArgs<ExtArgs>
            result: $Utils.Optional<RatingGroupByOutputType>[]
          }
          count: {
            args: Prisma.RatingCountArgs<ExtArgs>
            result: $Utils.Optional<RatingCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      BroadcastMessage: {
        payload: Prisma.$BroadcastMessagePayload<ExtArgs>
        fields: Prisma.BroadcastMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BroadcastMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BroadcastMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastMessagePayload>
          }
          findFirst: {
            args: Prisma.BroadcastMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BroadcastMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastMessagePayload>
          }
          findMany: {
            args: Prisma.BroadcastMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastMessagePayload>[]
          }
          create: {
            args: Prisma.BroadcastMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastMessagePayload>
          }
          createMany: {
            args: Prisma.BroadcastMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BroadcastMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastMessagePayload>[]
          }
          delete: {
            args: Prisma.BroadcastMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastMessagePayload>
          }
          update: {
            args: Prisma.BroadcastMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastMessagePayload>
          }
          deleteMany: {
            args: Prisma.BroadcastMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BroadcastMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BroadcastMessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastMessagePayload>[]
          }
          upsert: {
            args: Prisma.BroadcastMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastMessagePayload>
          }
          aggregate: {
            args: Prisma.BroadcastMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBroadcastMessage>
          }
          groupBy: {
            args: Prisma.BroadcastMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<BroadcastMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.BroadcastMessageCountArgs<ExtArgs>
            result: $Utils.Optional<BroadcastMessageCountAggregateOutputType> | number
          }
        }
      }
      AdminLog: {
        payload: Prisma.$AdminLogPayload<ExtArgs>
        fields: Prisma.AdminLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>
          }
          findFirst: {
            args: Prisma.AdminLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>
          }
          findMany: {
            args: Prisma.AdminLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>[]
          }
          create: {
            args: Prisma.AdminLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>
          }
          createMany: {
            args: Prisma.AdminLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>[]
          }
          delete: {
            args: Prisma.AdminLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>
          }
          update: {
            args: Prisma.AdminLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>
          }
          deleteMany: {
            args: Prisma.AdminLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>[]
          }
          upsert: {
            args: Prisma.AdminLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>
          }
          aggregate: {
            args: Prisma.AdminLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminLog>
          }
          groupBy: {
            args: Prisma.AdminLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminLogCountArgs<ExtArgs>
            result: $Utils.Optional<AdminLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    skill?: SkillOmit
    userSkillsOffered?: UserSkillsOfferedOmit
    userSkillsWanted?: UserSkillsWantedOmit
    swapRequest?: SwapRequestOmit
    rating?: RatingOmit
    review?: ReviewOmit
    broadcastMessage?: BroadcastMessageOmit
    adminLog?: AdminLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    skillsOffered: number
    skillsWanted: number
    ratings: number
    reviews: number
    sentSwapRequests: number
    receivedSwapRequests: number
    givenRatings: number
    givenReviews: number
    broadcastMessages: number
    adminLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skillsOffered?: boolean | UserCountOutputTypeCountSkillsOfferedArgs
    skillsWanted?: boolean | UserCountOutputTypeCountSkillsWantedArgs
    ratings?: boolean | UserCountOutputTypeCountRatingsArgs
    reviews?: boolean | UserCountOutputTypeCountReviewsArgs
    sentSwapRequests?: boolean | UserCountOutputTypeCountSentSwapRequestsArgs
    receivedSwapRequests?: boolean | UserCountOutputTypeCountReceivedSwapRequestsArgs
    givenRatings?: boolean | UserCountOutputTypeCountGivenRatingsArgs
    givenReviews?: boolean | UserCountOutputTypeCountGivenReviewsArgs
    broadcastMessages?: boolean | UserCountOutputTypeCountBroadcastMessagesArgs
    adminLogs?: boolean | UserCountOutputTypeCountAdminLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSkillsOfferedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSkillsOfferedWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSkillsWantedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSkillsWantedWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentSwapRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SwapRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedSwapRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SwapRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGivenRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGivenReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBroadcastMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BroadcastMessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAdminLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminLogWhereInput
  }


  /**
   * Count Type SkillCountOutputType
   */

  export type SkillCountOutputType = {
    offeredBy: number
    wantedBy: number
  }

  export type SkillCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    offeredBy?: boolean | SkillCountOutputTypeCountOfferedByArgs
    wantedBy?: boolean | SkillCountOutputTypeCountWantedByArgs
  }

  // Custom InputTypes
  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillCountOutputType
     */
    select?: SkillCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeCountOfferedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSkillsOfferedWhereInput
  }

  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeCountWantedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSkillsWantedWhereInput
  }


  /**
   * Count Type SwapRequestCountOutputType
   */

  export type SwapRequestCountOutputType = {
    ratings: number
    reviews: number
  }

  export type SwapRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ratings?: boolean | SwapRequestCountOutputTypeCountRatingsArgs
    reviews?: boolean | SwapRequestCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * SwapRequestCountOutputType without action
   */
  export type SwapRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequestCountOutputType
     */
    select?: SwapRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SwapRequestCountOutputType without action
   */
  export type SwapRequestCountOutputTypeCountRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
  }

  /**
   * SwapRequestCountOutputType without action
   */
  export type SwapRequestCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    passwordHash: string | null
    role: string | null
    experience: string | null
    projects: string | null
    profilePhoto: string | null
    location: string | null
    availability: string | null
    isPublic: boolean | null
    banned: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    passwordHash: string | null
    role: string | null
    experience: string | null
    projects: string | null
    profilePhoto: string | null
    location: string | null
    availability: string | null
    isPublic: boolean | null
    banned: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    passwordHash: number
    role: number
    experience: number
    projects: number
    profilePhoto: number
    location: number
    availability: number
    isPublic: number
    banned: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    passwordHash?: true
    role?: true
    experience?: true
    projects?: true
    profilePhoto?: true
    location?: true
    availability?: true
    isPublic?: true
    banned?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    passwordHash?: true
    role?: true
    experience?: true
    projects?: true
    profilePhoto?: true
    location?: true
    availability?: true
    isPublic?: true
    banned?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    passwordHash?: true
    role?: true
    experience?: true
    projects?: true
    profilePhoto?: true
    location?: true
    availability?: true
    isPublic?: true
    banned?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience: string | null
    projects: string | null
    profilePhoto: string | null
    location: string | null
    availability: string | null
    isPublic: boolean
    banned: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    experience?: boolean
    projects?: boolean
    profilePhoto?: boolean
    location?: boolean
    availability?: boolean
    isPublic?: boolean
    banned?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    skillsOffered?: boolean | User$skillsOfferedArgs<ExtArgs>
    skillsWanted?: boolean | User$skillsWantedArgs<ExtArgs>
    ratings?: boolean | User$ratingsArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    sentSwapRequests?: boolean | User$sentSwapRequestsArgs<ExtArgs>
    receivedSwapRequests?: boolean | User$receivedSwapRequestsArgs<ExtArgs>
    givenRatings?: boolean | User$givenRatingsArgs<ExtArgs>
    givenReviews?: boolean | User$givenReviewsArgs<ExtArgs>
    broadcastMessages?: boolean | User$broadcastMessagesArgs<ExtArgs>
    adminLogs?: boolean | User$adminLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    experience?: boolean
    projects?: boolean
    profilePhoto?: boolean
    location?: boolean
    availability?: boolean
    isPublic?: boolean
    banned?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    experience?: boolean
    projects?: boolean
    profilePhoto?: boolean
    location?: boolean
    availability?: boolean
    isPublic?: boolean
    banned?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    experience?: boolean
    projects?: boolean
    profilePhoto?: boolean
    location?: boolean
    availability?: boolean
    isPublic?: boolean
    banned?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "passwordHash" | "role" | "experience" | "projects" | "profilePhoto" | "location" | "availability" | "isPublic" | "banned" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skillsOffered?: boolean | User$skillsOfferedArgs<ExtArgs>
    skillsWanted?: boolean | User$skillsWantedArgs<ExtArgs>
    ratings?: boolean | User$ratingsArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    sentSwapRequests?: boolean | User$sentSwapRequestsArgs<ExtArgs>
    receivedSwapRequests?: boolean | User$receivedSwapRequestsArgs<ExtArgs>
    givenRatings?: boolean | User$givenRatingsArgs<ExtArgs>
    givenReviews?: boolean | User$givenReviewsArgs<ExtArgs>
    broadcastMessages?: boolean | User$broadcastMessagesArgs<ExtArgs>
    adminLogs?: boolean | User$adminLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      skillsOffered: Prisma.$UserSkillsOfferedPayload<ExtArgs>[]
      skillsWanted: Prisma.$UserSkillsWantedPayload<ExtArgs>[]
      ratings: Prisma.$RatingPayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
      sentSwapRequests: Prisma.$SwapRequestPayload<ExtArgs>[]
      receivedSwapRequests: Prisma.$SwapRequestPayload<ExtArgs>[]
      givenRatings: Prisma.$RatingPayload<ExtArgs>[]
      givenReviews: Prisma.$ReviewPayload<ExtArgs>[]
      broadcastMessages: Prisma.$BroadcastMessagePayload<ExtArgs>[]
      adminLogs: Prisma.$AdminLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      passwordHash: string
      role: string
      experience: string | null
      projects: string | null
      profilePhoto: string | null
      location: string | null
      availability: string | null
      isPublic: boolean
      banned: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    skillsOffered<T extends User$skillsOfferedArgs<ExtArgs> = {}>(args?: Subset<T, User$skillsOfferedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSkillsOfferedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    skillsWanted<T extends User$skillsWantedArgs<ExtArgs> = {}>(args?: Subset<T, User$skillsWantedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSkillsWantedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ratings<T extends User$ratingsArgs<ExtArgs> = {}>(args?: Subset<T, User$ratingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends User$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sentSwapRequests<T extends User$sentSwapRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$sentSwapRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receivedSwapRequests<T extends User$receivedSwapRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedSwapRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    givenRatings<T extends User$givenRatingsArgs<ExtArgs> = {}>(args?: Subset<T, User$givenRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    givenReviews<T extends User$givenReviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$givenReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    broadcastMessages<T extends User$broadcastMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$broadcastMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BroadcastMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    adminLogs<T extends User$adminLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$adminLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly experience: FieldRef<"User", 'String'>
    readonly projects: FieldRef<"User", 'String'>
    readonly profilePhoto: FieldRef<"User", 'String'>
    readonly location: FieldRef<"User", 'String'>
    readonly availability: FieldRef<"User", 'String'>
    readonly isPublic: FieldRef<"User", 'Boolean'>
    readonly banned: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.skillsOffered
   */
  export type User$skillsOfferedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsOffered
     */
    select?: UserSkillsOfferedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsOffered
     */
    omit?: UserSkillsOfferedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsOfferedInclude<ExtArgs> | null
    where?: UserSkillsOfferedWhereInput
    orderBy?: UserSkillsOfferedOrderByWithRelationInput | UserSkillsOfferedOrderByWithRelationInput[]
    cursor?: UserSkillsOfferedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSkillsOfferedScalarFieldEnum | UserSkillsOfferedScalarFieldEnum[]
  }

  /**
   * User.skillsWanted
   */
  export type User$skillsWantedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsWanted
     */
    select?: UserSkillsWantedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsWanted
     */
    omit?: UserSkillsWantedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsWantedInclude<ExtArgs> | null
    where?: UserSkillsWantedWhereInput
    orderBy?: UserSkillsWantedOrderByWithRelationInput | UserSkillsWantedOrderByWithRelationInput[]
    cursor?: UserSkillsWantedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSkillsWantedScalarFieldEnum | UserSkillsWantedScalarFieldEnum[]
  }

  /**
   * User.ratings
   */
  export type User$ratingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * User.reviews
   */
  export type User$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * User.sentSwapRequests
   */
  export type User$sentSwapRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    where?: SwapRequestWhereInput
    orderBy?: SwapRequestOrderByWithRelationInput | SwapRequestOrderByWithRelationInput[]
    cursor?: SwapRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SwapRequestScalarFieldEnum | SwapRequestScalarFieldEnum[]
  }

  /**
   * User.receivedSwapRequests
   */
  export type User$receivedSwapRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    where?: SwapRequestWhereInput
    orderBy?: SwapRequestOrderByWithRelationInput | SwapRequestOrderByWithRelationInput[]
    cursor?: SwapRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SwapRequestScalarFieldEnum | SwapRequestScalarFieldEnum[]
  }

  /**
   * User.givenRatings
   */
  export type User$givenRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * User.givenReviews
   */
  export type User$givenReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * User.broadcastMessages
   */
  export type User$broadcastMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BroadcastMessage
     */
    select?: BroadcastMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BroadcastMessage
     */
    omit?: BroadcastMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastMessageInclude<ExtArgs> | null
    where?: BroadcastMessageWhereInput
    orderBy?: BroadcastMessageOrderByWithRelationInput | BroadcastMessageOrderByWithRelationInput[]
    cursor?: BroadcastMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BroadcastMessageScalarFieldEnum | BroadcastMessageScalarFieldEnum[]
  }

  /**
   * User.adminLogs
   */
  export type User$adminLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    where?: AdminLogWhereInput
    orderBy?: AdminLogOrderByWithRelationInput | AdminLogOrderByWithRelationInput[]
    cursor?: AdminLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminLogScalarFieldEnum | AdminLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Skill
   */

  export type AggregateSkill = {
    _count: SkillCountAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  export type SkillMinAggregateOutputType = {
    id: string | null
    name: string | null
    status: string | null
  }

  export type SkillMaxAggregateOutputType = {
    id: string | null
    name: string | null
    status: string | null
  }

  export type SkillCountAggregateOutputType = {
    id: number
    name: number
    status: number
    _all: number
  }


  export type SkillMinAggregateInputType = {
    id?: true
    name?: true
    status?: true
  }

  export type SkillMaxAggregateInputType = {
    id?: true
    name?: true
    status?: true
  }

  export type SkillCountAggregateInputType = {
    id?: true
    name?: true
    status?: true
    _all?: true
  }

  export type SkillAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skill to aggregate.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skills
    **/
    _count?: true | SkillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillMaxAggregateInputType
  }

  export type GetSkillAggregateType<T extends SkillAggregateArgs> = {
        [P in keyof T & keyof AggregateSkill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkill[P]>
      : GetScalarType<T[P], AggregateSkill[P]>
  }




  export type SkillGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithAggregationInput | SkillOrderByWithAggregationInput[]
    by: SkillScalarFieldEnum[] | SkillScalarFieldEnum
    having?: SkillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillCountAggregateInputType | true
    _min?: SkillMinAggregateInputType
    _max?: SkillMaxAggregateInputType
  }

  export type SkillGroupByOutputType = {
    id: string
    name: string
    status: string
    _count: SkillCountAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  type GetSkillGroupByPayload<T extends SkillGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillGroupByOutputType[P]>
            : GetScalarType<T[P], SkillGroupByOutputType[P]>
        }
      >
    >


  export type SkillSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    status?: boolean
    offeredBy?: boolean | Skill$offeredByArgs<ExtArgs>
    wantedBy?: boolean | Skill$wantedByArgs<ExtArgs>
    _count?: boolean | SkillCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    status?: boolean
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    status?: boolean
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectScalar = {
    id?: boolean
    name?: boolean
    status?: boolean
  }

  export type SkillOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "status", ExtArgs["result"]["skill"]>
  export type SkillInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    offeredBy?: boolean | Skill$offeredByArgs<ExtArgs>
    wantedBy?: boolean | Skill$wantedByArgs<ExtArgs>
    _count?: boolean | SkillCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SkillIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SkillIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SkillPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Skill"
    objects: {
      offeredBy: Prisma.$UserSkillsOfferedPayload<ExtArgs>[]
      wantedBy: Prisma.$UserSkillsWantedPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      status: string
    }, ExtArgs["result"]["skill"]>
    composites: {}
  }

  type SkillGetPayload<S extends boolean | null | undefined | SkillDefaultArgs> = $Result.GetResult<Prisma.$SkillPayload, S>

  type SkillCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkillFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkillCountAggregateInputType | true
    }

  export interface SkillDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Skill'], meta: { name: 'Skill' } }
    /**
     * Find zero or one Skill that matches the filter.
     * @param {SkillFindUniqueArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkillFindUniqueArgs>(args: SelectSubset<T, SkillFindUniqueArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Skill that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkillFindUniqueOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkillFindUniqueOrThrowArgs>(args: SelectSubset<T, SkillFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Skill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkillFindFirstArgs>(args?: SelectSubset<T, SkillFindFirstArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Skill that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkillFindFirstOrThrowArgs>(args?: SelectSubset<T, SkillFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skills
     * const skills = await prisma.skill.findMany()
     * 
     * // Get first 10 Skills
     * const skills = await prisma.skill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillWithIdOnly = await prisma.skill.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkillFindManyArgs>(args?: SelectSubset<T, SkillFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Skill.
     * @param {SkillCreateArgs} args - Arguments to create a Skill.
     * @example
     * // Create one Skill
     * const Skill = await prisma.skill.create({
     *   data: {
     *     // ... data to create a Skill
     *   }
     * })
     * 
     */
    create<T extends SkillCreateArgs>(args: SelectSubset<T, SkillCreateArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Skills.
     * @param {SkillCreateManyArgs} args - Arguments to create many Skills.
     * @example
     * // Create many Skills
     * const skill = await prisma.skill.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkillCreateManyArgs>(args?: SelectSubset<T, SkillCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Skills and returns the data saved in the database.
     * @param {SkillCreateManyAndReturnArgs} args - Arguments to create many Skills.
     * @example
     * // Create many Skills
     * const skill = await prisma.skill.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Skills and only return the `id`
     * const skillWithIdOnly = await prisma.skill.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkillCreateManyAndReturnArgs>(args?: SelectSubset<T, SkillCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Skill.
     * @param {SkillDeleteArgs} args - Arguments to delete one Skill.
     * @example
     * // Delete one Skill
     * const Skill = await prisma.skill.delete({
     *   where: {
     *     // ... filter to delete one Skill
     *   }
     * })
     * 
     */
    delete<T extends SkillDeleteArgs>(args: SelectSubset<T, SkillDeleteArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Skill.
     * @param {SkillUpdateArgs} args - Arguments to update one Skill.
     * @example
     * // Update one Skill
     * const skill = await prisma.skill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkillUpdateArgs>(args: SelectSubset<T, SkillUpdateArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Skills.
     * @param {SkillDeleteManyArgs} args - Arguments to filter Skills to delete.
     * @example
     * // Delete a few Skills
     * const { count } = await prisma.skill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkillDeleteManyArgs>(args?: SelectSubset<T, SkillDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skills
     * const skill = await prisma.skill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkillUpdateManyArgs>(args: SelectSubset<T, SkillUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills and returns the data updated in the database.
     * @param {SkillUpdateManyAndReturnArgs} args - Arguments to update many Skills.
     * @example
     * // Update many Skills
     * const skill = await prisma.skill.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Skills and only return the `id`
     * const skillWithIdOnly = await prisma.skill.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SkillUpdateManyAndReturnArgs>(args: SelectSubset<T, SkillUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Skill.
     * @param {SkillUpsertArgs} args - Arguments to update or create a Skill.
     * @example
     * // Update or create a Skill
     * const skill = await prisma.skill.upsert({
     *   create: {
     *     // ... data to create a Skill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Skill we want to update
     *   }
     * })
     */
    upsert<T extends SkillUpsertArgs>(args: SelectSubset<T, SkillUpsertArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillCountArgs} args - Arguments to filter Skills to count.
     * @example
     * // Count the number of Skills
     * const count = await prisma.skill.count({
     *   where: {
     *     // ... the filter for the Skills we want to count
     *   }
     * })
    **/
    count<T extends SkillCountArgs>(
      args?: Subset<T, SkillCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillAggregateArgs>(args: Subset<T, SkillAggregateArgs>): Prisma.PrismaPromise<GetSkillAggregateType<T>>

    /**
     * Group by Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillGroupByArgs['orderBy'] }
        : { orderBy?: SkillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Skill model
   */
  readonly fields: SkillFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Skill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkillClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    offeredBy<T extends Skill$offeredByArgs<ExtArgs> = {}>(args?: Subset<T, Skill$offeredByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSkillsOfferedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    wantedBy<T extends Skill$wantedByArgs<ExtArgs> = {}>(args?: Subset<T, Skill$wantedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSkillsWantedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Skill model
   */
  interface SkillFieldRefs {
    readonly id: FieldRef<"Skill", 'String'>
    readonly name: FieldRef<"Skill", 'String'>
    readonly status: FieldRef<"Skill", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Skill findUnique
   */
  export type SkillFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill findUniqueOrThrow
   */
  export type SkillFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill findFirst
   */
  export type SkillFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill findFirstOrThrow
   */
  export type SkillFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill findMany
   */
  export type SkillFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skills to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill create
   */
  export type SkillCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The data needed to create a Skill.
     */
    data: XOR<SkillCreateInput, SkillUncheckedCreateInput>
  }

  /**
   * Skill createMany
   */
  export type SkillCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Skills.
     */
    data: SkillCreateManyInput | SkillCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Skill createManyAndReturn
   */
  export type SkillCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * The data used to create many Skills.
     */
    data: SkillCreateManyInput | SkillCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Skill update
   */
  export type SkillUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The data needed to update a Skill.
     */
    data: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
    /**
     * Choose, which Skill to update.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill updateMany
   */
  export type SkillUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Skills.
     */
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     */
    where?: SkillWhereInput
    /**
     * Limit how many Skills to update.
     */
    limit?: number
  }

  /**
   * Skill updateManyAndReturn
   */
  export type SkillUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * The data used to update Skills.
     */
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     */
    where?: SkillWhereInput
    /**
     * Limit how many Skills to update.
     */
    limit?: number
  }

  /**
   * Skill upsert
   */
  export type SkillUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The filter to search for the Skill to update in case it exists.
     */
    where: SkillWhereUniqueInput
    /**
     * In case the Skill found by the `where` argument doesn't exist, create a new Skill with this data.
     */
    create: XOR<SkillCreateInput, SkillUncheckedCreateInput>
    /**
     * In case the Skill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
  }

  /**
   * Skill delete
   */
  export type SkillDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter which Skill to delete.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill deleteMany
   */
  export type SkillDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skills to delete
     */
    where?: SkillWhereInput
    /**
     * Limit how many Skills to delete.
     */
    limit?: number
  }

  /**
   * Skill.offeredBy
   */
  export type Skill$offeredByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsOffered
     */
    select?: UserSkillsOfferedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsOffered
     */
    omit?: UserSkillsOfferedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsOfferedInclude<ExtArgs> | null
    where?: UserSkillsOfferedWhereInput
    orderBy?: UserSkillsOfferedOrderByWithRelationInput | UserSkillsOfferedOrderByWithRelationInput[]
    cursor?: UserSkillsOfferedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSkillsOfferedScalarFieldEnum | UserSkillsOfferedScalarFieldEnum[]
  }

  /**
   * Skill.wantedBy
   */
  export type Skill$wantedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsWanted
     */
    select?: UserSkillsWantedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsWanted
     */
    omit?: UserSkillsWantedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsWantedInclude<ExtArgs> | null
    where?: UserSkillsWantedWhereInput
    orderBy?: UserSkillsWantedOrderByWithRelationInput | UserSkillsWantedOrderByWithRelationInput[]
    cursor?: UserSkillsWantedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSkillsWantedScalarFieldEnum | UserSkillsWantedScalarFieldEnum[]
  }

  /**
   * Skill without action
   */
  export type SkillDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
  }


  /**
   * Model UserSkillsOffered
   */

  export type AggregateUserSkillsOffered = {
    _count: UserSkillsOfferedCountAggregateOutputType | null
    _min: UserSkillsOfferedMinAggregateOutputType | null
    _max: UserSkillsOfferedMaxAggregateOutputType | null
  }

  export type UserSkillsOfferedMinAggregateOutputType = {
    id: string | null
    userId: string | null
    skillId: string | null
  }

  export type UserSkillsOfferedMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    skillId: string | null
  }

  export type UserSkillsOfferedCountAggregateOutputType = {
    id: number
    userId: number
    skillId: number
    _all: number
  }


  export type UserSkillsOfferedMinAggregateInputType = {
    id?: true
    userId?: true
    skillId?: true
  }

  export type UserSkillsOfferedMaxAggregateInputType = {
    id?: true
    userId?: true
    skillId?: true
  }

  export type UserSkillsOfferedCountAggregateInputType = {
    id?: true
    userId?: true
    skillId?: true
    _all?: true
  }

  export type UserSkillsOfferedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSkillsOffered to aggregate.
     */
    where?: UserSkillsOfferedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSkillsOffereds to fetch.
     */
    orderBy?: UserSkillsOfferedOrderByWithRelationInput | UserSkillsOfferedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSkillsOfferedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSkillsOffereds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSkillsOffereds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSkillsOffereds
    **/
    _count?: true | UserSkillsOfferedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSkillsOfferedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSkillsOfferedMaxAggregateInputType
  }

  export type GetUserSkillsOfferedAggregateType<T extends UserSkillsOfferedAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSkillsOffered]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSkillsOffered[P]>
      : GetScalarType<T[P], AggregateUserSkillsOffered[P]>
  }




  export type UserSkillsOfferedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSkillsOfferedWhereInput
    orderBy?: UserSkillsOfferedOrderByWithAggregationInput | UserSkillsOfferedOrderByWithAggregationInput[]
    by: UserSkillsOfferedScalarFieldEnum[] | UserSkillsOfferedScalarFieldEnum
    having?: UserSkillsOfferedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSkillsOfferedCountAggregateInputType | true
    _min?: UserSkillsOfferedMinAggregateInputType
    _max?: UserSkillsOfferedMaxAggregateInputType
  }

  export type UserSkillsOfferedGroupByOutputType = {
    id: string
    userId: string
    skillId: string
    _count: UserSkillsOfferedCountAggregateOutputType | null
    _min: UserSkillsOfferedMinAggregateOutputType | null
    _max: UserSkillsOfferedMaxAggregateOutputType | null
  }

  type GetUserSkillsOfferedGroupByPayload<T extends UserSkillsOfferedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSkillsOfferedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSkillsOfferedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSkillsOfferedGroupByOutputType[P]>
            : GetScalarType<T[P], UserSkillsOfferedGroupByOutputType[P]>
        }
      >
    >


  export type UserSkillsOfferedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    skillId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSkillsOffered"]>

  export type UserSkillsOfferedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    skillId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSkillsOffered"]>

  export type UserSkillsOfferedSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    skillId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSkillsOffered"]>

  export type UserSkillsOfferedSelectScalar = {
    id?: boolean
    userId?: boolean
    skillId?: boolean
  }

  export type UserSkillsOfferedOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "skillId", ExtArgs["result"]["userSkillsOffered"]>
  export type UserSkillsOfferedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }
  export type UserSkillsOfferedIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }
  export type UserSkillsOfferedIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }

  export type $UserSkillsOfferedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSkillsOffered"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      skill: Prisma.$SkillPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      skillId: string
    }, ExtArgs["result"]["userSkillsOffered"]>
    composites: {}
  }

  type UserSkillsOfferedGetPayload<S extends boolean | null | undefined | UserSkillsOfferedDefaultArgs> = $Result.GetResult<Prisma.$UserSkillsOfferedPayload, S>

  type UserSkillsOfferedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSkillsOfferedFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSkillsOfferedCountAggregateInputType | true
    }

  export interface UserSkillsOfferedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSkillsOffered'], meta: { name: 'UserSkillsOffered' } }
    /**
     * Find zero or one UserSkillsOffered that matches the filter.
     * @param {UserSkillsOfferedFindUniqueArgs} args - Arguments to find a UserSkillsOffered
     * @example
     * // Get one UserSkillsOffered
     * const userSkillsOffered = await prisma.userSkillsOffered.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSkillsOfferedFindUniqueArgs>(args: SelectSubset<T, UserSkillsOfferedFindUniqueArgs<ExtArgs>>): Prisma__UserSkillsOfferedClient<$Result.GetResult<Prisma.$UserSkillsOfferedPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSkillsOffered that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSkillsOfferedFindUniqueOrThrowArgs} args - Arguments to find a UserSkillsOffered
     * @example
     * // Get one UserSkillsOffered
     * const userSkillsOffered = await prisma.userSkillsOffered.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSkillsOfferedFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSkillsOfferedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSkillsOfferedClient<$Result.GetResult<Prisma.$UserSkillsOfferedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSkillsOffered that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSkillsOfferedFindFirstArgs} args - Arguments to find a UserSkillsOffered
     * @example
     * // Get one UserSkillsOffered
     * const userSkillsOffered = await prisma.userSkillsOffered.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSkillsOfferedFindFirstArgs>(args?: SelectSubset<T, UserSkillsOfferedFindFirstArgs<ExtArgs>>): Prisma__UserSkillsOfferedClient<$Result.GetResult<Prisma.$UserSkillsOfferedPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSkillsOffered that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSkillsOfferedFindFirstOrThrowArgs} args - Arguments to find a UserSkillsOffered
     * @example
     * // Get one UserSkillsOffered
     * const userSkillsOffered = await prisma.userSkillsOffered.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSkillsOfferedFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSkillsOfferedFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSkillsOfferedClient<$Result.GetResult<Prisma.$UserSkillsOfferedPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSkillsOffereds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSkillsOfferedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSkillsOffereds
     * const userSkillsOffereds = await prisma.userSkillsOffered.findMany()
     * 
     * // Get first 10 UserSkillsOffereds
     * const userSkillsOffereds = await prisma.userSkillsOffered.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSkillsOfferedWithIdOnly = await prisma.userSkillsOffered.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSkillsOfferedFindManyArgs>(args?: SelectSubset<T, UserSkillsOfferedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSkillsOfferedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSkillsOffered.
     * @param {UserSkillsOfferedCreateArgs} args - Arguments to create a UserSkillsOffered.
     * @example
     * // Create one UserSkillsOffered
     * const UserSkillsOffered = await prisma.userSkillsOffered.create({
     *   data: {
     *     // ... data to create a UserSkillsOffered
     *   }
     * })
     * 
     */
    create<T extends UserSkillsOfferedCreateArgs>(args: SelectSubset<T, UserSkillsOfferedCreateArgs<ExtArgs>>): Prisma__UserSkillsOfferedClient<$Result.GetResult<Prisma.$UserSkillsOfferedPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSkillsOffereds.
     * @param {UserSkillsOfferedCreateManyArgs} args - Arguments to create many UserSkillsOffereds.
     * @example
     * // Create many UserSkillsOffereds
     * const userSkillsOffered = await prisma.userSkillsOffered.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSkillsOfferedCreateManyArgs>(args?: SelectSubset<T, UserSkillsOfferedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSkillsOffereds and returns the data saved in the database.
     * @param {UserSkillsOfferedCreateManyAndReturnArgs} args - Arguments to create many UserSkillsOffereds.
     * @example
     * // Create many UserSkillsOffereds
     * const userSkillsOffered = await prisma.userSkillsOffered.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSkillsOffereds and only return the `id`
     * const userSkillsOfferedWithIdOnly = await prisma.userSkillsOffered.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSkillsOfferedCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSkillsOfferedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSkillsOfferedPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSkillsOffered.
     * @param {UserSkillsOfferedDeleteArgs} args - Arguments to delete one UserSkillsOffered.
     * @example
     * // Delete one UserSkillsOffered
     * const UserSkillsOffered = await prisma.userSkillsOffered.delete({
     *   where: {
     *     // ... filter to delete one UserSkillsOffered
     *   }
     * })
     * 
     */
    delete<T extends UserSkillsOfferedDeleteArgs>(args: SelectSubset<T, UserSkillsOfferedDeleteArgs<ExtArgs>>): Prisma__UserSkillsOfferedClient<$Result.GetResult<Prisma.$UserSkillsOfferedPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSkillsOffered.
     * @param {UserSkillsOfferedUpdateArgs} args - Arguments to update one UserSkillsOffered.
     * @example
     * // Update one UserSkillsOffered
     * const userSkillsOffered = await prisma.userSkillsOffered.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSkillsOfferedUpdateArgs>(args: SelectSubset<T, UserSkillsOfferedUpdateArgs<ExtArgs>>): Prisma__UserSkillsOfferedClient<$Result.GetResult<Prisma.$UserSkillsOfferedPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSkillsOffereds.
     * @param {UserSkillsOfferedDeleteManyArgs} args - Arguments to filter UserSkillsOffereds to delete.
     * @example
     * // Delete a few UserSkillsOffereds
     * const { count } = await prisma.userSkillsOffered.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSkillsOfferedDeleteManyArgs>(args?: SelectSubset<T, UserSkillsOfferedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSkillsOffereds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSkillsOfferedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSkillsOffereds
     * const userSkillsOffered = await prisma.userSkillsOffered.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSkillsOfferedUpdateManyArgs>(args: SelectSubset<T, UserSkillsOfferedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSkillsOffereds and returns the data updated in the database.
     * @param {UserSkillsOfferedUpdateManyAndReturnArgs} args - Arguments to update many UserSkillsOffereds.
     * @example
     * // Update many UserSkillsOffereds
     * const userSkillsOffered = await prisma.userSkillsOffered.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSkillsOffereds and only return the `id`
     * const userSkillsOfferedWithIdOnly = await prisma.userSkillsOffered.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSkillsOfferedUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSkillsOfferedUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSkillsOfferedPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSkillsOffered.
     * @param {UserSkillsOfferedUpsertArgs} args - Arguments to update or create a UserSkillsOffered.
     * @example
     * // Update or create a UserSkillsOffered
     * const userSkillsOffered = await prisma.userSkillsOffered.upsert({
     *   create: {
     *     // ... data to create a UserSkillsOffered
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSkillsOffered we want to update
     *   }
     * })
     */
    upsert<T extends UserSkillsOfferedUpsertArgs>(args: SelectSubset<T, UserSkillsOfferedUpsertArgs<ExtArgs>>): Prisma__UserSkillsOfferedClient<$Result.GetResult<Prisma.$UserSkillsOfferedPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSkillsOffereds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSkillsOfferedCountArgs} args - Arguments to filter UserSkillsOffereds to count.
     * @example
     * // Count the number of UserSkillsOffereds
     * const count = await prisma.userSkillsOffered.count({
     *   where: {
     *     // ... the filter for the UserSkillsOffereds we want to count
     *   }
     * })
    **/
    count<T extends UserSkillsOfferedCountArgs>(
      args?: Subset<T, UserSkillsOfferedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSkillsOfferedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSkillsOffered.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSkillsOfferedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSkillsOfferedAggregateArgs>(args: Subset<T, UserSkillsOfferedAggregateArgs>): Prisma.PrismaPromise<GetUserSkillsOfferedAggregateType<T>>

    /**
     * Group by UserSkillsOffered.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSkillsOfferedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSkillsOfferedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSkillsOfferedGroupByArgs['orderBy'] }
        : { orderBy?: UserSkillsOfferedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSkillsOfferedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSkillsOfferedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSkillsOffered model
   */
  readonly fields: UserSkillsOfferedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSkillsOffered.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSkillsOfferedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    skill<T extends SkillDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkillDefaultArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSkillsOffered model
   */
  interface UserSkillsOfferedFieldRefs {
    readonly id: FieldRef<"UserSkillsOffered", 'String'>
    readonly userId: FieldRef<"UserSkillsOffered", 'String'>
    readonly skillId: FieldRef<"UserSkillsOffered", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserSkillsOffered findUnique
   */
  export type UserSkillsOfferedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsOffered
     */
    select?: UserSkillsOfferedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsOffered
     */
    omit?: UserSkillsOfferedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsOfferedInclude<ExtArgs> | null
    /**
     * Filter, which UserSkillsOffered to fetch.
     */
    where: UserSkillsOfferedWhereUniqueInput
  }

  /**
   * UserSkillsOffered findUniqueOrThrow
   */
  export type UserSkillsOfferedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsOffered
     */
    select?: UserSkillsOfferedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsOffered
     */
    omit?: UserSkillsOfferedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsOfferedInclude<ExtArgs> | null
    /**
     * Filter, which UserSkillsOffered to fetch.
     */
    where: UserSkillsOfferedWhereUniqueInput
  }

  /**
   * UserSkillsOffered findFirst
   */
  export type UserSkillsOfferedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsOffered
     */
    select?: UserSkillsOfferedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsOffered
     */
    omit?: UserSkillsOfferedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsOfferedInclude<ExtArgs> | null
    /**
     * Filter, which UserSkillsOffered to fetch.
     */
    where?: UserSkillsOfferedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSkillsOffereds to fetch.
     */
    orderBy?: UserSkillsOfferedOrderByWithRelationInput | UserSkillsOfferedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSkillsOffereds.
     */
    cursor?: UserSkillsOfferedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSkillsOffereds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSkillsOffereds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSkillsOffereds.
     */
    distinct?: UserSkillsOfferedScalarFieldEnum | UserSkillsOfferedScalarFieldEnum[]
  }

  /**
   * UserSkillsOffered findFirstOrThrow
   */
  export type UserSkillsOfferedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsOffered
     */
    select?: UserSkillsOfferedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsOffered
     */
    omit?: UserSkillsOfferedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsOfferedInclude<ExtArgs> | null
    /**
     * Filter, which UserSkillsOffered to fetch.
     */
    where?: UserSkillsOfferedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSkillsOffereds to fetch.
     */
    orderBy?: UserSkillsOfferedOrderByWithRelationInput | UserSkillsOfferedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSkillsOffereds.
     */
    cursor?: UserSkillsOfferedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSkillsOffereds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSkillsOffereds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSkillsOffereds.
     */
    distinct?: UserSkillsOfferedScalarFieldEnum | UserSkillsOfferedScalarFieldEnum[]
  }

  /**
   * UserSkillsOffered findMany
   */
  export type UserSkillsOfferedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsOffered
     */
    select?: UserSkillsOfferedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsOffered
     */
    omit?: UserSkillsOfferedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsOfferedInclude<ExtArgs> | null
    /**
     * Filter, which UserSkillsOffereds to fetch.
     */
    where?: UserSkillsOfferedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSkillsOffereds to fetch.
     */
    orderBy?: UserSkillsOfferedOrderByWithRelationInput | UserSkillsOfferedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSkillsOffereds.
     */
    cursor?: UserSkillsOfferedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSkillsOffereds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSkillsOffereds.
     */
    skip?: number
    distinct?: UserSkillsOfferedScalarFieldEnum | UserSkillsOfferedScalarFieldEnum[]
  }

  /**
   * UserSkillsOffered create
   */
  export type UserSkillsOfferedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsOffered
     */
    select?: UserSkillsOfferedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsOffered
     */
    omit?: UserSkillsOfferedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsOfferedInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSkillsOffered.
     */
    data: XOR<UserSkillsOfferedCreateInput, UserSkillsOfferedUncheckedCreateInput>
  }

  /**
   * UserSkillsOffered createMany
   */
  export type UserSkillsOfferedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSkillsOffereds.
     */
    data: UserSkillsOfferedCreateManyInput | UserSkillsOfferedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSkillsOffered createManyAndReturn
   */
  export type UserSkillsOfferedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsOffered
     */
    select?: UserSkillsOfferedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsOffered
     */
    omit?: UserSkillsOfferedOmit<ExtArgs> | null
    /**
     * The data used to create many UserSkillsOffereds.
     */
    data: UserSkillsOfferedCreateManyInput | UserSkillsOfferedCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsOfferedIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSkillsOffered update
   */
  export type UserSkillsOfferedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsOffered
     */
    select?: UserSkillsOfferedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsOffered
     */
    omit?: UserSkillsOfferedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsOfferedInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSkillsOffered.
     */
    data: XOR<UserSkillsOfferedUpdateInput, UserSkillsOfferedUncheckedUpdateInput>
    /**
     * Choose, which UserSkillsOffered to update.
     */
    where: UserSkillsOfferedWhereUniqueInput
  }

  /**
   * UserSkillsOffered updateMany
   */
  export type UserSkillsOfferedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSkillsOffereds.
     */
    data: XOR<UserSkillsOfferedUpdateManyMutationInput, UserSkillsOfferedUncheckedUpdateManyInput>
    /**
     * Filter which UserSkillsOffereds to update
     */
    where?: UserSkillsOfferedWhereInput
    /**
     * Limit how many UserSkillsOffereds to update.
     */
    limit?: number
  }

  /**
   * UserSkillsOffered updateManyAndReturn
   */
  export type UserSkillsOfferedUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsOffered
     */
    select?: UserSkillsOfferedSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsOffered
     */
    omit?: UserSkillsOfferedOmit<ExtArgs> | null
    /**
     * The data used to update UserSkillsOffereds.
     */
    data: XOR<UserSkillsOfferedUpdateManyMutationInput, UserSkillsOfferedUncheckedUpdateManyInput>
    /**
     * Filter which UserSkillsOffereds to update
     */
    where?: UserSkillsOfferedWhereInput
    /**
     * Limit how many UserSkillsOffereds to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsOfferedIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSkillsOffered upsert
   */
  export type UserSkillsOfferedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsOffered
     */
    select?: UserSkillsOfferedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsOffered
     */
    omit?: UserSkillsOfferedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsOfferedInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSkillsOffered to update in case it exists.
     */
    where: UserSkillsOfferedWhereUniqueInput
    /**
     * In case the UserSkillsOffered found by the `where` argument doesn't exist, create a new UserSkillsOffered with this data.
     */
    create: XOR<UserSkillsOfferedCreateInput, UserSkillsOfferedUncheckedCreateInput>
    /**
     * In case the UserSkillsOffered was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSkillsOfferedUpdateInput, UserSkillsOfferedUncheckedUpdateInput>
  }

  /**
   * UserSkillsOffered delete
   */
  export type UserSkillsOfferedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsOffered
     */
    select?: UserSkillsOfferedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsOffered
     */
    omit?: UserSkillsOfferedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsOfferedInclude<ExtArgs> | null
    /**
     * Filter which UserSkillsOffered to delete.
     */
    where: UserSkillsOfferedWhereUniqueInput
  }

  /**
   * UserSkillsOffered deleteMany
   */
  export type UserSkillsOfferedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSkillsOffereds to delete
     */
    where?: UserSkillsOfferedWhereInput
    /**
     * Limit how many UserSkillsOffereds to delete.
     */
    limit?: number
  }

  /**
   * UserSkillsOffered without action
   */
  export type UserSkillsOfferedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsOffered
     */
    select?: UserSkillsOfferedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsOffered
     */
    omit?: UserSkillsOfferedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsOfferedInclude<ExtArgs> | null
  }


  /**
   * Model UserSkillsWanted
   */

  export type AggregateUserSkillsWanted = {
    _count: UserSkillsWantedCountAggregateOutputType | null
    _min: UserSkillsWantedMinAggregateOutputType | null
    _max: UserSkillsWantedMaxAggregateOutputType | null
  }

  export type UserSkillsWantedMinAggregateOutputType = {
    id: string | null
    userId: string | null
    skillId: string | null
  }

  export type UserSkillsWantedMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    skillId: string | null
  }

  export type UserSkillsWantedCountAggregateOutputType = {
    id: number
    userId: number
    skillId: number
    _all: number
  }


  export type UserSkillsWantedMinAggregateInputType = {
    id?: true
    userId?: true
    skillId?: true
  }

  export type UserSkillsWantedMaxAggregateInputType = {
    id?: true
    userId?: true
    skillId?: true
  }

  export type UserSkillsWantedCountAggregateInputType = {
    id?: true
    userId?: true
    skillId?: true
    _all?: true
  }

  export type UserSkillsWantedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSkillsWanted to aggregate.
     */
    where?: UserSkillsWantedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSkillsWanteds to fetch.
     */
    orderBy?: UserSkillsWantedOrderByWithRelationInput | UserSkillsWantedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSkillsWantedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSkillsWanteds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSkillsWanteds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSkillsWanteds
    **/
    _count?: true | UserSkillsWantedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSkillsWantedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSkillsWantedMaxAggregateInputType
  }

  export type GetUserSkillsWantedAggregateType<T extends UserSkillsWantedAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSkillsWanted]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSkillsWanted[P]>
      : GetScalarType<T[P], AggregateUserSkillsWanted[P]>
  }




  export type UserSkillsWantedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSkillsWantedWhereInput
    orderBy?: UserSkillsWantedOrderByWithAggregationInput | UserSkillsWantedOrderByWithAggregationInput[]
    by: UserSkillsWantedScalarFieldEnum[] | UserSkillsWantedScalarFieldEnum
    having?: UserSkillsWantedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSkillsWantedCountAggregateInputType | true
    _min?: UserSkillsWantedMinAggregateInputType
    _max?: UserSkillsWantedMaxAggregateInputType
  }

  export type UserSkillsWantedGroupByOutputType = {
    id: string
    userId: string
    skillId: string
    _count: UserSkillsWantedCountAggregateOutputType | null
    _min: UserSkillsWantedMinAggregateOutputType | null
    _max: UserSkillsWantedMaxAggregateOutputType | null
  }

  type GetUserSkillsWantedGroupByPayload<T extends UserSkillsWantedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSkillsWantedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSkillsWantedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSkillsWantedGroupByOutputType[P]>
            : GetScalarType<T[P], UserSkillsWantedGroupByOutputType[P]>
        }
      >
    >


  export type UserSkillsWantedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    skillId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSkillsWanted"]>

  export type UserSkillsWantedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    skillId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSkillsWanted"]>

  export type UserSkillsWantedSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    skillId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSkillsWanted"]>

  export type UserSkillsWantedSelectScalar = {
    id?: boolean
    userId?: boolean
    skillId?: boolean
  }

  export type UserSkillsWantedOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "skillId", ExtArgs["result"]["userSkillsWanted"]>
  export type UserSkillsWantedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }
  export type UserSkillsWantedIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }
  export type UserSkillsWantedIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }

  export type $UserSkillsWantedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSkillsWanted"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      skill: Prisma.$SkillPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      skillId: string
    }, ExtArgs["result"]["userSkillsWanted"]>
    composites: {}
  }

  type UserSkillsWantedGetPayload<S extends boolean | null | undefined | UserSkillsWantedDefaultArgs> = $Result.GetResult<Prisma.$UserSkillsWantedPayload, S>

  type UserSkillsWantedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSkillsWantedFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSkillsWantedCountAggregateInputType | true
    }

  export interface UserSkillsWantedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSkillsWanted'], meta: { name: 'UserSkillsWanted' } }
    /**
     * Find zero or one UserSkillsWanted that matches the filter.
     * @param {UserSkillsWantedFindUniqueArgs} args - Arguments to find a UserSkillsWanted
     * @example
     * // Get one UserSkillsWanted
     * const userSkillsWanted = await prisma.userSkillsWanted.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSkillsWantedFindUniqueArgs>(args: SelectSubset<T, UserSkillsWantedFindUniqueArgs<ExtArgs>>): Prisma__UserSkillsWantedClient<$Result.GetResult<Prisma.$UserSkillsWantedPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSkillsWanted that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSkillsWantedFindUniqueOrThrowArgs} args - Arguments to find a UserSkillsWanted
     * @example
     * // Get one UserSkillsWanted
     * const userSkillsWanted = await prisma.userSkillsWanted.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSkillsWantedFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSkillsWantedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSkillsWantedClient<$Result.GetResult<Prisma.$UserSkillsWantedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSkillsWanted that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSkillsWantedFindFirstArgs} args - Arguments to find a UserSkillsWanted
     * @example
     * // Get one UserSkillsWanted
     * const userSkillsWanted = await prisma.userSkillsWanted.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSkillsWantedFindFirstArgs>(args?: SelectSubset<T, UserSkillsWantedFindFirstArgs<ExtArgs>>): Prisma__UserSkillsWantedClient<$Result.GetResult<Prisma.$UserSkillsWantedPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSkillsWanted that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSkillsWantedFindFirstOrThrowArgs} args - Arguments to find a UserSkillsWanted
     * @example
     * // Get one UserSkillsWanted
     * const userSkillsWanted = await prisma.userSkillsWanted.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSkillsWantedFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSkillsWantedFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSkillsWantedClient<$Result.GetResult<Prisma.$UserSkillsWantedPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSkillsWanteds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSkillsWantedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSkillsWanteds
     * const userSkillsWanteds = await prisma.userSkillsWanted.findMany()
     * 
     * // Get first 10 UserSkillsWanteds
     * const userSkillsWanteds = await prisma.userSkillsWanted.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSkillsWantedWithIdOnly = await prisma.userSkillsWanted.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSkillsWantedFindManyArgs>(args?: SelectSubset<T, UserSkillsWantedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSkillsWantedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSkillsWanted.
     * @param {UserSkillsWantedCreateArgs} args - Arguments to create a UserSkillsWanted.
     * @example
     * // Create one UserSkillsWanted
     * const UserSkillsWanted = await prisma.userSkillsWanted.create({
     *   data: {
     *     // ... data to create a UserSkillsWanted
     *   }
     * })
     * 
     */
    create<T extends UserSkillsWantedCreateArgs>(args: SelectSubset<T, UserSkillsWantedCreateArgs<ExtArgs>>): Prisma__UserSkillsWantedClient<$Result.GetResult<Prisma.$UserSkillsWantedPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSkillsWanteds.
     * @param {UserSkillsWantedCreateManyArgs} args - Arguments to create many UserSkillsWanteds.
     * @example
     * // Create many UserSkillsWanteds
     * const userSkillsWanted = await prisma.userSkillsWanted.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSkillsWantedCreateManyArgs>(args?: SelectSubset<T, UserSkillsWantedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSkillsWanteds and returns the data saved in the database.
     * @param {UserSkillsWantedCreateManyAndReturnArgs} args - Arguments to create many UserSkillsWanteds.
     * @example
     * // Create many UserSkillsWanteds
     * const userSkillsWanted = await prisma.userSkillsWanted.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSkillsWanteds and only return the `id`
     * const userSkillsWantedWithIdOnly = await prisma.userSkillsWanted.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSkillsWantedCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSkillsWantedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSkillsWantedPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSkillsWanted.
     * @param {UserSkillsWantedDeleteArgs} args - Arguments to delete one UserSkillsWanted.
     * @example
     * // Delete one UserSkillsWanted
     * const UserSkillsWanted = await prisma.userSkillsWanted.delete({
     *   where: {
     *     // ... filter to delete one UserSkillsWanted
     *   }
     * })
     * 
     */
    delete<T extends UserSkillsWantedDeleteArgs>(args: SelectSubset<T, UserSkillsWantedDeleteArgs<ExtArgs>>): Prisma__UserSkillsWantedClient<$Result.GetResult<Prisma.$UserSkillsWantedPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSkillsWanted.
     * @param {UserSkillsWantedUpdateArgs} args - Arguments to update one UserSkillsWanted.
     * @example
     * // Update one UserSkillsWanted
     * const userSkillsWanted = await prisma.userSkillsWanted.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSkillsWantedUpdateArgs>(args: SelectSubset<T, UserSkillsWantedUpdateArgs<ExtArgs>>): Prisma__UserSkillsWantedClient<$Result.GetResult<Prisma.$UserSkillsWantedPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSkillsWanteds.
     * @param {UserSkillsWantedDeleteManyArgs} args - Arguments to filter UserSkillsWanteds to delete.
     * @example
     * // Delete a few UserSkillsWanteds
     * const { count } = await prisma.userSkillsWanted.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSkillsWantedDeleteManyArgs>(args?: SelectSubset<T, UserSkillsWantedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSkillsWanteds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSkillsWantedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSkillsWanteds
     * const userSkillsWanted = await prisma.userSkillsWanted.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSkillsWantedUpdateManyArgs>(args: SelectSubset<T, UserSkillsWantedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSkillsWanteds and returns the data updated in the database.
     * @param {UserSkillsWantedUpdateManyAndReturnArgs} args - Arguments to update many UserSkillsWanteds.
     * @example
     * // Update many UserSkillsWanteds
     * const userSkillsWanted = await prisma.userSkillsWanted.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSkillsWanteds and only return the `id`
     * const userSkillsWantedWithIdOnly = await prisma.userSkillsWanted.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSkillsWantedUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSkillsWantedUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSkillsWantedPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSkillsWanted.
     * @param {UserSkillsWantedUpsertArgs} args - Arguments to update or create a UserSkillsWanted.
     * @example
     * // Update or create a UserSkillsWanted
     * const userSkillsWanted = await prisma.userSkillsWanted.upsert({
     *   create: {
     *     // ... data to create a UserSkillsWanted
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSkillsWanted we want to update
     *   }
     * })
     */
    upsert<T extends UserSkillsWantedUpsertArgs>(args: SelectSubset<T, UserSkillsWantedUpsertArgs<ExtArgs>>): Prisma__UserSkillsWantedClient<$Result.GetResult<Prisma.$UserSkillsWantedPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSkillsWanteds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSkillsWantedCountArgs} args - Arguments to filter UserSkillsWanteds to count.
     * @example
     * // Count the number of UserSkillsWanteds
     * const count = await prisma.userSkillsWanted.count({
     *   where: {
     *     // ... the filter for the UserSkillsWanteds we want to count
     *   }
     * })
    **/
    count<T extends UserSkillsWantedCountArgs>(
      args?: Subset<T, UserSkillsWantedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSkillsWantedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSkillsWanted.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSkillsWantedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSkillsWantedAggregateArgs>(args: Subset<T, UserSkillsWantedAggregateArgs>): Prisma.PrismaPromise<GetUserSkillsWantedAggregateType<T>>

    /**
     * Group by UserSkillsWanted.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSkillsWantedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSkillsWantedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSkillsWantedGroupByArgs['orderBy'] }
        : { orderBy?: UserSkillsWantedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSkillsWantedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSkillsWantedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSkillsWanted model
   */
  readonly fields: UserSkillsWantedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSkillsWanted.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSkillsWantedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    skill<T extends SkillDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkillDefaultArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSkillsWanted model
   */
  interface UserSkillsWantedFieldRefs {
    readonly id: FieldRef<"UserSkillsWanted", 'String'>
    readonly userId: FieldRef<"UserSkillsWanted", 'String'>
    readonly skillId: FieldRef<"UserSkillsWanted", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserSkillsWanted findUnique
   */
  export type UserSkillsWantedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsWanted
     */
    select?: UserSkillsWantedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsWanted
     */
    omit?: UserSkillsWantedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsWantedInclude<ExtArgs> | null
    /**
     * Filter, which UserSkillsWanted to fetch.
     */
    where: UserSkillsWantedWhereUniqueInput
  }

  /**
   * UserSkillsWanted findUniqueOrThrow
   */
  export type UserSkillsWantedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsWanted
     */
    select?: UserSkillsWantedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsWanted
     */
    omit?: UserSkillsWantedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsWantedInclude<ExtArgs> | null
    /**
     * Filter, which UserSkillsWanted to fetch.
     */
    where: UserSkillsWantedWhereUniqueInput
  }

  /**
   * UserSkillsWanted findFirst
   */
  export type UserSkillsWantedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsWanted
     */
    select?: UserSkillsWantedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsWanted
     */
    omit?: UserSkillsWantedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsWantedInclude<ExtArgs> | null
    /**
     * Filter, which UserSkillsWanted to fetch.
     */
    where?: UserSkillsWantedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSkillsWanteds to fetch.
     */
    orderBy?: UserSkillsWantedOrderByWithRelationInput | UserSkillsWantedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSkillsWanteds.
     */
    cursor?: UserSkillsWantedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSkillsWanteds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSkillsWanteds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSkillsWanteds.
     */
    distinct?: UserSkillsWantedScalarFieldEnum | UserSkillsWantedScalarFieldEnum[]
  }

  /**
   * UserSkillsWanted findFirstOrThrow
   */
  export type UserSkillsWantedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsWanted
     */
    select?: UserSkillsWantedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsWanted
     */
    omit?: UserSkillsWantedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsWantedInclude<ExtArgs> | null
    /**
     * Filter, which UserSkillsWanted to fetch.
     */
    where?: UserSkillsWantedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSkillsWanteds to fetch.
     */
    orderBy?: UserSkillsWantedOrderByWithRelationInput | UserSkillsWantedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSkillsWanteds.
     */
    cursor?: UserSkillsWantedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSkillsWanteds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSkillsWanteds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSkillsWanteds.
     */
    distinct?: UserSkillsWantedScalarFieldEnum | UserSkillsWantedScalarFieldEnum[]
  }

  /**
   * UserSkillsWanted findMany
   */
  export type UserSkillsWantedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsWanted
     */
    select?: UserSkillsWantedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsWanted
     */
    omit?: UserSkillsWantedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsWantedInclude<ExtArgs> | null
    /**
     * Filter, which UserSkillsWanteds to fetch.
     */
    where?: UserSkillsWantedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSkillsWanteds to fetch.
     */
    orderBy?: UserSkillsWantedOrderByWithRelationInput | UserSkillsWantedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSkillsWanteds.
     */
    cursor?: UserSkillsWantedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSkillsWanteds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSkillsWanteds.
     */
    skip?: number
    distinct?: UserSkillsWantedScalarFieldEnum | UserSkillsWantedScalarFieldEnum[]
  }

  /**
   * UserSkillsWanted create
   */
  export type UserSkillsWantedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsWanted
     */
    select?: UserSkillsWantedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsWanted
     */
    omit?: UserSkillsWantedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsWantedInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSkillsWanted.
     */
    data: XOR<UserSkillsWantedCreateInput, UserSkillsWantedUncheckedCreateInput>
  }

  /**
   * UserSkillsWanted createMany
   */
  export type UserSkillsWantedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSkillsWanteds.
     */
    data: UserSkillsWantedCreateManyInput | UserSkillsWantedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSkillsWanted createManyAndReturn
   */
  export type UserSkillsWantedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsWanted
     */
    select?: UserSkillsWantedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsWanted
     */
    omit?: UserSkillsWantedOmit<ExtArgs> | null
    /**
     * The data used to create many UserSkillsWanteds.
     */
    data: UserSkillsWantedCreateManyInput | UserSkillsWantedCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsWantedIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSkillsWanted update
   */
  export type UserSkillsWantedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsWanted
     */
    select?: UserSkillsWantedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsWanted
     */
    omit?: UserSkillsWantedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsWantedInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSkillsWanted.
     */
    data: XOR<UserSkillsWantedUpdateInput, UserSkillsWantedUncheckedUpdateInput>
    /**
     * Choose, which UserSkillsWanted to update.
     */
    where: UserSkillsWantedWhereUniqueInput
  }

  /**
   * UserSkillsWanted updateMany
   */
  export type UserSkillsWantedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSkillsWanteds.
     */
    data: XOR<UserSkillsWantedUpdateManyMutationInput, UserSkillsWantedUncheckedUpdateManyInput>
    /**
     * Filter which UserSkillsWanteds to update
     */
    where?: UserSkillsWantedWhereInput
    /**
     * Limit how many UserSkillsWanteds to update.
     */
    limit?: number
  }

  /**
   * UserSkillsWanted updateManyAndReturn
   */
  export type UserSkillsWantedUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsWanted
     */
    select?: UserSkillsWantedSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsWanted
     */
    omit?: UserSkillsWantedOmit<ExtArgs> | null
    /**
     * The data used to update UserSkillsWanteds.
     */
    data: XOR<UserSkillsWantedUpdateManyMutationInput, UserSkillsWantedUncheckedUpdateManyInput>
    /**
     * Filter which UserSkillsWanteds to update
     */
    where?: UserSkillsWantedWhereInput
    /**
     * Limit how many UserSkillsWanteds to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsWantedIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSkillsWanted upsert
   */
  export type UserSkillsWantedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsWanted
     */
    select?: UserSkillsWantedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsWanted
     */
    omit?: UserSkillsWantedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsWantedInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSkillsWanted to update in case it exists.
     */
    where: UserSkillsWantedWhereUniqueInput
    /**
     * In case the UserSkillsWanted found by the `where` argument doesn't exist, create a new UserSkillsWanted with this data.
     */
    create: XOR<UserSkillsWantedCreateInput, UserSkillsWantedUncheckedCreateInput>
    /**
     * In case the UserSkillsWanted was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSkillsWantedUpdateInput, UserSkillsWantedUncheckedUpdateInput>
  }

  /**
   * UserSkillsWanted delete
   */
  export type UserSkillsWantedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsWanted
     */
    select?: UserSkillsWantedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsWanted
     */
    omit?: UserSkillsWantedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsWantedInclude<ExtArgs> | null
    /**
     * Filter which UserSkillsWanted to delete.
     */
    where: UserSkillsWantedWhereUniqueInput
  }

  /**
   * UserSkillsWanted deleteMany
   */
  export type UserSkillsWantedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSkillsWanteds to delete
     */
    where?: UserSkillsWantedWhereInput
    /**
     * Limit how many UserSkillsWanteds to delete.
     */
    limit?: number
  }

  /**
   * UserSkillsWanted without action
   */
  export type UserSkillsWantedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSkillsWanted
     */
    select?: UserSkillsWantedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSkillsWanted
     */
    omit?: UserSkillsWantedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSkillsWantedInclude<ExtArgs> | null
  }


  /**
   * Model SwapRequest
   */

  export type AggregateSwapRequest = {
    _count: SwapRequestCountAggregateOutputType | null
    _min: SwapRequestMinAggregateOutputType | null
    _max: SwapRequestMaxAggregateOutputType | null
  }

  export type SwapRequestMinAggregateOutputType = {
    id: string | null
    fromUserId: string | null
    toUserId: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SwapRequestMaxAggregateOutputType = {
    id: string | null
    fromUserId: string | null
    toUserId: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SwapRequestCountAggregateOutputType = {
    id: number
    fromUserId: number
    toUserId: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SwapRequestMinAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SwapRequestMaxAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SwapRequestCountAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SwapRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SwapRequest to aggregate.
     */
    where?: SwapRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwapRequests to fetch.
     */
    orderBy?: SwapRequestOrderByWithRelationInput | SwapRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SwapRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwapRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwapRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SwapRequests
    **/
    _count?: true | SwapRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SwapRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SwapRequestMaxAggregateInputType
  }

  export type GetSwapRequestAggregateType<T extends SwapRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateSwapRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSwapRequest[P]>
      : GetScalarType<T[P], AggregateSwapRequest[P]>
  }




  export type SwapRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SwapRequestWhereInput
    orderBy?: SwapRequestOrderByWithAggregationInput | SwapRequestOrderByWithAggregationInput[]
    by: SwapRequestScalarFieldEnum[] | SwapRequestScalarFieldEnum
    having?: SwapRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SwapRequestCountAggregateInputType | true
    _min?: SwapRequestMinAggregateInputType
    _max?: SwapRequestMaxAggregateInputType
  }

  export type SwapRequestGroupByOutputType = {
    id: string
    fromUserId: string
    toUserId: string
    status: string
    createdAt: Date
    updatedAt: Date
    _count: SwapRequestCountAggregateOutputType | null
    _min: SwapRequestMinAggregateOutputType | null
    _max: SwapRequestMaxAggregateOutputType | null
  }

  type GetSwapRequestGroupByPayload<T extends SwapRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SwapRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SwapRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SwapRequestGroupByOutputType[P]>
            : GetScalarType<T[P], SwapRequestGroupByOutputType[P]>
        }
      >
    >


  export type SwapRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fromUserId?: boolean
    toUserId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fromUser?: boolean | UserDefaultArgs<ExtArgs>
    toUser?: boolean | UserDefaultArgs<ExtArgs>
    ratings?: boolean | SwapRequest$ratingsArgs<ExtArgs>
    reviews?: boolean | SwapRequest$reviewsArgs<ExtArgs>
    _count?: boolean | SwapRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["swapRequest"]>

  export type SwapRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fromUserId?: boolean
    toUserId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fromUser?: boolean | UserDefaultArgs<ExtArgs>
    toUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["swapRequest"]>

  export type SwapRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fromUserId?: boolean
    toUserId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fromUser?: boolean | UserDefaultArgs<ExtArgs>
    toUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["swapRequest"]>

  export type SwapRequestSelectScalar = {
    id?: boolean
    fromUserId?: boolean
    toUserId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SwapRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fromUserId" | "toUserId" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["swapRequest"]>
  export type SwapRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fromUser?: boolean | UserDefaultArgs<ExtArgs>
    toUser?: boolean | UserDefaultArgs<ExtArgs>
    ratings?: boolean | SwapRequest$ratingsArgs<ExtArgs>
    reviews?: boolean | SwapRequest$reviewsArgs<ExtArgs>
    _count?: boolean | SwapRequestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SwapRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fromUser?: boolean | UserDefaultArgs<ExtArgs>
    toUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SwapRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fromUser?: boolean | UserDefaultArgs<ExtArgs>
    toUser?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SwapRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SwapRequest"
    objects: {
      fromUser: Prisma.$UserPayload<ExtArgs>
      toUser: Prisma.$UserPayload<ExtArgs>
      ratings: Prisma.$RatingPayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fromUserId: string
      toUserId: string
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["swapRequest"]>
    composites: {}
  }

  type SwapRequestGetPayload<S extends boolean | null | undefined | SwapRequestDefaultArgs> = $Result.GetResult<Prisma.$SwapRequestPayload, S>

  type SwapRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SwapRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SwapRequestCountAggregateInputType | true
    }

  export interface SwapRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SwapRequest'], meta: { name: 'SwapRequest' } }
    /**
     * Find zero or one SwapRequest that matches the filter.
     * @param {SwapRequestFindUniqueArgs} args - Arguments to find a SwapRequest
     * @example
     * // Get one SwapRequest
     * const swapRequest = await prisma.swapRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SwapRequestFindUniqueArgs>(args: SelectSubset<T, SwapRequestFindUniqueArgs<ExtArgs>>): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SwapRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SwapRequestFindUniqueOrThrowArgs} args - Arguments to find a SwapRequest
     * @example
     * // Get one SwapRequest
     * const swapRequest = await prisma.swapRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SwapRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, SwapRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SwapRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestFindFirstArgs} args - Arguments to find a SwapRequest
     * @example
     * // Get one SwapRequest
     * const swapRequest = await prisma.swapRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SwapRequestFindFirstArgs>(args?: SelectSubset<T, SwapRequestFindFirstArgs<ExtArgs>>): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SwapRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestFindFirstOrThrowArgs} args - Arguments to find a SwapRequest
     * @example
     * // Get one SwapRequest
     * const swapRequest = await prisma.swapRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SwapRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, SwapRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SwapRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SwapRequests
     * const swapRequests = await prisma.swapRequest.findMany()
     * 
     * // Get first 10 SwapRequests
     * const swapRequests = await prisma.swapRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const swapRequestWithIdOnly = await prisma.swapRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SwapRequestFindManyArgs>(args?: SelectSubset<T, SwapRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SwapRequest.
     * @param {SwapRequestCreateArgs} args - Arguments to create a SwapRequest.
     * @example
     * // Create one SwapRequest
     * const SwapRequest = await prisma.swapRequest.create({
     *   data: {
     *     // ... data to create a SwapRequest
     *   }
     * })
     * 
     */
    create<T extends SwapRequestCreateArgs>(args: SelectSubset<T, SwapRequestCreateArgs<ExtArgs>>): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SwapRequests.
     * @param {SwapRequestCreateManyArgs} args - Arguments to create many SwapRequests.
     * @example
     * // Create many SwapRequests
     * const swapRequest = await prisma.swapRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SwapRequestCreateManyArgs>(args?: SelectSubset<T, SwapRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SwapRequests and returns the data saved in the database.
     * @param {SwapRequestCreateManyAndReturnArgs} args - Arguments to create many SwapRequests.
     * @example
     * // Create many SwapRequests
     * const swapRequest = await prisma.swapRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SwapRequests and only return the `id`
     * const swapRequestWithIdOnly = await prisma.swapRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SwapRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, SwapRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SwapRequest.
     * @param {SwapRequestDeleteArgs} args - Arguments to delete one SwapRequest.
     * @example
     * // Delete one SwapRequest
     * const SwapRequest = await prisma.swapRequest.delete({
     *   where: {
     *     // ... filter to delete one SwapRequest
     *   }
     * })
     * 
     */
    delete<T extends SwapRequestDeleteArgs>(args: SelectSubset<T, SwapRequestDeleteArgs<ExtArgs>>): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SwapRequest.
     * @param {SwapRequestUpdateArgs} args - Arguments to update one SwapRequest.
     * @example
     * // Update one SwapRequest
     * const swapRequest = await prisma.swapRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SwapRequestUpdateArgs>(args: SelectSubset<T, SwapRequestUpdateArgs<ExtArgs>>): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SwapRequests.
     * @param {SwapRequestDeleteManyArgs} args - Arguments to filter SwapRequests to delete.
     * @example
     * // Delete a few SwapRequests
     * const { count } = await prisma.swapRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SwapRequestDeleteManyArgs>(args?: SelectSubset<T, SwapRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SwapRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SwapRequests
     * const swapRequest = await prisma.swapRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SwapRequestUpdateManyArgs>(args: SelectSubset<T, SwapRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SwapRequests and returns the data updated in the database.
     * @param {SwapRequestUpdateManyAndReturnArgs} args - Arguments to update many SwapRequests.
     * @example
     * // Update many SwapRequests
     * const swapRequest = await prisma.swapRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SwapRequests and only return the `id`
     * const swapRequestWithIdOnly = await prisma.swapRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SwapRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, SwapRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SwapRequest.
     * @param {SwapRequestUpsertArgs} args - Arguments to update or create a SwapRequest.
     * @example
     * // Update or create a SwapRequest
     * const swapRequest = await prisma.swapRequest.upsert({
     *   create: {
     *     // ... data to create a SwapRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SwapRequest we want to update
     *   }
     * })
     */
    upsert<T extends SwapRequestUpsertArgs>(args: SelectSubset<T, SwapRequestUpsertArgs<ExtArgs>>): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SwapRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestCountArgs} args - Arguments to filter SwapRequests to count.
     * @example
     * // Count the number of SwapRequests
     * const count = await prisma.swapRequest.count({
     *   where: {
     *     // ... the filter for the SwapRequests we want to count
     *   }
     * })
    **/
    count<T extends SwapRequestCountArgs>(
      args?: Subset<T, SwapRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SwapRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SwapRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SwapRequestAggregateArgs>(args: Subset<T, SwapRequestAggregateArgs>): Prisma.PrismaPromise<GetSwapRequestAggregateType<T>>

    /**
     * Group by SwapRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SwapRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SwapRequestGroupByArgs['orderBy'] }
        : { orderBy?: SwapRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SwapRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSwapRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SwapRequest model
   */
  readonly fields: SwapRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SwapRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SwapRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fromUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    toUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ratings<T extends SwapRequest$ratingsArgs<ExtArgs> = {}>(args?: Subset<T, SwapRequest$ratingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends SwapRequest$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, SwapRequest$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SwapRequest model
   */
  interface SwapRequestFieldRefs {
    readonly id: FieldRef<"SwapRequest", 'String'>
    readonly fromUserId: FieldRef<"SwapRequest", 'String'>
    readonly toUserId: FieldRef<"SwapRequest", 'String'>
    readonly status: FieldRef<"SwapRequest", 'String'>
    readonly createdAt: FieldRef<"SwapRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"SwapRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SwapRequest findUnique
   */
  export type SwapRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * Filter, which SwapRequest to fetch.
     */
    where: SwapRequestWhereUniqueInput
  }

  /**
   * SwapRequest findUniqueOrThrow
   */
  export type SwapRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * Filter, which SwapRequest to fetch.
     */
    where: SwapRequestWhereUniqueInput
  }

  /**
   * SwapRequest findFirst
   */
  export type SwapRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * Filter, which SwapRequest to fetch.
     */
    where?: SwapRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwapRequests to fetch.
     */
    orderBy?: SwapRequestOrderByWithRelationInput | SwapRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SwapRequests.
     */
    cursor?: SwapRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwapRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwapRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SwapRequests.
     */
    distinct?: SwapRequestScalarFieldEnum | SwapRequestScalarFieldEnum[]
  }

  /**
   * SwapRequest findFirstOrThrow
   */
  export type SwapRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * Filter, which SwapRequest to fetch.
     */
    where?: SwapRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwapRequests to fetch.
     */
    orderBy?: SwapRequestOrderByWithRelationInput | SwapRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SwapRequests.
     */
    cursor?: SwapRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwapRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwapRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SwapRequests.
     */
    distinct?: SwapRequestScalarFieldEnum | SwapRequestScalarFieldEnum[]
  }

  /**
   * SwapRequest findMany
   */
  export type SwapRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * Filter, which SwapRequests to fetch.
     */
    where?: SwapRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwapRequests to fetch.
     */
    orderBy?: SwapRequestOrderByWithRelationInput | SwapRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SwapRequests.
     */
    cursor?: SwapRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwapRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwapRequests.
     */
    skip?: number
    distinct?: SwapRequestScalarFieldEnum | SwapRequestScalarFieldEnum[]
  }

  /**
   * SwapRequest create
   */
  export type SwapRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a SwapRequest.
     */
    data: XOR<SwapRequestCreateInput, SwapRequestUncheckedCreateInput>
  }

  /**
   * SwapRequest createMany
   */
  export type SwapRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SwapRequests.
     */
    data: SwapRequestCreateManyInput | SwapRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SwapRequest createManyAndReturn
   */
  export type SwapRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * The data used to create many SwapRequests.
     */
    data: SwapRequestCreateManyInput | SwapRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SwapRequest update
   */
  export type SwapRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a SwapRequest.
     */
    data: XOR<SwapRequestUpdateInput, SwapRequestUncheckedUpdateInput>
    /**
     * Choose, which SwapRequest to update.
     */
    where: SwapRequestWhereUniqueInput
  }

  /**
   * SwapRequest updateMany
   */
  export type SwapRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SwapRequests.
     */
    data: XOR<SwapRequestUpdateManyMutationInput, SwapRequestUncheckedUpdateManyInput>
    /**
     * Filter which SwapRequests to update
     */
    where?: SwapRequestWhereInput
    /**
     * Limit how many SwapRequests to update.
     */
    limit?: number
  }

  /**
   * SwapRequest updateManyAndReturn
   */
  export type SwapRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * The data used to update SwapRequests.
     */
    data: XOR<SwapRequestUpdateManyMutationInput, SwapRequestUncheckedUpdateManyInput>
    /**
     * Filter which SwapRequests to update
     */
    where?: SwapRequestWhereInput
    /**
     * Limit how many SwapRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SwapRequest upsert
   */
  export type SwapRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the SwapRequest to update in case it exists.
     */
    where: SwapRequestWhereUniqueInput
    /**
     * In case the SwapRequest found by the `where` argument doesn't exist, create a new SwapRequest with this data.
     */
    create: XOR<SwapRequestCreateInput, SwapRequestUncheckedCreateInput>
    /**
     * In case the SwapRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SwapRequestUpdateInput, SwapRequestUncheckedUpdateInput>
  }

  /**
   * SwapRequest delete
   */
  export type SwapRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * Filter which SwapRequest to delete.
     */
    where: SwapRequestWhereUniqueInput
  }

  /**
   * SwapRequest deleteMany
   */
  export type SwapRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SwapRequests to delete
     */
    where?: SwapRequestWhereInput
    /**
     * Limit how many SwapRequests to delete.
     */
    limit?: number
  }

  /**
   * SwapRequest.ratings
   */
  export type SwapRequest$ratingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * SwapRequest.reviews
   */
  export type SwapRequest$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * SwapRequest without action
   */
  export type SwapRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
  }


  /**
   * Model Rating
   */

  export type AggregateRating = {
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  export type RatingAvgAggregateOutputType = {
    stars: number | null
  }

  export type RatingSumAggregateOutputType = {
    stars: number | null
  }

  export type RatingMinAggregateOutputType = {
    id: string | null
    userId: string | null
    givenById: string | null
    role: string | null
    stars: number | null
    swapId: string | null
  }

  export type RatingMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    givenById: string | null
    role: string | null
    stars: number | null
    swapId: string | null
  }

  export type RatingCountAggregateOutputType = {
    id: number
    userId: number
    givenById: number
    role: number
    stars: number
    swapId: number
    _all: number
  }


  export type RatingAvgAggregateInputType = {
    stars?: true
  }

  export type RatingSumAggregateInputType = {
    stars?: true
  }

  export type RatingMinAggregateInputType = {
    id?: true
    userId?: true
    givenById?: true
    role?: true
    stars?: true
    swapId?: true
  }

  export type RatingMaxAggregateInputType = {
    id?: true
    userId?: true
    givenById?: true
    role?: true
    stars?: true
    swapId?: true
  }

  export type RatingCountAggregateInputType = {
    id?: true
    userId?: true
    givenById?: true
    role?: true
    stars?: true
    swapId?: true
    _all?: true
  }

  export type RatingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rating to aggregate.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ratings
    **/
    _count?: true | RatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RatingMaxAggregateInputType
  }

  export type GetRatingAggregateType<T extends RatingAggregateArgs> = {
        [P in keyof T & keyof AggregateRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRating[P]>
      : GetScalarType<T[P], AggregateRating[P]>
  }




  export type RatingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithAggregationInput | RatingOrderByWithAggregationInput[]
    by: RatingScalarFieldEnum[] | RatingScalarFieldEnum
    having?: RatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RatingCountAggregateInputType | true
    _avg?: RatingAvgAggregateInputType
    _sum?: RatingSumAggregateInputType
    _min?: RatingMinAggregateInputType
    _max?: RatingMaxAggregateInputType
  }

  export type RatingGroupByOutputType = {
    id: string
    userId: string
    givenById: string
    role: string
    stars: number
    swapId: string | null
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  type GetRatingGroupByPayload<T extends RatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RatingGroupByOutputType[P]>
            : GetScalarType<T[P], RatingGroupByOutputType[P]>
        }
      >
    >


  export type RatingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    givenById?: boolean
    role?: boolean
    stars?: boolean
    swapId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    givenBy?: boolean | UserDefaultArgs<ExtArgs>
    swap?: boolean | Rating$swapArgs<ExtArgs>
  }, ExtArgs["result"]["rating"]>

  export type RatingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    givenById?: boolean
    role?: boolean
    stars?: boolean
    swapId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    givenBy?: boolean | UserDefaultArgs<ExtArgs>
    swap?: boolean | Rating$swapArgs<ExtArgs>
  }, ExtArgs["result"]["rating"]>

  export type RatingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    givenById?: boolean
    role?: boolean
    stars?: boolean
    swapId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    givenBy?: boolean | UserDefaultArgs<ExtArgs>
    swap?: boolean | Rating$swapArgs<ExtArgs>
  }, ExtArgs["result"]["rating"]>

  export type RatingSelectScalar = {
    id?: boolean
    userId?: boolean
    givenById?: boolean
    role?: boolean
    stars?: boolean
    swapId?: boolean
  }

  export type RatingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "givenById" | "role" | "stars" | "swapId", ExtArgs["result"]["rating"]>
  export type RatingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    givenBy?: boolean | UserDefaultArgs<ExtArgs>
    swap?: boolean | Rating$swapArgs<ExtArgs>
  }
  export type RatingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    givenBy?: boolean | UserDefaultArgs<ExtArgs>
    swap?: boolean | Rating$swapArgs<ExtArgs>
  }
  export type RatingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    givenBy?: boolean | UserDefaultArgs<ExtArgs>
    swap?: boolean | Rating$swapArgs<ExtArgs>
  }

  export type $RatingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rating"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      givenBy: Prisma.$UserPayload<ExtArgs>
      swap: Prisma.$SwapRequestPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      givenById: string
      role: string
      stars: number
      swapId: string | null
    }, ExtArgs["result"]["rating"]>
    composites: {}
  }

  type RatingGetPayload<S extends boolean | null | undefined | RatingDefaultArgs> = $Result.GetResult<Prisma.$RatingPayload, S>

  type RatingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RatingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RatingCountAggregateInputType | true
    }

  export interface RatingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rating'], meta: { name: 'Rating' } }
    /**
     * Find zero or one Rating that matches the filter.
     * @param {RatingFindUniqueArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RatingFindUniqueArgs>(args: SelectSubset<T, RatingFindUniqueArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Rating that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RatingFindUniqueOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RatingFindUniqueOrThrowArgs>(args: SelectSubset<T, RatingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RatingFindFirstArgs>(args?: SelectSubset<T, RatingFindFirstArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RatingFindFirstOrThrowArgs>(args?: SelectSubset<T, RatingFindFirstOrThrowArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ratings
     * const ratings = await prisma.rating.findMany()
     * 
     * // Get first 10 Ratings
     * const ratings = await prisma.rating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingWithIdOnly = await prisma.rating.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RatingFindManyArgs>(args?: SelectSubset<T, RatingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Rating.
     * @param {RatingCreateArgs} args - Arguments to create a Rating.
     * @example
     * // Create one Rating
     * const Rating = await prisma.rating.create({
     *   data: {
     *     // ... data to create a Rating
     *   }
     * })
     * 
     */
    create<T extends RatingCreateArgs>(args: SelectSubset<T, RatingCreateArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ratings.
     * @param {RatingCreateManyArgs} args - Arguments to create many Ratings.
     * @example
     * // Create many Ratings
     * const rating = await prisma.rating.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RatingCreateManyArgs>(args?: SelectSubset<T, RatingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ratings and returns the data saved in the database.
     * @param {RatingCreateManyAndReturnArgs} args - Arguments to create many Ratings.
     * @example
     * // Create many Ratings
     * const rating = await prisma.rating.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ratings and only return the `id`
     * const ratingWithIdOnly = await prisma.rating.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RatingCreateManyAndReturnArgs>(args?: SelectSubset<T, RatingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Rating.
     * @param {RatingDeleteArgs} args - Arguments to delete one Rating.
     * @example
     * // Delete one Rating
     * const Rating = await prisma.rating.delete({
     *   where: {
     *     // ... filter to delete one Rating
     *   }
     * })
     * 
     */
    delete<T extends RatingDeleteArgs>(args: SelectSubset<T, RatingDeleteArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Rating.
     * @param {RatingUpdateArgs} args - Arguments to update one Rating.
     * @example
     * // Update one Rating
     * const rating = await prisma.rating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RatingUpdateArgs>(args: SelectSubset<T, RatingUpdateArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ratings.
     * @param {RatingDeleteManyArgs} args - Arguments to filter Ratings to delete.
     * @example
     * // Delete a few Ratings
     * const { count } = await prisma.rating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RatingDeleteManyArgs>(args?: SelectSubset<T, RatingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RatingUpdateManyArgs>(args: SelectSubset<T, RatingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings and returns the data updated in the database.
     * @param {RatingUpdateManyAndReturnArgs} args - Arguments to update many Ratings.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ratings and only return the `id`
     * const ratingWithIdOnly = await prisma.rating.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RatingUpdateManyAndReturnArgs>(args: SelectSubset<T, RatingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Rating.
     * @param {RatingUpsertArgs} args - Arguments to update or create a Rating.
     * @example
     * // Update or create a Rating
     * const rating = await prisma.rating.upsert({
     *   create: {
     *     // ... data to create a Rating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rating we want to update
     *   }
     * })
     */
    upsert<T extends RatingUpsertArgs>(args: SelectSubset<T, RatingUpsertArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCountArgs} args - Arguments to filter Ratings to count.
     * @example
     * // Count the number of Ratings
     * const count = await prisma.rating.count({
     *   where: {
     *     // ... the filter for the Ratings we want to count
     *   }
     * })
    **/
    count<T extends RatingCountArgs>(
      args?: Subset<T, RatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingAggregateArgs>(args: Subset<T, RatingAggregateArgs>): Prisma.PrismaPromise<GetRatingAggregateType<T>>

    /**
     * Group by Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RatingGroupByArgs['orderBy'] }
        : { orderBy?: RatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rating model
   */
  readonly fields: RatingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RatingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    givenBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    swap<T extends Rating$swapArgs<ExtArgs> = {}>(args?: Subset<T, Rating$swapArgs<ExtArgs>>): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Rating model
   */
  interface RatingFieldRefs {
    readonly id: FieldRef<"Rating", 'String'>
    readonly userId: FieldRef<"Rating", 'String'>
    readonly givenById: FieldRef<"Rating", 'String'>
    readonly role: FieldRef<"Rating", 'String'>
    readonly stars: FieldRef<"Rating", 'Int'>
    readonly swapId: FieldRef<"Rating", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Rating findUnique
   */
  export type RatingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating findUniqueOrThrow
   */
  export type RatingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating findFirst
   */
  export type RatingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * Rating findFirstOrThrow
   */
  export type RatingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * Rating findMany
   */
  export type RatingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Ratings to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * Rating create
   */
  export type RatingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The data needed to create a Rating.
     */
    data: XOR<RatingCreateInput, RatingUncheckedCreateInput>
  }

  /**
   * Rating createMany
   */
  export type RatingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ratings.
     */
    data: RatingCreateManyInput | RatingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Rating createManyAndReturn
   */
  export type RatingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * The data used to create many Ratings.
     */
    data: RatingCreateManyInput | RatingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Rating update
   */
  export type RatingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The data needed to update a Rating.
     */
    data: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
    /**
     * Choose, which Rating to update.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating updateMany
   */
  export type RatingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ratings.
     */
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyInput>
    /**
     * Filter which Ratings to update
     */
    where?: RatingWhereInput
    /**
     * Limit how many Ratings to update.
     */
    limit?: number
  }

  /**
   * Rating updateManyAndReturn
   */
  export type RatingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * The data used to update Ratings.
     */
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyInput>
    /**
     * Filter which Ratings to update
     */
    where?: RatingWhereInput
    /**
     * Limit how many Ratings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Rating upsert
   */
  export type RatingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The filter to search for the Rating to update in case it exists.
     */
    where: RatingWhereUniqueInput
    /**
     * In case the Rating found by the `where` argument doesn't exist, create a new Rating with this data.
     */
    create: XOR<RatingCreateInput, RatingUncheckedCreateInput>
    /**
     * In case the Rating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
  }

  /**
   * Rating delete
   */
  export type RatingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter which Rating to delete.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating deleteMany
   */
  export type RatingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ratings to delete
     */
    where?: RatingWhereInput
    /**
     * Limit how many Ratings to delete.
     */
    limit?: number
  }

  /**
   * Rating.swap
   */
  export type Rating$swapArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    where?: SwapRequestWhereInput
  }

  /**
   * Rating without action
   */
  export type RatingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewMinAggregateOutputType = {
    id: string | null
    userId: string | null
    givenById: string | null
    role: string | null
    comment: string | null
    swapId: string | null
    createdAt: Date | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    givenById: string | null
    role: string | null
    comment: string | null
    swapId: string | null
    createdAt: Date | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    userId: number
    givenById: number
    role: number
    comment: number
    swapId: number
    createdAt: number
    _all: number
  }


  export type ReviewMinAggregateInputType = {
    id?: true
    userId?: true
    givenById?: true
    role?: true
    comment?: true
    swapId?: true
    createdAt?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    userId?: true
    givenById?: true
    role?: true
    comment?: true
    swapId?: true
    createdAt?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    userId?: true
    givenById?: true
    role?: true
    comment?: true
    swapId?: true
    createdAt?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: string
    userId: string
    givenById: string
    role: string
    comment: string
    swapId: string | null
    createdAt: Date
    _count: ReviewCountAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    givenById?: boolean
    role?: boolean
    comment?: boolean
    swapId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    givenBy?: boolean | UserDefaultArgs<ExtArgs>
    swap?: boolean | Review$swapArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    givenById?: boolean
    role?: boolean
    comment?: boolean
    swapId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    givenBy?: boolean | UserDefaultArgs<ExtArgs>
    swap?: boolean | Review$swapArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    givenById?: boolean
    role?: boolean
    comment?: boolean
    swapId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    givenBy?: boolean | UserDefaultArgs<ExtArgs>
    swap?: boolean | Review$swapArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    id?: boolean
    userId?: boolean
    givenById?: boolean
    role?: boolean
    comment?: boolean
    swapId?: boolean
    createdAt?: boolean
  }

  export type ReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "givenById" | "role" | "comment" | "swapId" | "createdAt", ExtArgs["result"]["review"]>
  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    givenBy?: boolean | UserDefaultArgs<ExtArgs>
    swap?: boolean | Review$swapArgs<ExtArgs>
  }
  export type ReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    givenBy?: boolean | UserDefaultArgs<ExtArgs>
    swap?: boolean | Review$swapArgs<ExtArgs>
  }
  export type ReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    givenBy?: boolean | UserDefaultArgs<ExtArgs>
    swap?: boolean | Review$swapArgs<ExtArgs>
  }

  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      givenBy: Prisma.$UserPayload<ExtArgs>
      swap: Prisma.$SwapRequestPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      givenById: string
      role: string
      comment: string
      swapId: string | null
      createdAt: Date
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewFindUniqueArgs>(args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewFindFirstArgs>(args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewFindManyArgs>(args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends ReviewCreateArgs>(args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewCreateManyArgs>(args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reviews and returns the data saved in the database.
     * @param {ReviewCreateManyAndReturnArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends ReviewDeleteArgs>(args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUpdateArgs>(args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUpdateManyArgs>(args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews and returns the data updated in the database.
     * @param {ReviewUpdateManyAndReturnArgs} args - Arguments to update many Reviews.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUpsertArgs>(args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    givenBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    swap<T extends Review$swapArgs<ExtArgs> = {}>(args?: Subset<T, Review$swapArgs<ExtArgs>>): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Review model
   */
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'String'>
    readonly userId: FieldRef<"Review", 'String'>
    readonly givenById: FieldRef<"Review", 'String'>
    readonly role: FieldRef<"Review", 'String'>
    readonly comment: FieldRef<"Review", 'String'>
    readonly swapId: FieldRef<"Review", 'String'>
    readonly createdAt: FieldRef<"Review", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Review createManyAndReturn
   */
  export type ReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
  }

  /**
   * Review updateManyAndReturn
   */
  export type ReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to delete.
     */
    limit?: number
  }

  /**
   * Review.swap
   */
  export type Review$swapArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    where?: SwapRequestWhereInput
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Model BroadcastMessage
   */

  export type AggregateBroadcastMessage = {
    _count: BroadcastMessageCountAggregateOutputType | null
    _min: BroadcastMessageMinAggregateOutputType | null
    _max: BroadcastMessageMaxAggregateOutputType | null
  }

  export type BroadcastMessageMinAggregateOutputType = {
    id: string | null
    message: string | null
    createdAt: Date | null
    sentById: string | null
  }

  export type BroadcastMessageMaxAggregateOutputType = {
    id: string | null
    message: string | null
    createdAt: Date | null
    sentById: string | null
  }

  export type BroadcastMessageCountAggregateOutputType = {
    id: number
    message: number
    createdAt: number
    sentById: number
    _all: number
  }


  export type BroadcastMessageMinAggregateInputType = {
    id?: true
    message?: true
    createdAt?: true
    sentById?: true
  }

  export type BroadcastMessageMaxAggregateInputType = {
    id?: true
    message?: true
    createdAt?: true
    sentById?: true
  }

  export type BroadcastMessageCountAggregateInputType = {
    id?: true
    message?: true
    createdAt?: true
    sentById?: true
    _all?: true
  }

  export type BroadcastMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BroadcastMessage to aggregate.
     */
    where?: BroadcastMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BroadcastMessages to fetch.
     */
    orderBy?: BroadcastMessageOrderByWithRelationInput | BroadcastMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BroadcastMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BroadcastMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BroadcastMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BroadcastMessages
    **/
    _count?: true | BroadcastMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BroadcastMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BroadcastMessageMaxAggregateInputType
  }

  export type GetBroadcastMessageAggregateType<T extends BroadcastMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateBroadcastMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBroadcastMessage[P]>
      : GetScalarType<T[P], AggregateBroadcastMessage[P]>
  }




  export type BroadcastMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BroadcastMessageWhereInput
    orderBy?: BroadcastMessageOrderByWithAggregationInput | BroadcastMessageOrderByWithAggregationInput[]
    by: BroadcastMessageScalarFieldEnum[] | BroadcastMessageScalarFieldEnum
    having?: BroadcastMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BroadcastMessageCountAggregateInputType | true
    _min?: BroadcastMessageMinAggregateInputType
    _max?: BroadcastMessageMaxAggregateInputType
  }

  export type BroadcastMessageGroupByOutputType = {
    id: string
    message: string
    createdAt: Date
    sentById: string
    _count: BroadcastMessageCountAggregateOutputType | null
    _min: BroadcastMessageMinAggregateOutputType | null
    _max: BroadcastMessageMaxAggregateOutputType | null
  }

  type GetBroadcastMessageGroupByPayload<T extends BroadcastMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BroadcastMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BroadcastMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BroadcastMessageGroupByOutputType[P]>
            : GetScalarType<T[P], BroadcastMessageGroupByOutputType[P]>
        }
      >
    >


  export type BroadcastMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    createdAt?: boolean
    sentById?: boolean
    sentBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["broadcastMessage"]>

  export type BroadcastMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    createdAt?: boolean
    sentById?: boolean
    sentBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["broadcastMessage"]>

  export type BroadcastMessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    createdAt?: boolean
    sentById?: boolean
    sentBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["broadcastMessage"]>

  export type BroadcastMessageSelectScalar = {
    id?: boolean
    message?: boolean
    createdAt?: boolean
    sentById?: boolean
  }

  export type BroadcastMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "message" | "createdAt" | "sentById", ExtArgs["result"]["broadcastMessage"]>
  export type BroadcastMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sentBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BroadcastMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sentBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BroadcastMessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sentBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BroadcastMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BroadcastMessage"
    objects: {
      sentBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      message: string
      createdAt: Date
      sentById: string
    }, ExtArgs["result"]["broadcastMessage"]>
    composites: {}
  }

  type BroadcastMessageGetPayload<S extends boolean | null | undefined | BroadcastMessageDefaultArgs> = $Result.GetResult<Prisma.$BroadcastMessagePayload, S>

  type BroadcastMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BroadcastMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BroadcastMessageCountAggregateInputType | true
    }

  export interface BroadcastMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BroadcastMessage'], meta: { name: 'BroadcastMessage' } }
    /**
     * Find zero or one BroadcastMessage that matches the filter.
     * @param {BroadcastMessageFindUniqueArgs} args - Arguments to find a BroadcastMessage
     * @example
     * // Get one BroadcastMessage
     * const broadcastMessage = await prisma.broadcastMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BroadcastMessageFindUniqueArgs>(args: SelectSubset<T, BroadcastMessageFindUniqueArgs<ExtArgs>>): Prisma__BroadcastMessageClient<$Result.GetResult<Prisma.$BroadcastMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BroadcastMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BroadcastMessageFindUniqueOrThrowArgs} args - Arguments to find a BroadcastMessage
     * @example
     * // Get one BroadcastMessage
     * const broadcastMessage = await prisma.broadcastMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BroadcastMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, BroadcastMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BroadcastMessageClient<$Result.GetResult<Prisma.$BroadcastMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BroadcastMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BroadcastMessageFindFirstArgs} args - Arguments to find a BroadcastMessage
     * @example
     * // Get one BroadcastMessage
     * const broadcastMessage = await prisma.broadcastMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BroadcastMessageFindFirstArgs>(args?: SelectSubset<T, BroadcastMessageFindFirstArgs<ExtArgs>>): Prisma__BroadcastMessageClient<$Result.GetResult<Prisma.$BroadcastMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BroadcastMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BroadcastMessageFindFirstOrThrowArgs} args - Arguments to find a BroadcastMessage
     * @example
     * // Get one BroadcastMessage
     * const broadcastMessage = await prisma.broadcastMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BroadcastMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, BroadcastMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__BroadcastMessageClient<$Result.GetResult<Prisma.$BroadcastMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BroadcastMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BroadcastMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BroadcastMessages
     * const broadcastMessages = await prisma.broadcastMessage.findMany()
     * 
     * // Get first 10 BroadcastMessages
     * const broadcastMessages = await prisma.broadcastMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const broadcastMessageWithIdOnly = await prisma.broadcastMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BroadcastMessageFindManyArgs>(args?: SelectSubset<T, BroadcastMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BroadcastMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BroadcastMessage.
     * @param {BroadcastMessageCreateArgs} args - Arguments to create a BroadcastMessage.
     * @example
     * // Create one BroadcastMessage
     * const BroadcastMessage = await prisma.broadcastMessage.create({
     *   data: {
     *     // ... data to create a BroadcastMessage
     *   }
     * })
     * 
     */
    create<T extends BroadcastMessageCreateArgs>(args: SelectSubset<T, BroadcastMessageCreateArgs<ExtArgs>>): Prisma__BroadcastMessageClient<$Result.GetResult<Prisma.$BroadcastMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BroadcastMessages.
     * @param {BroadcastMessageCreateManyArgs} args - Arguments to create many BroadcastMessages.
     * @example
     * // Create many BroadcastMessages
     * const broadcastMessage = await prisma.broadcastMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BroadcastMessageCreateManyArgs>(args?: SelectSubset<T, BroadcastMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BroadcastMessages and returns the data saved in the database.
     * @param {BroadcastMessageCreateManyAndReturnArgs} args - Arguments to create many BroadcastMessages.
     * @example
     * // Create many BroadcastMessages
     * const broadcastMessage = await prisma.broadcastMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BroadcastMessages and only return the `id`
     * const broadcastMessageWithIdOnly = await prisma.broadcastMessage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BroadcastMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, BroadcastMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BroadcastMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BroadcastMessage.
     * @param {BroadcastMessageDeleteArgs} args - Arguments to delete one BroadcastMessage.
     * @example
     * // Delete one BroadcastMessage
     * const BroadcastMessage = await prisma.broadcastMessage.delete({
     *   where: {
     *     // ... filter to delete one BroadcastMessage
     *   }
     * })
     * 
     */
    delete<T extends BroadcastMessageDeleteArgs>(args: SelectSubset<T, BroadcastMessageDeleteArgs<ExtArgs>>): Prisma__BroadcastMessageClient<$Result.GetResult<Prisma.$BroadcastMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BroadcastMessage.
     * @param {BroadcastMessageUpdateArgs} args - Arguments to update one BroadcastMessage.
     * @example
     * // Update one BroadcastMessage
     * const broadcastMessage = await prisma.broadcastMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BroadcastMessageUpdateArgs>(args: SelectSubset<T, BroadcastMessageUpdateArgs<ExtArgs>>): Prisma__BroadcastMessageClient<$Result.GetResult<Prisma.$BroadcastMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BroadcastMessages.
     * @param {BroadcastMessageDeleteManyArgs} args - Arguments to filter BroadcastMessages to delete.
     * @example
     * // Delete a few BroadcastMessages
     * const { count } = await prisma.broadcastMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BroadcastMessageDeleteManyArgs>(args?: SelectSubset<T, BroadcastMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BroadcastMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BroadcastMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BroadcastMessages
     * const broadcastMessage = await prisma.broadcastMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BroadcastMessageUpdateManyArgs>(args: SelectSubset<T, BroadcastMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BroadcastMessages and returns the data updated in the database.
     * @param {BroadcastMessageUpdateManyAndReturnArgs} args - Arguments to update many BroadcastMessages.
     * @example
     * // Update many BroadcastMessages
     * const broadcastMessage = await prisma.broadcastMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BroadcastMessages and only return the `id`
     * const broadcastMessageWithIdOnly = await prisma.broadcastMessage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BroadcastMessageUpdateManyAndReturnArgs>(args: SelectSubset<T, BroadcastMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BroadcastMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BroadcastMessage.
     * @param {BroadcastMessageUpsertArgs} args - Arguments to update or create a BroadcastMessage.
     * @example
     * // Update or create a BroadcastMessage
     * const broadcastMessage = await prisma.broadcastMessage.upsert({
     *   create: {
     *     // ... data to create a BroadcastMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BroadcastMessage we want to update
     *   }
     * })
     */
    upsert<T extends BroadcastMessageUpsertArgs>(args: SelectSubset<T, BroadcastMessageUpsertArgs<ExtArgs>>): Prisma__BroadcastMessageClient<$Result.GetResult<Prisma.$BroadcastMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BroadcastMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BroadcastMessageCountArgs} args - Arguments to filter BroadcastMessages to count.
     * @example
     * // Count the number of BroadcastMessages
     * const count = await prisma.broadcastMessage.count({
     *   where: {
     *     // ... the filter for the BroadcastMessages we want to count
     *   }
     * })
    **/
    count<T extends BroadcastMessageCountArgs>(
      args?: Subset<T, BroadcastMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BroadcastMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BroadcastMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BroadcastMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BroadcastMessageAggregateArgs>(args: Subset<T, BroadcastMessageAggregateArgs>): Prisma.PrismaPromise<GetBroadcastMessageAggregateType<T>>

    /**
     * Group by BroadcastMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BroadcastMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BroadcastMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BroadcastMessageGroupByArgs['orderBy'] }
        : { orderBy?: BroadcastMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BroadcastMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBroadcastMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BroadcastMessage model
   */
  readonly fields: BroadcastMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BroadcastMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BroadcastMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sentBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BroadcastMessage model
   */
  interface BroadcastMessageFieldRefs {
    readonly id: FieldRef<"BroadcastMessage", 'String'>
    readonly message: FieldRef<"BroadcastMessage", 'String'>
    readonly createdAt: FieldRef<"BroadcastMessage", 'DateTime'>
    readonly sentById: FieldRef<"BroadcastMessage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BroadcastMessage findUnique
   */
  export type BroadcastMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BroadcastMessage
     */
    select?: BroadcastMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BroadcastMessage
     */
    omit?: BroadcastMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastMessageInclude<ExtArgs> | null
    /**
     * Filter, which BroadcastMessage to fetch.
     */
    where: BroadcastMessageWhereUniqueInput
  }

  /**
   * BroadcastMessage findUniqueOrThrow
   */
  export type BroadcastMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BroadcastMessage
     */
    select?: BroadcastMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BroadcastMessage
     */
    omit?: BroadcastMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastMessageInclude<ExtArgs> | null
    /**
     * Filter, which BroadcastMessage to fetch.
     */
    where: BroadcastMessageWhereUniqueInput
  }

  /**
   * BroadcastMessage findFirst
   */
  export type BroadcastMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BroadcastMessage
     */
    select?: BroadcastMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BroadcastMessage
     */
    omit?: BroadcastMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastMessageInclude<ExtArgs> | null
    /**
     * Filter, which BroadcastMessage to fetch.
     */
    where?: BroadcastMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BroadcastMessages to fetch.
     */
    orderBy?: BroadcastMessageOrderByWithRelationInput | BroadcastMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BroadcastMessages.
     */
    cursor?: BroadcastMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BroadcastMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BroadcastMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BroadcastMessages.
     */
    distinct?: BroadcastMessageScalarFieldEnum | BroadcastMessageScalarFieldEnum[]
  }

  /**
   * BroadcastMessage findFirstOrThrow
   */
  export type BroadcastMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BroadcastMessage
     */
    select?: BroadcastMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BroadcastMessage
     */
    omit?: BroadcastMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastMessageInclude<ExtArgs> | null
    /**
     * Filter, which BroadcastMessage to fetch.
     */
    where?: BroadcastMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BroadcastMessages to fetch.
     */
    orderBy?: BroadcastMessageOrderByWithRelationInput | BroadcastMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BroadcastMessages.
     */
    cursor?: BroadcastMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BroadcastMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BroadcastMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BroadcastMessages.
     */
    distinct?: BroadcastMessageScalarFieldEnum | BroadcastMessageScalarFieldEnum[]
  }

  /**
   * BroadcastMessage findMany
   */
  export type BroadcastMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BroadcastMessage
     */
    select?: BroadcastMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BroadcastMessage
     */
    omit?: BroadcastMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastMessageInclude<ExtArgs> | null
    /**
     * Filter, which BroadcastMessages to fetch.
     */
    where?: BroadcastMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BroadcastMessages to fetch.
     */
    orderBy?: BroadcastMessageOrderByWithRelationInput | BroadcastMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BroadcastMessages.
     */
    cursor?: BroadcastMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BroadcastMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BroadcastMessages.
     */
    skip?: number
    distinct?: BroadcastMessageScalarFieldEnum | BroadcastMessageScalarFieldEnum[]
  }

  /**
   * BroadcastMessage create
   */
  export type BroadcastMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BroadcastMessage
     */
    select?: BroadcastMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BroadcastMessage
     */
    omit?: BroadcastMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a BroadcastMessage.
     */
    data: XOR<BroadcastMessageCreateInput, BroadcastMessageUncheckedCreateInput>
  }

  /**
   * BroadcastMessage createMany
   */
  export type BroadcastMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BroadcastMessages.
     */
    data: BroadcastMessageCreateManyInput | BroadcastMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BroadcastMessage createManyAndReturn
   */
  export type BroadcastMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BroadcastMessage
     */
    select?: BroadcastMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BroadcastMessage
     */
    omit?: BroadcastMessageOmit<ExtArgs> | null
    /**
     * The data used to create many BroadcastMessages.
     */
    data: BroadcastMessageCreateManyInput | BroadcastMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BroadcastMessage update
   */
  export type BroadcastMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BroadcastMessage
     */
    select?: BroadcastMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BroadcastMessage
     */
    omit?: BroadcastMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a BroadcastMessage.
     */
    data: XOR<BroadcastMessageUpdateInput, BroadcastMessageUncheckedUpdateInput>
    /**
     * Choose, which BroadcastMessage to update.
     */
    where: BroadcastMessageWhereUniqueInput
  }

  /**
   * BroadcastMessage updateMany
   */
  export type BroadcastMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BroadcastMessages.
     */
    data: XOR<BroadcastMessageUpdateManyMutationInput, BroadcastMessageUncheckedUpdateManyInput>
    /**
     * Filter which BroadcastMessages to update
     */
    where?: BroadcastMessageWhereInput
    /**
     * Limit how many BroadcastMessages to update.
     */
    limit?: number
  }

  /**
   * BroadcastMessage updateManyAndReturn
   */
  export type BroadcastMessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BroadcastMessage
     */
    select?: BroadcastMessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BroadcastMessage
     */
    omit?: BroadcastMessageOmit<ExtArgs> | null
    /**
     * The data used to update BroadcastMessages.
     */
    data: XOR<BroadcastMessageUpdateManyMutationInput, BroadcastMessageUncheckedUpdateManyInput>
    /**
     * Filter which BroadcastMessages to update
     */
    where?: BroadcastMessageWhereInput
    /**
     * Limit how many BroadcastMessages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastMessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BroadcastMessage upsert
   */
  export type BroadcastMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BroadcastMessage
     */
    select?: BroadcastMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BroadcastMessage
     */
    omit?: BroadcastMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the BroadcastMessage to update in case it exists.
     */
    where: BroadcastMessageWhereUniqueInput
    /**
     * In case the BroadcastMessage found by the `where` argument doesn't exist, create a new BroadcastMessage with this data.
     */
    create: XOR<BroadcastMessageCreateInput, BroadcastMessageUncheckedCreateInput>
    /**
     * In case the BroadcastMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BroadcastMessageUpdateInput, BroadcastMessageUncheckedUpdateInput>
  }

  /**
   * BroadcastMessage delete
   */
  export type BroadcastMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BroadcastMessage
     */
    select?: BroadcastMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BroadcastMessage
     */
    omit?: BroadcastMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastMessageInclude<ExtArgs> | null
    /**
     * Filter which BroadcastMessage to delete.
     */
    where: BroadcastMessageWhereUniqueInput
  }

  /**
   * BroadcastMessage deleteMany
   */
  export type BroadcastMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BroadcastMessages to delete
     */
    where?: BroadcastMessageWhereInput
    /**
     * Limit how many BroadcastMessages to delete.
     */
    limit?: number
  }

  /**
   * BroadcastMessage without action
   */
  export type BroadcastMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BroadcastMessage
     */
    select?: BroadcastMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BroadcastMessage
     */
    omit?: BroadcastMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastMessageInclude<ExtArgs> | null
  }


  /**
   * Model AdminLog
   */

  export type AggregateAdminLog = {
    _count: AdminLogCountAggregateOutputType | null
    _min: AdminLogMinAggregateOutputType | null
    _max: AdminLogMaxAggregateOutputType | null
  }

  export type AdminLogMinAggregateOutputType = {
    id: string | null
    adminId: string | null
    action: string | null
    targetId: string | null
    createdAt: Date | null
  }

  export type AdminLogMaxAggregateOutputType = {
    id: string | null
    adminId: string | null
    action: string | null
    targetId: string | null
    createdAt: Date | null
  }

  export type AdminLogCountAggregateOutputType = {
    id: number
    adminId: number
    action: number
    targetId: number
    createdAt: number
    _all: number
  }


  export type AdminLogMinAggregateInputType = {
    id?: true
    adminId?: true
    action?: true
    targetId?: true
    createdAt?: true
  }

  export type AdminLogMaxAggregateInputType = {
    id?: true
    adminId?: true
    action?: true
    targetId?: true
    createdAt?: true
  }

  export type AdminLogCountAggregateInputType = {
    id?: true
    adminId?: true
    action?: true
    targetId?: true
    createdAt?: true
    _all?: true
  }

  export type AdminLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminLog to aggregate.
     */
    where?: AdminLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminLogs to fetch.
     */
    orderBy?: AdminLogOrderByWithRelationInput | AdminLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminLogs
    **/
    _count?: true | AdminLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminLogMaxAggregateInputType
  }

  export type GetAdminLogAggregateType<T extends AdminLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminLog[P]>
      : GetScalarType<T[P], AggregateAdminLog[P]>
  }




  export type AdminLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminLogWhereInput
    orderBy?: AdminLogOrderByWithAggregationInput | AdminLogOrderByWithAggregationInput[]
    by: AdminLogScalarFieldEnum[] | AdminLogScalarFieldEnum
    having?: AdminLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminLogCountAggregateInputType | true
    _min?: AdminLogMinAggregateInputType
    _max?: AdminLogMaxAggregateInputType
  }

  export type AdminLogGroupByOutputType = {
    id: string
    adminId: string
    action: string
    targetId: string | null
    createdAt: Date
    _count: AdminLogCountAggregateOutputType | null
    _min: AdminLogMinAggregateOutputType | null
    _max: AdminLogMaxAggregateOutputType | null
  }

  type GetAdminLogGroupByPayload<T extends AdminLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminLogGroupByOutputType[P]>
            : GetScalarType<T[P], AdminLogGroupByOutputType[P]>
        }
      >
    >


  export type AdminLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    action?: boolean
    targetId?: boolean
    createdAt?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminLog"]>

  export type AdminLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    action?: boolean
    targetId?: boolean
    createdAt?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminLog"]>

  export type AdminLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    action?: boolean
    targetId?: boolean
    createdAt?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminLog"]>

  export type AdminLogSelectScalar = {
    id?: boolean
    adminId?: boolean
    action?: boolean
    targetId?: boolean
    createdAt?: boolean
  }

  export type AdminLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "adminId" | "action" | "targetId" | "createdAt", ExtArgs["result"]["adminLog"]>
  export type AdminLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AdminLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AdminLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AdminLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminLog"
    objects: {
      admin: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      adminId: string
      action: string
      targetId: string | null
      createdAt: Date
    }, ExtArgs["result"]["adminLog"]>
    composites: {}
  }

  type AdminLogGetPayload<S extends boolean | null | undefined | AdminLogDefaultArgs> = $Result.GetResult<Prisma.$AdminLogPayload, S>

  type AdminLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminLogCountAggregateInputType | true
    }

  export interface AdminLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminLog'], meta: { name: 'AdminLog' } }
    /**
     * Find zero or one AdminLog that matches the filter.
     * @param {AdminLogFindUniqueArgs} args - Arguments to find a AdminLog
     * @example
     * // Get one AdminLog
     * const adminLog = await prisma.adminLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminLogFindUniqueArgs>(args: SelectSubset<T, AdminLogFindUniqueArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AdminLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminLogFindUniqueOrThrowArgs} args - Arguments to find a AdminLog
     * @example
     * // Get one AdminLog
     * const adminLog = await prisma.adminLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogFindFirstArgs} args - Arguments to find a AdminLog
     * @example
     * // Get one AdminLog
     * const adminLog = await prisma.adminLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminLogFindFirstArgs>(args?: SelectSubset<T, AdminLogFindFirstArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogFindFirstOrThrowArgs} args - Arguments to find a AdminLog
     * @example
     * // Get one AdminLog
     * const adminLog = await prisma.adminLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AdminLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminLogs
     * const adminLogs = await prisma.adminLog.findMany()
     * 
     * // Get first 10 AdminLogs
     * const adminLogs = await prisma.adminLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminLogWithIdOnly = await prisma.adminLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminLogFindManyArgs>(args?: SelectSubset<T, AdminLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AdminLog.
     * @param {AdminLogCreateArgs} args - Arguments to create a AdminLog.
     * @example
     * // Create one AdminLog
     * const AdminLog = await prisma.adminLog.create({
     *   data: {
     *     // ... data to create a AdminLog
     *   }
     * })
     * 
     */
    create<T extends AdminLogCreateArgs>(args: SelectSubset<T, AdminLogCreateArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AdminLogs.
     * @param {AdminLogCreateManyArgs} args - Arguments to create many AdminLogs.
     * @example
     * // Create many AdminLogs
     * const adminLog = await prisma.adminLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminLogCreateManyArgs>(args?: SelectSubset<T, AdminLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminLogs and returns the data saved in the database.
     * @param {AdminLogCreateManyAndReturnArgs} args - Arguments to create many AdminLogs.
     * @example
     * // Create many AdminLogs
     * const adminLog = await prisma.adminLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminLogs and only return the `id`
     * const adminLogWithIdOnly = await prisma.adminLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AdminLog.
     * @param {AdminLogDeleteArgs} args - Arguments to delete one AdminLog.
     * @example
     * // Delete one AdminLog
     * const AdminLog = await prisma.adminLog.delete({
     *   where: {
     *     // ... filter to delete one AdminLog
     *   }
     * })
     * 
     */
    delete<T extends AdminLogDeleteArgs>(args: SelectSubset<T, AdminLogDeleteArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AdminLog.
     * @param {AdminLogUpdateArgs} args - Arguments to update one AdminLog.
     * @example
     * // Update one AdminLog
     * const adminLog = await prisma.adminLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminLogUpdateArgs>(args: SelectSubset<T, AdminLogUpdateArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AdminLogs.
     * @param {AdminLogDeleteManyArgs} args - Arguments to filter AdminLogs to delete.
     * @example
     * // Delete a few AdminLogs
     * const { count } = await prisma.adminLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminLogDeleteManyArgs>(args?: SelectSubset<T, AdminLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminLogs
     * const adminLog = await prisma.adminLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminLogUpdateManyArgs>(args: SelectSubset<T, AdminLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminLogs and returns the data updated in the database.
     * @param {AdminLogUpdateManyAndReturnArgs} args - Arguments to update many AdminLogs.
     * @example
     * // Update many AdminLogs
     * const adminLog = await prisma.adminLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AdminLogs and only return the `id`
     * const adminLogWithIdOnly = await prisma.adminLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AdminLog.
     * @param {AdminLogUpsertArgs} args - Arguments to update or create a AdminLog.
     * @example
     * // Update or create a AdminLog
     * const adminLog = await prisma.adminLog.upsert({
     *   create: {
     *     // ... data to create a AdminLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminLog we want to update
     *   }
     * })
     */
    upsert<T extends AdminLogUpsertArgs>(args: SelectSubset<T, AdminLogUpsertArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AdminLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogCountArgs} args - Arguments to filter AdminLogs to count.
     * @example
     * // Count the number of AdminLogs
     * const count = await prisma.adminLog.count({
     *   where: {
     *     // ... the filter for the AdminLogs we want to count
     *   }
     * })
    **/
    count<T extends AdminLogCountArgs>(
      args?: Subset<T, AdminLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminLogAggregateArgs>(args: Subset<T, AdminLogAggregateArgs>): Prisma.PrismaPromise<GetAdminLogAggregateType<T>>

    /**
     * Group by AdminLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminLogGroupByArgs['orderBy'] }
        : { orderBy?: AdminLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminLog model
   */
  readonly fields: AdminLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminLog model
   */
  interface AdminLogFieldRefs {
    readonly id: FieldRef<"AdminLog", 'String'>
    readonly adminId: FieldRef<"AdminLog", 'String'>
    readonly action: FieldRef<"AdminLog", 'String'>
    readonly targetId: FieldRef<"AdminLog", 'String'>
    readonly createdAt: FieldRef<"AdminLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AdminLog findUnique
   */
  export type AdminLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminLog to fetch.
     */
    where: AdminLogWhereUniqueInput
  }

  /**
   * AdminLog findUniqueOrThrow
   */
  export type AdminLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminLog to fetch.
     */
    where: AdminLogWhereUniqueInput
  }

  /**
   * AdminLog findFirst
   */
  export type AdminLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminLog to fetch.
     */
    where?: AdminLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminLogs to fetch.
     */
    orderBy?: AdminLogOrderByWithRelationInput | AdminLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminLogs.
     */
    cursor?: AdminLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminLogs.
     */
    distinct?: AdminLogScalarFieldEnum | AdminLogScalarFieldEnum[]
  }

  /**
   * AdminLog findFirstOrThrow
   */
  export type AdminLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminLog to fetch.
     */
    where?: AdminLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminLogs to fetch.
     */
    orderBy?: AdminLogOrderByWithRelationInput | AdminLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminLogs.
     */
    cursor?: AdminLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminLogs.
     */
    distinct?: AdminLogScalarFieldEnum | AdminLogScalarFieldEnum[]
  }

  /**
   * AdminLog findMany
   */
  export type AdminLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminLogs to fetch.
     */
    where?: AdminLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminLogs to fetch.
     */
    orderBy?: AdminLogOrderByWithRelationInput | AdminLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminLogs.
     */
    cursor?: AdminLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminLogs.
     */
    skip?: number
    distinct?: AdminLogScalarFieldEnum | AdminLogScalarFieldEnum[]
  }

  /**
   * AdminLog create
   */
  export type AdminLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AdminLog.
     */
    data: XOR<AdminLogCreateInput, AdminLogUncheckedCreateInput>
  }

  /**
   * AdminLog createMany
   */
  export type AdminLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminLogs.
     */
    data: AdminLogCreateManyInput | AdminLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminLog createManyAndReturn
   */
  export type AdminLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * The data used to create many AdminLogs.
     */
    data: AdminLogCreateManyInput | AdminLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminLog update
   */
  export type AdminLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AdminLog.
     */
    data: XOR<AdminLogUpdateInput, AdminLogUncheckedUpdateInput>
    /**
     * Choose, which AdminLog to update.
     */
    where: AdminLogWhereUniqueInput
  }

  /**
   * AdminLog updateMany
   */
  export type AdminLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminLogs.
     */
    data: XOR<AdminLogUpdateManyMutationInput, AdminLogUncheckedUpdateManyInput>
    /**
     * Filter which AdminLogs to update
     */
    where?: AdminLogWhereInput
    /**
     * Limit how many AdminLogs to update.
     */
    limit?: number
  }

  /**
   * AdminLog updateManyAndReturn
   */
  export type AdminLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * The data used to update AdminLogs.
     */
    data: XOR<AdminLogUpdateManyMutationInput, AdminLogUncheckedUpdateManyInput>
    /**
     * Filter which AdminLogs to update
     */
    where?: AdminLogWhereInput
    /**
     * Limit how many AdminLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminLog upsert
   */
  export type AdminLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AdminLog to update in case it exists.
     */
    where: AdminLogWhereUniqueInput
    /**
     * In case the AdminLog found by the `where` argument doesn't exist, create a new AdminLog with this data.
     */
    create: XOR<AdminLogCreateInput, AdminLogUncheckedCreateInput>
    /**
     * In case the AdminLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminLogUpdateInput, AdminLogUncheckedUpdateInput>
  }

  /**
   * AdminLog delete
   */
  export type AdminLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    /**
     * Filter which AdminLog to delete.
     */
    where: AdminLogWhereUniqueInput
  }

  /**
   * AdminLog deleteMany
   */
  export type AdminLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminLogs to delete
     */
    where?: AdminLogWhereInput
    /**
     * Limit how many AdminLogs to delete.
     */
    limit?: number
  }

  /**
   * AdminLog without action
   */
  export type AdminLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    passwordHash: 'passwordHash',
    role: 'role',
    experience: 'experience',
    projects: 'projects',
    profilePhoto: 'profilePhoto',
    location: 'location',
    availability: 'availability',
    isPublic: 'isPublic',
    banned: 'banned',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SkillScalarFieldEnum: {
    id: 'id',
    name: 'name',
    status: 'status'
  };

  export type SkillScalarFieldEnum = (typeof SkillScalarFieldEnum)[keyof typeof SkillScalarFieldEnum]


  export const UserSkillsOfferedScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    skillId: 'skillId'
  };

  export type UserSkillsOfferedScalarFieldEnum = (typeof UserSkillsOfferedScalarFieldEnum)[keyof typeof UserSkillsOfferedScalarFieldEnum]


  export const UserSkillsWantedScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    skillId: 'skillId'
  };

  export type UserSkillsWantedScalarFieldEnum = (typeof UserSkillsWantedScalarFieldEnum)[keyof typeof UserSkillsWantedScalarFieldEnum]


  export const SwapRequestScalarFieldEnum: {
    id: 'id',
    fromUserId: 'fromUserId',
    toUserId: 'toUserId',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SwapRequestScalarFieldEnum = (typeof SwapRequestScalarFieldEnum)[keyof typeof SwapRequestScalarFieldEnum]


  export const RatingScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    givenById: 'givenById',
    role: 'role',
    stars: 'stars',
    swapId: 'swapId'
  };

  export type RatingScalarFieldEnum = (typeof RatingScalarFieldEnum)[keyof typeof RatingScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    givenById: 'givenById',
    role: 'role',
    comment: 'comment',
    swapId: 'swapId',
    createdAt: 'createdAt'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const BroadcastMessageScalarFieldEnum: {
    id: 'id',
    message: 'message',
    createdAt: 'createdAt',
    sentById: 'sentById'
  };

  export type BroadcastMessageScalarFieldEnum = (typeof BroadcastMessageScalarFieldEnum)[keyof typeof BroadcastMessageScalarFieldEnum]


  export const AdminLogScalarFieldEnum: {
    id: 'id',
    adminId: 'adminId',
    action: 'action',
    targetId: 'targetId',
    createdAt: 'createdAt'
  };

  export type AdminLogScalarFieldEnum = (typeof AdminLogScalarFieldEnum)[keyof typeof AdminLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    experience?: StringNullableFilter<"User"> | string | null
    projects?: StringNullableFilter<"User"> | string | null
    profilePhoto?: StringNullableFilter<"User"> | string | null
    location?: StringNullableFilter<"User"> | string | null
    availability?: StringNullableFilter<"User"> | string | null
    isPublic?: BoolFilter<"User"> | boolean
    banned?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    skillsOffered?: UserSkillsOfferedListRelationFilter
    skillsWanted?: UserSkillsWantedListRelationFilter
    ratings?: RatingListRelationFilter
    reviews?: ReviewListRelationFilter
    sentSwapRequests?: SwapRequestListRelationFilter
    receivedSwapRequests?: SwapRequestListRelationFilter
    givenRatings?: RatingListRelationFilter
    givenReviews?: ReviewListRelationFilter
    broadcastMessages?: BroadcastMessageListRelationFilter
    adminLogs?: AdminLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    experience?: SortOrderInput | SortOrder
    projects?: SortOrderInput | SortOrder
    profilePhoto?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    availability?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    banned?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    skillsOffered?: UserSkillsOfferedOrderByRelationAggregateInput
    skillsWanted?: UserSkillsWantedOrderByRelationAggregateInput
    ratings?: RatingOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
    sentSwapRequests?: SwapRequestOrderByRelationAggregateInput
    receivedSwapRequests?: SwapRequestOrderByRelationAggregateInput
    givenRatings?: RatingOrderByRelationAggregateInput
    givenReviews?: ReviewOrderByRelationAggregateInput
    broadcastMessages?: BroadcastMessageOrderByRelationAggregateInput
    adminLogs?: AdminLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    experience?: StringNullableFilter<"User"> | string | null
    projects?: StringNullableFilter<"User"> | string | null
    profilePhoto?: StringNullableFilter<"User"> | string | null
    location?: StringNullableFilter<"User"> | string | null
    availability?: StringNullableFilter<"User"> | string | null
    isPublic?: BoolFilter<"User"> | boolean
    banned?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    skillsOffered?: UserSkillsOfferedListRelationFilter
    skillsWanted?: UserSkillsWantedListRelationFilter
    ratings?: RatingListRelationFilter
    reviews?: ReviewListRelationFilter
    sentSwapRequests?: SwapRequestListRelationFilter
    receivedSwapRequests?: SwapRequestListRelationFilter
    givenRatings?: RatingListRelationFilter
    givenReviews?: ReviewListRelationFilter
    broadcastMessages?: BroadcastMessageListRelationFilter
    adminLogs?: AdminLogListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    experience?: SortOrderInput | SortOrder
    projects?: SortOrderInput | SortOrder
    profilePhoto?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    availability?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    banned?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    experience?: StringNullableWithAggregatesFilter<"User"> | string | null
    projects?: StringNullableWithAggregatesFilter<"User"> | string | null
    profilePhoto?: StringNullableWithAggregatesFilter<"User"> | string | null
    location?: StringNullableWithAggregatesFilter<"User"> | string | null
    availability?: StringNullableWithAggregatesFilter<"User"> | string | null
    isPublic?: BoolWithAggregatesFilter<"User"> | boolean
    banned?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type SkillWhereInput = {
    AND?: SkillWhereInput | SkillWhereInput[]
    OR?: SkillWhereInput[]
    NOT?: SkillWhereInput | SkillWhereInput[]
    id?: StringFilter<"Skill"> | string
    name?: StringFilter<"Skill"> | string
    status?: StringFilter<"Skill"> | string
    offeredBy?: UserSkillsOfferedListRelationFilter
    wantedBy?: UserSkillsWantedListRelationFilter
  }

  export type SkillOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    offeredBy?: UserSkillsOfferedOrderByRelationAggregateInput
    wantedBy?: UserSkillsWantedOrderByRelationAggregateInput
  }

  export type SkillWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: SkillWhereInput | SkillWhereInput[]
    OR?: SkillWhereInput[]
    NOT?: SkillWhereInput | SkillWhereInput[]
    status?: StringFilter<"Skill"> | string
    offeredBy?: UserSkillsOfferedListRelationFilter
    wantedBy?: UserSkillsWantedListRelationFilter
  }, "id" | "name">

  export type SkillOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    _count?: SkillCountOrderByAggregateInput
    _max?: SkillMaxOrderByAggregateInput
    _min?: SkillMinOrderByAggregateInput
  }

  export type SkillScalarWhereWithAggregatesInput = {
    AND?: SkillScalarWhereWithAggregatesInput | SkillScalarWhereWithAggregatesInput[]
    OR?: SkillScalarWhereWithAggregatesInput[]
    NOT?: SkillScalarWhereWithAggregatesInput | SkillScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Skill"> | string
    name?: StringWithAggregatesFilter<"Skill"> | string
    status?: StringWithAggregatesFilter<"Skill"> | string
  }

  export type UserSkillsOfferedWhereInput = {
    AND?: UserSkillsOfferedWhereInput | UserSkillsOfferedWhereInput[]
    OR?: UserSkillsOfferedWhereInput[]
    NOT?: UserSkillsOfferedWhereInput | UserSkillsOfferedWhereInput[]
    id?: StringFilter<"UserSkillsOffered"> | string
    userId?: StringFilter<"UserSkillsOffered"> | string
    skillId?: StringFilter<"UserSkillsOffered"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    skill?: XOR<SkillScalarRelationFilter, SkillWhereInput>
  }

  export type UserSkillsOfferedOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    skillId?: SortOrder
    user?: UserOrderByWithRelationInput
    skill?: SkillOrderByWithRelationInput
  }

  export type UserSkillsOfferedWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserSkillsOfferedWhereInput | UserSkillsOfferedWhereInput[]
    OR?: UserSkillsOfferedWhereInput[]
    NOT?: UserSkillsOfferedWhereInput | UserSkillsOfferedWhereInput[]
    userId?: StringFilter<"UserSkillsOffered"> | string
    skillId?: StringFilter<"UserSkillsOffered"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    skill?: XOR<SkillScalarRelationFilter, SkillWhereInput>
  }, "id">

  export type UserSkillsOfferedOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    skillId?: SortOrder
    _count?: UserSkillsOfferedCountOrderByAggregateInput
    _max?: UserSkillsOfferedMaxOrderByAggregateInput
    _min?: UserSkillsOfferedMinOrderByAggregateInput
  }

  export type UserSkillsOfferedScalarWhereWithAggregatesInput = {
    AND?: UserSkillsOfferedScalarWhereWithAggregatesInput | UserSkillsOfferedScalarWhereWithAggregatesInput[]
    OR?: UserSkillsOfferedScalarWhereWithAggregatesInput[]
    NOT?: UserSkillsOfferedScalarWhereWithAggregatesInput | UserSkillsOfferedScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSkillsOffered"> | string
    userId?: StringWithAggregatesFilter<"UserSkillsOffered"> | string
    skillId?: StringWithAggregatesFilter<"UserSkillsOffered"> | string
  }

  export type UserSkillsWantedWhereInput = {
    AND?: UserSkillsWantedWhereInput | UserSkillsWantedWhereInput[]
    OR?: UserSkillsWantedWhereInput[]
    NOT?: UserSkillsWantedWhereInput | UserSkillsWantedWhereInput[]
    id?: StringFilter<"UserSkillsWanted"> | string
    userId?: StringFilter<"UserSkillsWanted"> | string
    skillId?: StringFilter<"UserSkillsWanted"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    skill?: XOR<SkillScalarRelationFilter, SkillWhereInput>
  }

  export type UserSkillsWantedOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    skillId?: SortOrder
    user?: UserOrderByWithRelationInput
    skill?: SkillOrderByWithRelationInput
  }

  export type UserSkillsWantedWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserSkillsWantedWhereInput | UserSkillsWantedWhereInput[]
    OR?: UserSkillsWantedWhereInput[]
    NOT?: UserSkillsWantedWhereInput | UserSkillsWantedWhereInput[]
    userId?: StringFilter<"UserSkillsWanted"> | string
    skillId?: StringFilter<"UserSkillsWanted"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    skill?: XOR<SkillScalarRelationFilter, SkillWhereInput>
  }, "id">

  export type UserSkillsWantedOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    skillId?: SortOrder
    _count?: UserSkillsWantedCountOrderByAggregateInput
    _max?: UserSkillsWantedMaxOrderByAggregateInput
    _min?: UserSkillsWantedMinOrderByAggregateInput
  }

  export type UserSkillsWantedScalarWhereWithAggregatesInput = {
    AND?: UserSkillsWantedScalarWhereWithAggregatesInput | UserSkillsWantedScalarWhereWithAggregatesInput[]
    OR?: UserSkillsWantedScalarWhereWithAggregatesInput[]
    NOT?: UserSkillsWantedScalarWhereWithAggregatesInput | UserSkillsWantedScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSkillsWanted"> | string
    userId?: StringWithAggregatesFilter<"UserSkillsWanted"> | string
    skillId?: StringWithAggregatesFilter<"UserSkillsWanted"> | string
  }

  export type SwapRequestWhereInput = {
    AND?: SwapRequestWhereInput | SwapRequestWhereInput[]
    OR?: SwapRequestWhereInput[]
    NOT?: SwapRequestWhereInput | SwapRequestWhereInput[]
    id?: StringFilter<"SwapRequest"> | string
    fromUserId?: StringFilter<"SwapRequest"> | string
    toUserId?: StringFilter<"SwapRequest"> | string
    status?: StringFilter<"SwapRequest"> | string
    createdAt?: DateTimeFilter<"SwapRequest"> | Date | string
    updatedAt?: DateTimeFilter<"SwapRequest"> | Date | string
    fromUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    toUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    ratings?: RatingListRelationFilter
    reviews?: ReviewListRelationFilter
  }

  export type SwapRequestOrderByWithRelationInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fromUser?: UserOrderByWithRelationInput
    toUser?: UserOrderByWithRelationInput
    ratings?: RatingOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
  }

  export type SwapRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SwapRequestWhereInput | SwapRequestWhereInput[]
    OR?: SwapRequestWhereInput[]
    NOT?: SwapRequestWhereInput | SwapRequestWhereInput[]
    fromUserId?: StringFilter<"SwapRequest"> | string
    toUserId?: StringFilter<"SwapRequest"> | string
    status?: StringFilter<"SwapRequest"> | string
    createdAt?: DateTimeFilter<"SwapRequest"> | Date | string
    updatedAt?: DateTimeFilter<"SwapRequest"> | Date | string
    fromUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    toUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    ratings?: RatingListRelationFilter
    reviews?: ReviewListRelationFilter
  }, "id">

  export type SwapRequestOrderByWithAggregationInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SwapRequestCountOrderByAggregateInput
    _max?: SwapRequestMaxOrderByAggregateInput
    _min?: SwapRequestMinOrderByAggregateInput
  }

  export type SwapRequestScalarWhereWithAggregatesInput = {
    AND?: SwapRequestScalarWhereWithAggregatesInput | SwapRequestScalarWhereWithAggregatesInput[]
    OR?: SwapRequestScalarWhereWithAggregatesInput[]
    NOT?: SwapRequestScalarWhereWithAggregatesInput | SwapRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SwapRequest"> | string
    fromUserId?: StringWithAggregatesFilter<"SwapRequest"> | string
    toUserId?: StringWithAggregatesFilter<"SwapRequest"> | string
    status?: StringWithAggregatesFilter<"SwapRequest"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SwapRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SwapRequest"> | Date | string
  }

  export type RatingWhereInput = {
    AND?: RatingWhereInput | RatingWhereInput[]
    OR?: RatingWhereInput[]
    NOT?: RatingWhereInput | RatingWhereInput[]
    id?: StringFilter<"Rating"> | string
    userId?: StringFilter<"Rating"> | string
    givenById?: StringFilter<"Rating"> | string
    role?: StringFilter<"Rating"> | string
    stars?: IntFilter<"Rating"> | number
    swapId?: StringNullableFilter<"Rating"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    givenBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    swap?: XOR<SwapRequestNullableScalarRelationFilter, SwapRequestWhereInput> | null
  }

  export type RatingOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    givenById?: SortOrder
    role?: SortOrder
    stars?: SortOrder
    swapId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    givenBy?: UserOrderByWithRelationInput
    swap?: SwapRequestOrderByWithRelationInput
  }

  export type RatingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RatingWhereInput | RatingWhereInput[]
    OR?: RatingWhereInput[]
    NOT?: RatingWhereInput | RatingWhereInput[]
    userId?: StringFilter<"Rating"> | string
    givenById?: StringFilter<"Rating"> | string
    role?: StringFilter<"Rating"> | string
    stars?: IntFilter<"Rating"> | number
    swapId?: StringNullableFilter<"Rating"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    givenBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    swap?: XOR<SwapRequestNullableScalarRelationFilter, SwapRequestWhereInput> | null
  }, "id">

  export type RatingOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    givenById?: SortOrder
    role?: SortOrder
    stars?: SortOrder
    swapId?: SortOrderInput | SortOrder
    _count?: RatingCountOrderByAggregateInput
    _avg?: RatingAvgOrderByAggregateInput
    _max?: RatingMaxOrderByAggregateInput
    _min?: RatingMinOrderByAggregateInput
    _sum?: RatingSumOrderByAggregateInput
  }

  export type RatingScalarWhereWithAggregatesInput = {
    AND?: RatingScalarWhereWithAggregatesInput | RatingScalarWhereWithAggregatesInput[]
    OR?: RatingScalarWhereWithAggregatesInput[]
    NOT?: RatingScalarWhereWithAggregatesInput | RatingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Rating"> | string
    userId?: StringWithAggregatesFilter<"Rating"> | string
    givenById?: StringWithAggregatesFilter<"Rating"> | string
    role?: StringWithAggregatesFilter<"Rating"> | string
    stars?: IntWithAggregatesFilter<"Rating"> | number
    swapId?: StringNullableWithAggregatesFilter<"Rating"> | string | null
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: StringFilter<"Review"> | string
    userId?: StringFilter<"Review"> | string
    givenById?: StringFilter<"Review"> | string
    role?: StringFilter<"Review"> | string
    comment?: StringFilter<"Review"> | string
    swapId?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    givenBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    swap?: XOR<SwapRequestNullableScalarRelationFilter, SwapRequestWhereInput> | null
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    givenById?: SortOrder
    role?: SortOrder
    comment?: SortOrder
    swapId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    givenBy?: UserOrderByWithRelationInput
    swap?: SwapRequestOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    userId?: StringFilter<"Review"> | string
    givenById?: StringFilter<"Review"> | string
    role?: StringFilter<"Review"> | string
    comment?: StringFilter<"Review"> | string
    swapId?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    givenBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    swap?: XOR<SwapRequestNullableScalarRelationFilter, SwapRequestWhereInput> | null
  }, "id">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    givenById?: SortOrder
    role?: SortOrder
    comment?: SortOrder
    swapId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Review"> | string
    userId?: StringWithAggregatesFilter<"Review"> | string
    givenById?: StringWithAggregatesFilter<"Review"> | string
    role?: StringWithAggregatesFilter<"Review"> | string
    comment?: StringWithAggregatesFilter<"Review"> | string
    swapId?: StringNullableWithAggregatesFilter<"Review"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
  }

  export type BroadcastMessageWhereInput = {
    AND?: BroadcastMessageWhereInput | BroadcastMessageWhereInput[]
    OR?: BroadcastMessageWhereInput[]
    NOT?: BroadcastMessageWhereInput | BroadcastMessageWhereInput[]
    id?: StringFilter<"BroadcastMessage"> | string
    message?: StringFilter<"BroadcastMessage"> | string
    createdAt?: DateTimeFilter<"BroadcastMessage"> | Date | string
    sentById?: StringFilter<"BroadcastMessage"> | string
    sentBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type BroadcastMessageOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    sentById?: SortOrder
    sentBy?: UserOrderByWithRelationInput
  }

  export type BroadcastMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BroadcastMessageWhereInput | BroadcastMessageWhereInput[]
    OR?: BroadcastMessageWhereInput[]
    NOT?: BroadcastMessageWhereInput | BroadcastMessageWhereInput[]
    message?: StringFilter<"BroadcastMessage"> | string
    createdAt?: DateTimeFilter<"BroadcastMessage"> | Date | string
    sentById?: StringFilter<"BroadcastMessage"> | string
    sentBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type BroadcastMessageOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    sentById?: SortOrder
    _count?: BroadcastMessageCountOrderByAggregateInput
    _max?: BroadcastMessageMaxOrderByAggregateInput
    _min?: BroadcastMessageMinOrderByAggregateInput
  }

  export type BroadcastMessageScalarWhereWithAggregatesInput = {
    AND?: BroadcastMessageScalarWhereWithAggregatesInput | BroadcastMessageScalarWhereWithAggregatesInput[]
    OR?: BroadcastMessageScalarWhereWithAggregatesInput[]
    NOT?: BroadcastMessageScalarWhereWithAggregatesInput | BroadcastMessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BroadcastMessage"> | string
    message?: StringWithAggregatesFilter<"BroadcastMessage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"BroadcastMessage"> | Date | string
    sentById?: StringWithAggregatesFilter<"BroadcastMessage"> | string
  }

  export type AdminLogWhereInput = {
    AND?: AdminLogWhereInput | AdminLogWhereInput[]
    OR?: AdminLogWhereInput[]
    NOT?: AdminLogWhereInput | AdminLogWhereInput[]
    id?: StringFilter<"AdminLog"> | string
    adminId?: StringFilter<"AdminLog"> | string
    action?: StringFilter<"AdminLog"> | string
    targetId?: StringNullableFilter<"AdminLog"> | string | null
    createdAt?: DateTimeFilter<"AdminLog"> | Date | string
    admin?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AdminLogOrderByWithRelationInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    targetId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    admin?: UserOrderByWithRelationInput
  }

  export type AdminLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AdminLogWhereInput | AdminLogWhereInput[]
    OR?: AdminLogWhereInput[]
    NOT?: AdminLogWhereInput | AdminLogWhereInput[]
    adminId?: StringFilter<"AdminLog"> | string
    action?: StringFilter<"AdminLog"> | string
    targetId?: StringNullableFilter<"AdminLog"> | string | null
    createdAt?: DateTimeFilter<"AdminLog"> | Date | string
    admin?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AdminLogOrderByWithAggregationInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    targetId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AdminLogCountOrderByAggregateInput
    _max?: AdminLogMaxOrderByAggregateInput
    _min?: AdminLogMinOrderByAggregateInput
  }

  export type AdminLogScalarWhereWithAggregatesInput = {
    AND?: AdminLogScalarWhereWithAggregatesInput | AdminLogScalarWhereWithAggregatesInput[]
    OR?: AdminLogScalarWhereWithAggregatesInput[]
    NOT?: AdminLogScalarWhereWithAggregatesInput | AdminLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AdminLog"> | string
    adminId?: StringWithAggregatesFilter<"AdminLog"> | string
    action?: StringWithAggregatesFilter<"AdminLog"> | string
    targetId?: StringNullableWithAggregatesFilter<"AdminLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AdminLog"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedCreateNestedManyWithoutUserInput
    skillsWanted?: UserSkillsWantedCreateNestedManyWithoutUserInput
    ratings?: RatingCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestCreateNestedManyWithoutFromUserInput
    receivedSwapRequests?: SwapRequestCreateNestedManyWithoutToUserInput
    givenRatings?: RatingCreateNestedManyWithoutGivenByInput
    givenReviews?: ReviewCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageCreateNestedManyWithoutSentByInput
    adminLogs?: AdminLogCreateNestedManyWithoutAdminInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedUncheckedCreateNestedManyWithoutUserInput
    skillsWanted?: UserSkillsWantedUncheckedCreateNestedManyWithoutUserInput
    ratings?: RatingUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutFromUserInput
    receivedSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutToUserInput
    givenRatings?: RatingUncheckedCreateNestedManyWithoutGivenByInput
    givenReviews?: ReviewUncheckedCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageUncheckedCreateNestedManyWithoutSentByInput
    adminLogs?: AdminLogUncheckedCreateNestedManyWithoutAdminInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUpdateManyWithoutUserNestedInput
    skillsWanted?: UserSkillsWantedUpdateManyWithoutUserNestedInput
    ratings?: RatingUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUpdateManyWithoutFromUserNestedInput
    receivedSwapRequests?: SwapRequestUpdateManyWithoutToUserNestedInput
    givenRatings?: RatingUpdateManyWithoutGivenByNestedInput
    givenReviews?: ReviewUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUpdateManyWithoutSentByNestedInput
    adminLogs?: AdminLogUpdateManyWithoutAdminNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUncheckedUpdateManyWithoutUserNestedInput
    skillsWanted?: UserSkillsWantedUncheckedUpdateManyWithoutUserNestedInput
    ratings?: RatingUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUncheckedUpdateManyWithoutFromUserNestedInput
    receivedSwapRequests?: SwapRequestUncheckedUpdateManyWithoutToUserNestedInput
    givenRatings?: RatingUncheckedUpdateManyWithoutGivenByNestedInput
    givenReviews?: ReviewUncheckedUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUncheckedUpdateManyWithoutSentByNestedInput
    adminLogs?: AdminLogUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillCreateInput = {
    id?: string
    name: string
    status: string
    offeredBy?: UserSkillsOfferedCreateNestedManyWithoutSkillInput
    wantedBy?: UserSkillsWantedCreateNestedManyWithoutSkillInput
  }

  export type SkillUncheckedCreateInput = {
    id?: string
    name: string
    status: string
    offeredBy?: UserSkillsOfferedUncheckedCreateNestedManyWithoutSkillInput
    wantedBy?: UserSkillsWantedUncheckedCreateNestedManyWithoutSkillInput
  }

  export type SkillUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    offeredBy?: UserSkillsOfferedUpdateManyWithoutSkillNestedInput
    wantedBy?: UserSkillsWantedUpdateManyWithoutSkillNestedInput
  }

  export type SkillUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    offeredBy?: UserSkillsOfferedUncheckedUpdateManyWithoutSkillNestedInput
    wantedBy?: UserSkillsWantedUncheckedUpdateManyWithoutSkillNestedInput
  }

  export type SkillCreateManyInput = {
    id?: string
    name: string
    status: string
  }

  export type SkillUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type SkillUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type UserSkillsOfferedCreateInput = {
    id?: string
    user: UserCreateNestedOneWithoutSkillsOfferedInput
    skill: SkillCreateNestedOneWithoutOfferedByInput
  }

  export type UserSkillsOfferedUncheckedCreateInput = {
    id?: string
    userId: string
    skillId: string
  }

  export type UserSkillsOfferedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSkillsOfferedNestedInput
    skill?: SkillUpdateOneRequiredWithoutOfferedByNestedInput
  }

  export type UserSkillsOfferedUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    skillId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSkillsOfferedCreateManyInput = {
    id?: string
    userId: string
    skillId: string
  }

  export type UserSkillsOfferedUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type UserSkillsOfferedUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    skillId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSkillsWantedCreateInput = {
    id?: string
    user: UserCreateNestedOneWithoutSkillsWantedInput
    skill: SkillCreateNestedOneWithoutWantedByInput
  }

  export type UserSkillsWantedUncheckedCreateInput = {
    id?: string
    userId: string
    skillId: string
  }

  export type UserSkillsWantedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSkillsWantedNestedInput
    skill?: SkillUpdateOneRequiredWithoutWantedByNestedInput
  }

  export type UserSkillsWantedUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    skillId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSkillsWantedCreateManyInput = {
    id?: string
    userId: string
    skillId: string
  }

  export type UserSkillsWantedUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type UserSkillsWantedUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    skillId?: StringFieldUpdateOperationsInput | string
  }

  export type SwapRequestCreateInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromUser: UserCreateNestedOneWithoutSentSwapRequestsInput
    toUser: UserCreateNestedOneWithoutReceivedSwapRequestsInput
    ratings?: RatingCreateNestedManyWithoutSwapInput
    reviews?: ReviewCreateNestedManyWithoutSwapInput
  }

  export type SwapRequestUncheckedCreateInput = {
    id?: string
    fromUserId: string
    toUserId: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ratings?: RatingUncheckedCreateNestedManyWithoutSwapInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutSwapInput
  }

  export type SwapRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromUser?: UserUpdateOneRequiredWithoutSentSwapRequestsNestedInput
    toUser?: UserUpdateOneRequiredWithoutReceivedSwapRequestsNestedInput
    ratings?: RatingUpdateManyWithoutSwapNestedInput
    reviews?: ReviewUpdateManyWithoutSwapNestedInput
  }

  export type SwapRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromUserId?: StringFieldUpdateOperationsInput | string
    toUserId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratings?: RatingUncheckedUpdateManyWithoutSwapNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutSwapNestedInput
  }

  export type SwapRequestCreateManyInput = {
    id?: string
    fromUserId: string
    toUserId: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SwapRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwapRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromUserId?: StringFieldUpdateOperationsInput | string
    toUserId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingCreateInput = {
    id?: string
    role: string
    stars: number
    user: UserCreateNestedOneWithoutRatingsInput
    givenBy: UserCreateNestedOneWithoutGivenRatingsInput
    swap?: SwapRequestCreateNestedOneWithoutRatingsInput
  }

  export type RatingUncheckedCreateInput = {
    id?: string
    userId: string
    givenById: string
    role: string
    stars: number
    swapId?: string | null
  }

  export type RatingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutRatingsNestedInput
    givenBy?: UserUpdateOneRequiredWithoutGivenRatingsNestedInput
    swap?: SwapRequestUpdateOneWithoutRatingsNestedInput
  }

  export type RatingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    givenById?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    swapId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RatingCreateManyInput = {
    id?: string
    userId: string
    givenById: string
    role: string
    stars: number
    swapId?: string | null
  }

  export type RatingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
  }

  export type RatingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    givenById?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    swapId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewCreateInput = {
    id?: string
    role: string
    comment: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReviewsInput
    givenBy: UserCreateNestedOneWithoutGivenReviewsInput
    swap?: SwapRequestCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: string
    userId: string
    givenById: string
    role: string
    comment: string
    swapId?: string | null
    createdAt?: Date | string
  }

  export type ReviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
    givenBy?: UserUpdateOneRequiredWithoutGivenReviewsNestedInput
    swap?: SwapRequestUpdateOneWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    givenById?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    swapId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateManyInput = {
    id?: string
    userId: string
    givenById: string
    role: string
    comment: string
    swapId?: string | null
    createdAt?: Date | string
  }

  export type ReviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    givenById?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    swapId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BroadcastMessageCreateInput = {
    id?: string
    message: string
    createdAt?: Date | string
    sentBy: UserCreateNestedOneWithoutBroadcastMessagesInput
  }

  export type BroadcastMessageUncheckedCreateInput = {
    id?: string
    message: string
    createdAt?: Date | string
    sentById: string
  }

  export type BroadcastMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentBy?: UserUpdateOneRequiredWithoutBroadcastMessagesNestedInput
  }

  export type BroadcastMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentById?: StringFieldUpdateOperationsInput | string
  }

  export type BroadcastMessageCreateManyInput = {
    id?: string
    message: string
    createdAt?: Date | string
    sentById: string
  }

  export type BroadcastMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BroadcastMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentById?: StringFieldUpdateOperationsInput | string
  }

  export type AdminLogCreateInput = {
    id?: string
    action: string
    targetId?: string | null
    createdAt?: Date | string
    admin: UserCreateNestedOneWithoutAdminLogsInput
  }

  export type AdminLogUncheckedCreateInput = {
    id?: string
    adminId: string
    action: string
    targetId?: string | null
    createdAt?: Date | string
  }

  export type AdminLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: UserUpdateOneRequiredWithoutAdminLogsNestedInput
  }

  export type AdminLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminLogCreateManyInput = {
    id?: string
    adminId: string
    action: string
    targetId?: string | null
    createdAt?: Date | string
  }

  export type AdminLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserSkillsOfferedListRelationFilter = {
    every?: UserSkillsOfferedWhereInput
    some?: UserSkillsOfferedWhereInput
    none?: UserSkillsOfferedWhereInput
  }

  export type UserSkillsWantedListRelationFilter = {
    every?: UserSkillsWantedWhereInput
    some?: UserSkillsWantedWhereInput
    none?: UserSkillsWantedWhereInput
  }

  export type RatingListRelationFilter = {
    every?: RatingWhereInput
    some?: RatingWhereInput
    none?: RatingWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type SwapRequestListRelationFilter = {
    every?: SwapRequestWhereInput
    some?: SwapRequestWhereInput
    none?: SwapRequestWhereInput
  }

  export type BroadcastMessageListRelationFilter = {
    every?: BroadcastMessageWhereInput
    some?: BroadcastMessageWhereInput
    none?: BroadcastMessageWhereInput
  }

  export type AdminLogListRelationFilter = {
    every?: AdminLogWhereInput
    some?: AdminLogWhereInput
    none?: AdminLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserSkillsOfferedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSkillsWantedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SwapRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BroadcastMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    experience?: SortOrder
    projects?: SortOrder
    profilePhoto?: SortOrder
    location?: SortOrder
    availability?: SortOrder
    isPublic?: SortOrder
    banned?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    experience?: SortOrder
    projects?: SortOrder
    profilePhoto?: SortOrder
    location?: SortOrder
    availability?: SortOrder
    isPublic?: SortOrder
    banned?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    experience?: SortOrder
    projects?: SortOrder
    profilePhoto?: SortOrder
    location?: SortOrder
    availability?: SortOrder
    isPublic?: SortOrder
    banned?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type SkillCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
  }

  export type SkillMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
  }

  export type SkillMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SkillScalarRelationFilter = {
    is?: SkillWhereInput
    isNot?: SkillWhereInput
  }

  export type UserSkillsOfferedCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    skillId?: SortOrder
  }

  export type UserSkillsOfferedMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    skillId?: SortOrder
  }

  export type UserSkillsOfferedMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    skillId?: SortOrder
  }

  export type UserSkillsWantedCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    skillId?: SortOrder
  }

  export type UserSkillsWantedMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    skillId?: SortOrder
  }

  export type UserSkillsWantedMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    skillId?: SortOrder
  }

  export type SwapRequestCountOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SwapRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SwapRequestMinOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type SwapRequestNullableScalarRelationFilter = {
    is?: SwapRequestWhereInput | null
    isNot?: SwapRequestWhereInput | null
  }

  export type RatingCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    givenById?: SortOrder
    role?: SortOrder
    stars?: SortOrder
    swapId?: SortOrder
  }

  export type RatingAvgOrderByAggregateInput = {
    stars?: SortOrder
  }

  export type RatingMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    givenById?: SortOrder
    role?: SortOrder
    stars?: SortOrder
    swapId?: SortOrder
  }

  export type RatingMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    givenById?: SortOrder
    role?: SortOrder
    stars?: SortOrder
    swapId?: SortOrder
  }

  export type RatingSumOrderByAggregateInput = {
    stars?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    givenById?: SortOrder
    role?: SortOrder
    comment?: SortOrder
    swapId?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    givenById?: SortOrder
    role?: SortOrder
    comment?: SortOrder
    swapId?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    givenById?: SortOrder
    role?: SortOrder
    comment?: SortOrder
    swapId?: SortOrder
    createdAt?: SortOrder
  }

  export type BroadcastMessageCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    sentById?: SortOrder
  }

  export type BroadcastMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    sentById?: SortOrder
  }

  export type BroadcastMessageMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    sentById?: SortOrder
  }

  export type AdminLogCountOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    targetId?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminLogMaxOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    targetId?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminLogMinOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    targetId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSkillsOfferedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSkillsOfferedCreateWithoutUserInput, UserSkillsOfferedUncheckedCreateWithoutUserInput> | UserSkillsOfferedCreateWithoutUserInput[] | UserSkillsOfferedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSkillsOfferedCreateOrConnectWithoutUserInput | UserSkillsOfferedCreateOrConnectWithoutUserInput[]
    createMany?: UserSkillsOfferedCreateManyUserInputEnvelope
    connect?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
  }

  export type UserSkillsWantedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSkillsWantedCreateWithoutUserInput, UserSkillsWantedUncheckedCreateWithoutUserInput> | UserSkillsWantedCreateWithoutUserInput[] | UserSkillsWantedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSkillsWantedCreateOrConnectWithoutUserInput | UserSkillsWantedCreateOrConnectWithoutUserInput[]
    createMany?: UserSkillsWantedCreateManyUserInputEnvelope
    connect?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
  }

  export type RatingCreateNestedManyWithoutUserInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type SwapRequestCreateNestedManyWithoutFromUserInput = {
    create?: XOR<SwapRequestCreateWithoutFromUserInput, SwapRequestUncheckedCreateWithoutFromUserInput> | SwapRequestCreateWithoutFromUserInput[] | SwapRequestUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutFromUserInput | SwapRequestCreateOrConnectWithoutFromUserInput[]
    createMany?: SwapRequestCreateManyFromUserInputEnvelope
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
  }

  export type SwapRequestCreateNestedManyWithoutToUserInput = {
    create?: XOR<SwapRequestCreateWithoutToUserInput, SwapRequestUncheckedCreateWithoutToUserInput> | SwapRequestCreateWithoutToUserInput[] | SwapRequestUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutToUserInput | SwapRequestCreateOrConnectWithoutToUserInput[]
    createMany?: SwapRequestCreateManyToUserInputEnvelope
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
  }

  export type RatingCreateNestedManyWithoutGivenByInput = {
    create?: XOR<RatingCreateWithoutGivenByInput, RatingUncheckedCreateWithoutGivenByInput> | RatingCreateWithoutGivenByInput[] | RatingUncheckedCreateWithoutGivenByInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutGivenByInput | RatingCreateOrConnectWithoutGivenByInput[]
    createMany?: RatingCreateManyGivenByInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutGivenByInput = {
    create?: XOR<ReviewCreateWithoutGivenByInput, ReviewUncheckedCreateWithoutGivenByInput> | ReviewCreateWithoutGivenByInput[] | ReviewUncheckedCreateWithoutGivenByInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutGivenByInput | ReviewCreateOrConnectWithoutGivenByInput[]
    createMany?: ReviewCreateManyGivenByInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type BroadcastMessageCreateNestedManyWithoutSentByInput = {
    create?: XOR<BroadcastMessageCreateWithoutSentByInput, BroadcastMessageUncheckedCreateWithoutSentByInput> | BroadcastMessageCreateWithoutSentByInput[] | BroadcastMessageUncheckedCreateWithoutSentByInput[]
    connectOrCreate?: BroadcastMessageCreateOrConnectWithoutSentByInput | BroadcastMessageCreateOrConnectWithoutSentByInput[]
    createMany?: BroadcastMessageCreateManySentByInputEnvelope
    connect?: BroadcastMessageWhereUniqueInput | BroadcastMessageWhereUniqueInput[]
  }

  export type AdminLogCreateNestedManyWithoutAdminInput = {
    create?: XOR<AdminLogCreateWithoutAdminInput, AdminLogUncheckedCreateWithoutAdminInput> | AdminLogCreateWithoutAdminInput[] | AdminLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AdminLogCreateOrConnectWithoutAdminInput | AdminLogCreateOrConnectWithoutAdminInput[]
    createMany?: AdminLogCreateManyAdminInputEnvelope
    connect?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
  }

  export type UserSkillsOfferedUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSkillsOfferedCreateWithoutUserInput, UserSkillsOfferedUncheckedCreateWithoutUserInput> | UserSkillsOfferedCreateWithoutUserInput[] | UserSkillsOfferedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSkillsOfferedCreateOrConnectWithoutUserInput | UserSkillsOfferedCreateOrConnectWithoutUserInput[]
    createMany?: UserSkillsOfferedCreateManyUserInputEnvelope
    connect?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
  }

  export type UserSkillsWantedUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSkillsWantedCreateWithoutUserInput, UserSkillsWantedUncheckedCreateWithoutUserInput> | UserSkillsWantedCreateWithoutUserInput[] | UserSkillsWantedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSkillsWantedCreateOrConnectWithoutUserInput | UserSkillsWantedCreateOrConnectWithoutUserInput[]
    createMany?: UserSkillsWantedCreateManyUserInputEnvelope
    connect?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
  }

  export type RatingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type SwapRequestUncheckedCreateNestedManyWithoutFromUserInput = {
    create?: XOR<SwapRequestCreateWithoutFromUserInput, SwapRequestUncheckedCreateWithoutFromUserInput> | SwapRequestCreateWithoutFromUserInput[] | SwapRequestUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutFromUserInput | SwapRequestCreateOrConnectWithoutFromUserInput[]
    createMany?: SwapRequestCreateManyFromUserInputEnvelope
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
  }

  export type SwapRequestUncheckedCreateNestedManyWithoutToUserInput = {
    create?: XOR<SwapRequestCreateWithoutToUserInput, SwapRequestUncheckedCreateWithoutToUserInput> | SwapRequestCreateWithoutToUserInput[] | SwapRequestUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutToUserInput | SwapRequestCreateOrConnectWithoutToUserInput[]
    createMany?: SwapRequestCreateManyToUserInputEnvelope
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
  }

  export type RatingUncheckedCreateNestedManyWithoutGivenByInput = {
    create?: XOR<RatingCreateWithoutGivenByInput, RatingUncheckedCreateWithoutGivenByInput> | RatingCreateWithoutGivenByInput[] | RatingUncheckedCreateWithoutGivenByInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutGivenByInput | RatingCreateOrConnectWithoutGivenByInput[]
    createMany?: RatingCreateManyGivenByInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutGivenByInput = {
    create?: XOR<ReviewCreateWithoutGivenByInput, ReviewUncheckedCreateWithoutGivenByInput> | ReviewCreateWithoutGivenByInput[] | ReviewUncheckedCreateWithoutGivenByInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutGivenByInput | ReviewCreateOrConnectWithoutGivenByInput[]
    createMany?: ReviewCreateManyGivenByInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type BroadcastMessageUncheckedCreateNestedManyWithoutSentByInput = {
    create?: XOR<BroadcastMessageCreateWithoutSentByInput, BroadcastMessageUncheckedCreateWithoutSentByInput> | BroadcastMessageCreateWithoutSentByInput[] | BroadcastMessageUncheckedCreateWithoutSentByInput[]
    connectOrCreate?: BroadcastMessageCreateOrConnectWithoutSentByInput | BroadcastMessageCreateOrConnectWithoutSentByInput[]
    createMany?: BroadcastMessageCreateManySentByInputEnvelope
    connect?: BroadcastMessageWhereUniqueInput | BroadcastMessageWhereUniqueInput[]
  }

  export type AdminLogUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<AdminLogCreateWithoutAdminInput, AdminLogUncheckedCreateWithoutAdminInput> | AdminLogCreateWithoutAdminInput[] | AdminLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AdminLogCreateOrConnectWithoutAdminInput | AdminLogCreateOrConnectWithoutAdminInput[]
    createMany?: AdminLogCreateManyAdminInputEnvelope
    connect?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserSkillsOfferedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSkillsOfferedCreateWithoutUserInput, UserSkillsOfferedUncheckedCreateWithoutUserInput> | UserSkillsOfferedCreateWithoutUserInput[] | UserSkillsOfferedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSkillsOfferedCreateOrConnectWithoutUserInput | UserSkillsOfferedCreateOrConnectWithoutUserInput[]
    upsert?: UserSkillsOfferedUpsertWithWhereUniqueWithoutUserInput | UserSkillsOfferedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSkillsOfferedCreateManyUserInputEnvelope
    set?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
    disconnect?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
    delete?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
    connect?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
    update?: UserSkillsOfferedUpdateWithWhereUniqueWithoutUserInput | UserSkillsOfferedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSkillsOfferedUpdateManyWithWhereWithoutUserInput | UserSkillsOfferedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSkillsOfferedScalarWhereInput | UserSkillsOfferedScalarWhereInput[]
  }

  export type UserSkillsWantedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSkillsWantedCreateWithoutUserInput, UserSkillsWantedUncheckedCreateWithoutUserInput> | UserSkillsWantedCreateWithoutUserInput[] | UserSkillsWantedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSkillsWantedCreateOrConnectWithoutUserInput | UserSkillsWantedCreateOrConnectWithoutUserInput[]
    upsert?: UserSkillsWantedUpsertWithWhereUniqueWithoutUserInput | UserSkillsWantedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSkillsWantedCreateManyUserInputEnvelope
    set?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
    disconnect?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
    delete?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
    connect?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
    update?: UserSkillsWantedUpdateWithWhereUniqueWithoutUserInput | UserSkillsWantedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSkillsWantedUpdateManyWithWhereWithoutUserInput | UserSkillsWantedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSkillsWantedScalarWhereInput | UserSkillsWantedScalarWhereInput[]
  }

  export type RatingUpdateManyWithoutUserNestedInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutUserInput | RatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutUserInput | RatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutUserInput | RatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type SwapRequestUpdateManyWithoutFromUserNestedInput = {
    create?: XOR<SwapRequestCreateWithoutFromUserInput, SwapRequestUncheckedCreateWithoutFromUserInput> | SwapRequestCreateWithoutFromUserInput[] | SwapRequestUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutFromUserInput | SwapRequestCreateOrConnectWithoutFromUserInput[]
    upsert?: SwapRequestUpsertWithWhereUniqueWithoutFromUserInput | SwapRequestUpsertWithWhereUniqueWithoutFromUserInput[]
    createMany?: SwapRequestCreateManyFromUserInputEnvelope
    set?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    disconnect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    delete?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    update?: SwapRequestUpdateWithWhereUniqueWithoutFromUserInput | SwapRequestUpdateWithWhereUniqueWithoutFromUserInput[]
    updateMany?: SwapRequestUpdateManyWithWhereWithoutFromUserInput | SwapRequestUpdateManyWithWhereWithoutFromUserInput[]
    deleteMany?: SwapRequestScalarWhereInput | SwapRequestScalarWhereInput[]
  }

  export type SwapRequestUpdateManyWithoutToUserNestedInput = {
    create?: XOR<SwapRequestCreateWithoutToUserInput, SwapRequestUncheckedCreateWithoutToUserInput> | SwapRequestCreateWithoutToUserInput[] | SwapRequestUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutToUserInput | SwapRequestCreateOrConnectWithoutToUserInput[]
    upsert?: SwapRequestUpsertWithWhereUniqueWithoutToUserInput | SwapRequestUpsertWithWhereUniqueWithoutToUserInput[]
    createMany?: SwapRequestCreateManyToUserInputEnvelope
    set?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    disconnect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    delete?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    update?: SwapRequestUpdateWithWhereUniqueWithoutToUserInput | SwapRequestUpdateWithWhereUniqueWithoutToUserInput[]
    updateMany?: SwapRequestUpdateManyWithWhereWithoutToUserInput | SwapRequestUpdateManyWithWhereWithoutToUserInput[]
    deleteMany?: SwapRequestScalarWhereInput | SwapRequestScalarWhereInput[]
  }

  export type RatingUpdateManyWithoutGivenByNestedInput = {
    create?: XOR<RatingCreateWithoutGivenByInput, RatingUncheckedCreateWithoutGivenByInput> | RatingCreateWithoutGivenByInput[] | RatingUncheckedCreateWithoutGivenByInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutGivenByInput | RatingCreateOrConnectWithoutGivenByInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutGivenByInput | RatingUpsertWithWhereUniqueWithoutGivenByInput[]
    createMany?: RatingCreateManyGivenByInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutGivenByInput | RatingUpdateWithWhereUniqueWithoutGivenByInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutGivenByInput | RatingUpdateManyWithWhereWithoutGivenByInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutGivenByNestedInput = {
    create?: XOR<ReviewCreateWithoutGivenByInput, ReviewUncheckedCreateWithoutGivenByInput> | ReviewCreateWithoutGivenByInput[] | ReviewUncheckedCreateWithoutGivenByInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutGivenByInput | ReviewCreateOrConnectWithoutGivenByInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutGivenByInput | ReviewUpsertWithWhereUniqueWithoutGivenByInput[]
    createMany?: ReviewCreateManyGivenByInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutGivenByInput | ReviewUpdateWithWhereUniqueWithoutGivenByInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutGivenByInput | ReviewUpdateManyWithWhereWithoutGivenByInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type BroadcastMessageUpdateManyWithoutSentByNestedInput = {
    create?: XOR<BroadcastMessageCreateWithoutSentByInput, BroadcastMessageUncheckedCreateWithoutSentByInput> | BroadcastMessageCreateWithoutSentByInput[] | BroadcastMessageUncheckedCreateWithoutSentByInput[]
    connectOrCreate?: BroadcastMessageCreateOrConnectWithoutSentByInput | BroadcastMessageCreateOrConnectWithoutSentByInput[]
    upsert?: BroadcastMessageUpsertWithWhereUniqueWithoutSentByInput | BroadcastMessageUpsertWithWhereUniqueWithoutSentByInput[]
    createMany?: BroadcastMessageCreateManySentByInputEnvelope
    set?: BroadcastMessageWhereUniqueInput | BroadcastMessageWhereUniqueInput[]
    disconnect?: BroadcastMessageWhereUniqueInput | BroadcastMessageWhereUniqueInput[]
    delete?: BroadcastMessageWhereUniqueInput | BroadcastMessageWhereUniqueInput[]
    connect?: BroadcastMessageWhereUniqueInput | BroadcastMessageWhereUniqueInput[]
    update?: BroadcastMessageUpdateWithWhereUniqueWithoutSentByInput | BroadcastMessageUpdateWithWhereUniqueWithoutSentByInput[]
    updateMany?: BroadcastMessageUpdateManyWithWhereWithoutSentByInput | BroadcastMessageUpdateManyWithWhereWithoutSentByInput[]
    deleteMany?: BroadcastMessageScalarWhereInput | BroadcastMessageScalarWhereInput[]
  }

  export type AdminLogUpdateManyWithoutAdminNestedInput = {
    create?: XOR<AdminLogCreateWithoutAdminInput, AdminLogUncheckedCreateWithoutAdminInput> | AdminLogCreateWithoutAdminInput[] | AdminLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AdminLogCreateOrConnectWithoutAdminInput | AdminLogCreateOrConnectWithoutAdminInput[]
    upsert?: AdminLogUpsertWithWhereUniqueWithoutAdminInput | AdminLogUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: AdminLogCreateManyAdminInputEnvelope
    set?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
    disconnect?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
    delete?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
    connect?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
    update?: AdminLogUpdateWithWhereUniqueWithoutAdminInput | AdminLogUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: AdminLogUpdateManyWithWhereWithoutAdminInput | AdminLogUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: AdminLogScalarWhereInput | AdminLogScalarWhereInput[]
  }

  export type UserSkillsOfferedUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSkillsOfferedCreateWithoutUserInput, UserSkillsOfferedUncheckedCreateWithoutUserInput> | UserSkillsOfferedCreateWithoutUserInput[] | UserSkillsOfferedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSkillsOfferedCreateOrConnectWithoutUserInput | UserSkillsOfferedCreateOrConnectWithoutUserInput[]
    upsert?: UserSkillsOfferedUpsertWithWhereUniqueWithoutUserInput | UserSkillsOfferedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSkillsOfferedCreateManyUserInputEnvelope
    set?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
    disconnect?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
    delete?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
    connect?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
    update?: UserSkillsOfferedUpdateWithWhereUniqueWithoutUserInput | UserSkillsOfferedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSkillsOfferedUpdateManyWithWhereWithoutUserInput | UserSkillsOfferedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSkillsOfferedScalarWhereInput | UserSkillsOfferedScalarWhereInput[]
  }

  export type UserSkillsWantedUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSkillsWantedCreateWithoutUserInput, UserSkillsWantedUncheckedCreateWithoutUserInput> | UserSkillsWantedCreateWithoutUserInput[] | UserSkillsWantedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSkillsWantedCreateOrConnectWithoutUserInput | UserSkillsWantedCreateOrConnectWithoutUserInput[]
    upsert?: UserSkillsWantedUpsertWithWhereUniqueWithoutUserInput | UserSkillsWantedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSkillsWantedCreateManyUserInputEnvelope
    set?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
    disconnect?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
    delete?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
    connect?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
    update?: UserSkillsWantedUpdateWithWhereUniqueWithoutUserInput | UserSkillsWantedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSkillsWantedUpdateManyWithWhereWithoutUserInput | UserSkillsWantedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSkillsWantedScalarWhereInput | UserSkillsWantedScalarWhereInput[]
  }

  export type RatingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutUserInput | RatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutUserInput | RatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutUserInput | RatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type SwapRequestUncheckedUpdateManyWithoutFromUserNestedInput = {
    create?: XOR<SwapRequestCreateWithoutFromUserInput, SwapRequestUncheckedCreateWithoutFromUserInput> | SwapRequestCreateWithoutFromUserInput[] | SwapRequestUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutFromUserInput | SwapRequestCreateOrConnectWithoutFromUserInput[]
    upsert?: SwapRequestUpsertWithWhereUniqueWithoutFromUserInput | SwapRequestUpsertWithWhereUniqueWithoutFromUserInput[]
    createMany?: SwapRequestCreateManyFromUserInputEnvelope
    set?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    disconnect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    delete?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    update?: SwapRequestUpdateWithWhereUniqueWithoutFromUserInput | SwapRequestUpdateWithWhereUniqueWithoutFromUserInput[]
    updateMany?: SwapRequestUpdateManyWithWhereWithoutFromUserInput | SwapRequestUpdateManyWithWhereWithoutFromUserInput[]
    deleteMany?: SwapRequestScalarWhereInput | SwapRequestScalarWhereInput[]
  }

  export type SwapRequestUncheckedUpdateManyWithoutToUserNestedInput = {
    create?: XOR<SwapRequestCreateWithoutToUserInput, SwapRequestUncheckedCreateWithoutToUserInput> | SwapRequestCreateWithoutToUserInput[] | SwapRequestUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutToUserInput | SwapRequestCreateOrConnectWithoutToUserInput[]
    upsert?: SwapRequestUpsertWithWhereUniqueWithoutToUserInput | SwapRequestUpsertWithWhereUniqueWithoutToUserInput[]
    createMany?: SwapRequestCreateManyToUserInputEnvelope
    set?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    disconnect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    delete?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    update?: SwapRequestUpdateWithWhereUniqueWithoutToUserInput | SwapRequestUpdateWithWhereUniqueWithoutToUserInput[]
    updateMany?: SwapRequestUpdateManyWithWhereWithoutToUserInput | SwapRequestUpdateManyWithWhereWithoutToUserInput[]
    deleteMany?: SwapRequestScalarWhereInput | SwapRequestScalarWhereInput[]
  }

  export type RatingUncheckedUpdateManyWithoutGivenByNestedInput = {
    create?: XOR<RatingCreateWithoutGivenByInput, RatingUncheckedCreateWithoutGivenByInput> | RatingCreateWithoutGivenByInput[] | RatingUncheckedCreateWithoutGivenByInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutGivenByInput | RatingCreateOrConnectWithoutGivenByInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutGivenByInput | RatingUpsertWithWhereUniqueWithoutGivenByInput[]
    createMany?: RatingCreateManyGivenByInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutGivenByInput | RatingUpdateWithWhereUniqueWithoutGivenByInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutGivenByInput | RatingUpdateManyWithWhereWithoutGivenByInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutGivenByNestedInput = {
    create?: XOR<ReviewCreateWithoutGivenByInput, ReviewUncheckedCreateWithoutGivenByInput> | ReviewCreateWithoutGivenByInput[] | ReviewUncheckedCreateWithoutGivenByInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutGivenByInput | ReviewCreateOrConnectWithoutGivenByInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutGivenByInput | ReviewUpsertWithWhereUniqueWithoutGivenByInput[]
    createMany?: ReviewCreateManyGivenByInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutGivenByInput | ReviewUpdateWithWhereUniqueWithoutGivenByInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutGivenByInput | ReviewUpdateManyWithWhereWithoutGivenByInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type BroadcastMessageUncheckedUpdateManyWithoutSentByNestedInput = {
    create?: XOR<BroadcastMessageCreateWithoutSentByInput, BroadcastMessageUncheckedCreateWithoutSentByInput> | BroadcastMessageCreateWithoutSentByInput[] | BroadcastMessageUncheckedCreateWithoutSentByInput[]
    connectOrCreate?: BroadcastMessageCreateOrConnectWithoutSentByInput | BroadcastMessageCreateOrConnectWithoutSentByInput[]
    upsert?: BroadcastMessageUpsertWithWhereUniqueWithoutSentByInput | BroadcastMessageUpsertWithWhereUniqueWithoutSentByInput[]
    createMany?: BroadcastMessageCreateManySentByInputEnvelope
    set?: BroadcastMessageWhereUniqueInput | BroadcastMessageWhereUniqueInput[]
    disconnect?: BroadcastMessageWhereUniqueInput | BroadcastMessageWhereUniqueInput[]
    delete?: BroadcastMessageWhereUniqueInput | BroadcastMessageWhereUniqueInput[]
    connect?: BroadcastMessageWhereUniqueInput | BroadcastMessageWhereUniqueInput[]
    update?: BroadcastMessageUpdateWithWhereUniqueWithoutSentByInput | BroadcastMessageUpdateWithWhereUniqueWithoutSentByInput[]
    updateMany?: BroadcastMessageUpdateManyWithWhereWithoutSentByInput | BroadcastMessageUpdateManyWithWhereWithoutSentByInput[]
    deleteMany?: BroadcastMessageScalarWhereInput | BroadcastMessageScalarWhereInput[]
  }

  export type AdminLogUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<AdminLogCreateWithoutAdminInput, AdminLogUncheckedCreateWithoutAdminInput> | AdminLogCreateWithoutAdminInput[] | AdminLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AdminLogCreateOrConnectWithoutAdminInput | AdminLogCreateOrConnectWithoutAdminInput[]
    upsert?: AdminLogUpsertWithWhereUniqueWithoutAdminInput | AdminLogUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: AdminLogCreateManyAdminInputEnvelope
    set?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
    disconnect?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
    delete?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
    connect?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
    update?: AdminLogUpdateWithWhereUniqueWithoutAdminInput | AdminLogUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: AdminLogUpdateManyWithWhereWithoutAdminInput | AdminLogUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: AdminLogScalarWhereInput | AdminLogScalarWhereInput[]
  }

  export type UserSkillsOfferedCreateNestedManyWithoutSkillInput = {
    create?: XOR<UserSkillsOfferedCreateWithoutSkillInput, UserSkillsOfferedUncheckedCreateWithoutSkillInput> | UserSkillsOfferedCreateWithoutSkillInput[] | UserSkillsOfferedUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: UserSkillsOfferedCreateOrConnectWithoutSkillInput | UserSkillsOfferedCreateOrConnectWithoutSkillInput[]
    createMany?: UserSkillsOfferedCreateManySkillInputEnvelope
    connect?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
  }

  export type UserSkillsWantedCreateNestedManyWithoutSkillInput = {
    create?: XOR<UserSkillsWantedCreateWithoutSkillInput, UserSkillsWantedUncheckedCreateWithoutSkillInput> | UserSkillsWantedCreateWithoutSkillInput[] | UserSkillsWantedUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: UserSkillsWantedCreateOrConnectWithoutSkillInput | UserSkillsWantedCreateOrConnectWithoutSkillInput[]
    createMany?: UserSkillsWantedCreateManySkillInputEnvelope
    connect?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
  }

  export type UserSkillsOfferedUncheckedCreateNestedManyWithoutSkillInput = {
    create?: XOR<UserSkillsOfferedCreateWithoutSkillInput, UserSkillsOfferedUncheckedCreateWithoutSkillInput> | UserSkillsOfferedCreateWithoutSkillInput[] | UserSkillsOfferedUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: UserSkillsOfferedCreateOrConnectWithoutSkillInput | UserSkillsOfferedCreateOrConnectWithoutSkillInput[]
    createMany?: UserSkillsOfferedCreateManySkillInputEnvelope
    connect?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
  }

  export type UserSkillsWantedUncheckedCreateNestedManyWithoutSkillInput = {
    create?: XOR<UserSkillsWantedCreateWithoutSkillInput, UserSkillsWantedUncheckedCreateWithoutSkillInput> | UserSkillsWantedCreateWithoutSkillInput[] | UserSkillsWantedUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: UserSkillsWantedCreateOrConnectWithoutSkillInput | UserSkillsWantedCreateOrConnectWithoutSkillInput[]
    createMany?: UserSkillsWantedCreateManySkillInputEnvelope
    connect?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
  }

  export type UserSkillsOfferedUpdateManyWithoutSkillNestedInput = {
    create?: XOR<UserSkillsOfferedCreateWithoutSkillInput, UserSkillsOfferedUncheckedCreateWithoutSkillInput> | UserSkillsOfferedCreateWithoutSkillInput[] | UserSkillsOfferedUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: UserSkillsOfferedCreateOrConnectWithoutSkillInput | UserSkillsOfferedCreateOrConnectWithoutSkillInput[]
    upsert?: UserSkillsOfferedUpsertWithWhereUniqueWithoutSkillInput | UserSkillsOfferedUpsertWithWhereUniqueWithoutSkillInput[]
    createMany?: UserSkillsOfferedCreateManySkillInputEnvelope
    set?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
    disconnect?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
    delete?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
    connect?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
    update?: UserSkillsOfferedUpdateWithWhereUniqueWithoutSkillInput | UserSkillsOfferedUpdateWithWhereUniqueWithoutSkillInput[]
    updateMany?: UserSkillsOfferedUpdateManyWithWhereWithoutSkillInput | UserSkillsOfferedUpdateManyWithWhereWithoutSkillInput[]
    deleteMany?: UserSkillsOfferedScalarWhereInput | UserSkillsOfferedScalarWhereInput[]
  }

  export type UserSkillsWantedUpdateManyWithoutSkillNestedInput = {
    create?: XOR<UserSkillsWantedCreateWithoutSkillInput, UserSkillsWantedUncheckedCreateWithoutSkillInput> | UserSkillsWantedCreateWithoutSkillInput[] | UserSkillsWantedUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: UserSkillsWantedCreateOrConnectWithoutSkillInput | UserSkillsWantedCreateOrConnectWithoutSkillInput[]
    upsert?: UserSkillsWantedUpsertWithWhereUniqueWithoutSkillInput | UserSkillsWantedUpsertWithWhereUniqueWithoutSkillInput[]
    createMany?: UserSkillsWantedCreateManySkillInputEnvelope
    set?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
    disconnect?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
    delete?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
    connect?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
    update?: UserSkillsWantedUpdateWithWhereUniqueWithoutSkillInput | UserSkillsWantedUpdateWithWhereUniqueWithoutSkillInput[]
    updateMany?: UserSkillsWantedUpdateManyWithWhereWithoutSkillInput | UserSkillsWantedUpdateManyWithWhereWithoutSkillInput[]
    deleteMany?: UserSkillsWantedScalarWhereInput | UserSkillsWantedScalarWhereInput[]
  }

  export type UserSkillsOfferedUncheckedUpdateManyWithoutSkillNestedInput = {
    create?: XOR<UserSkillsOfferedCreateWithoutSkillInput, UserSkillsOfferedUncheckedCreateWithoutSkillInput> | UserSkillsOfferedCreateWithoutSkillInput[] | UserSkillsOfferedUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: UserSkillsOfferedCreateOrConnectWithoutSkillInput | UserSkillsOfferedCreateOrConnectWithoutSkillInput[]
    upsert?: UserSkillsOfferedUpsertWithWhereUniqueWithoutSkillInput | UserSkillsOfferedUpsertWithWhereUniqueWithoutSkillInput[]
    createMany?: UserSkillsOfferedCreateManySkillInputEnvelope
    set?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
    disconnect?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
    delete?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
    connect?: UserSkillsOfferedWhereUniqueInput | UserSkillsOfferedWhereUniqueInput[]
    update?: UserSkillsOfferedUpdateWithWhereUniqueWithoutSkillInput | UserSkillsOfferedUpdateWithWhereUniqueWithoutSkillInput[]
    updateMany?: UserSkillsOfferedUpdateManyWithWhereWithoutSkillInput | UserSkillsOfferedUpdateManyWithWhereWithoutSkillInput[]
    deleteMany?: UserSkillsOfferedScalarWhereInput | UserSkillsOfferedScalarWhereInput[]
  }

  export type UserSkillsWantedUncheckedUpdateManyWithoutSkillNestedInput = {
    create?: XOR<UserSkillsWantedCreateWithoutSkillInput, UserSkillsWantedUncheckedCreateWithoutSkillInput> | UserSkillsWantedCreateWithoutSkillInput[] | UserSkillsWantedUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: UserSkillsWantedCreateOrConnectWithoutSkillInput | UserSkillsWantedCreateOrConnectWithoutSkillInput[]
    upsert?: UserSkillsWantedUpsertWithWhereUniqueWithoutSkillInput | UserSkillsWantedUpsertWithWhereUniqueWithoutSkillInput[]
    createMany?: UserSkillsWantedCreateManySkillInputEnvelope
    set?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
    disconnect?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
    delete?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
    connect?: UserSkillsWantedWhereUniqueInput | UserSkillsWantedWhereUniqueInput[]
    update?: UserSkillsWantedUpdateWithWhereUniqueWithoutSkillInput | UserSkillsWantedUpdateWithWhereUniqueWithoutSkillInput[]
    updateMany?: UserSkillsWantedUpdateManyWithWhereWithoutSkillInput | UserSkillsWantedUpdateManyWithWhereWithoutSkillInput[]
    deleteMany?: UserSkillsWantedScalarWhereInput | UserSkillsWantedScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSkillsOfferedInput = {
    create?: XOR<UserCreateWithoutSkillsOfferedInput, UserUncheckedCreateWithoutSkillsOfferedInput>
    connectOrCreate?: UserCreateOrConnectWithoutSkillsOfferedInput
    connect?: UserWhereUniqueInput
  }

  export type SkillCreateNestedOneWithoutOfferedByInput = {
    create?: XOR<SkillCreateWithoutOfferedByInput, SkillUncheckedCreateWithoutOfferedByInput>
    connectOrCreate?: SkillCreateOrConnectWithoutOfferedByInput
    connect?: SkillWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSkillsOfferedNestedInput = {
    create?: XOR<UserCreateWithoutSkillsOfferedInput, UserUncheckedCreateWithoutSkillsOfferedInput>
    connectOrCreate?: UserCreateOrConnectWithoutSkillsOfferedInput
    upsert?: UserUpsertWithoutSkillsOfferedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSkillsOfferedInput, UserUpdateWithoutSkillsOfferedInput>, UserUncheckedUpdateWithoutSkillsOfferedInput>
  }

  export type SkillUpdateOneRequiredWithoutOfferedByNestedInput = {
    create?: XOR<SkillCreateWithoutOfferedByInput, SkillUncheckedCreateWithoutOfferedByInput>
    connectOrCreate?: SkillCreateOrConnectWithoutOfferedByInput
    upsert?: SkillUpsertWithoutOfferedByInput
    connect?: SkillWhereUniqueInput
    update?: XOR<XOR<SkillUpdateToOneWithWhereWithoutOfferedByInput, SkillUpdateWithoutOfferedByInput>, SkillUncheckedUpdateWithoutOfferedByInput>
  }

  export type UserCreateNestedOneWithoutSkillsWantedInput = {
    create?: XOR<UserCreateWithoutSkillsWantedInput, UserUncheckedCreateWithoutSkillsWantedInput>
    connectOrCreate?: UserCreateOrConnectWithoutSkillsWantedInput
    connect?: UserWhereUniqueInput
  }

  export type SkillCreateNestedOneWithoutWantedByInput = {
    create?: XOR<SkillCreateWithoutWantedByInput, SkillUncheckedCreateWithoutWantedByInput>
    connectOrCreate?: SkillCreateOrConnectWithoutWantedByInput
    connect?: SkillWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSkillsWantedNestedInput = {
    create?: XOR<UserCreateWithoutSkillsWantedInput, UserUncheckedCreateWithoutSkillsWantedInput>
    connectOrCreate?: UserCreateOrConnectWithoutSkillsWantedInput
    upsert?: UserUpsertWithoutSkillsWantedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSkillsWantedInput, UserUpdateWithoutSkillsWantedInput>, UserUncheckedUpdateWithoutSkillsWantedInput>
  }

  export type SkillUpdateOneRequiredWithoutWantedByNestedInput = {
    create?: XOR<SkillCreateWithoutWantedByInput, SkillUncheckedCreateWithoutWantedByInput>
    connectOrCreate?: SkillCreateOrConnectWithoutWantedByInput
    upsert?: SkillUpsertWithoutWantedByInput
    connect?: SkillWhereUniqueInput
    update?: XOR<XOR<SkillUpdateToOneWithWhereWithoutWantedByInput, SkillUpdateWithoutWantedByInput>, SkillUncheckedUpdateWithoutWantedByInput>
  }

  export type UserCreateNestedOneWithoutSentSwapRequestsInput = {
    create?: XOR<UserCreateWithoutSentSwapRequestsInput, UserUncheckedCreateWithoutSentSwapRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentSwapRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedSwapRequestsInput = {
    create?: XOR<UserCreateWithoutReceivedSwapRequestsInput, UserUncheckedCreateWithoutReceivedSwapRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedSwapRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type RatingCreateNestedManyWithoutSwapInput = {
    create?: XOR<RatingCreateWithoutSwapInput, RatingUncheckedCreateWithoutSwapInput> | RatingCreateWithoutSwapInput[] | RatingUncheckedCreateWithoutSwapInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutSwapInput | RatingCreateOrConnectWithoutSwapInput[]
    createMany?: RatingCreateManySwapInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutSwapInput = {
    create?: XOR<ReviewCreateWithoutSwapInput, ReviewUncheckedCreateWithoutSwapInput> | ReviewCreateWithoutSwapInput[] | ReviewUncheckedCreateWithoutSwapInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutSwapInput | ReviewCreateOrConnectWithoutSwapInput[]
    createMany?: ReviewCreateManySwapInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type RatingUncheckedCreateNestedManyWithoutSwapInput = {
    create?: XOR<RatingCreateWithoutSwapInput, RatingUncheckedCreateWithoutSwapInput> | RatingCreateWithoutSwapInput[] | RatingUncheckedCreateWithoutSwapInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutSwapInput | RatingCreateOrConnectWithoutSwapInput[]
    createMany?: RatingCreateManySwapInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutSwapInput = {
    create?: XOR<ReviewCreateWithoutSwapInput, ReviewUncheckedCreateWithoutSwapInput> | ReviewCreateWithoutSwapInput[] | ReviewUncheckedCreateWithoutSwapInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutSwapInput | ReviewCreateOrConnectWithoutSwapInput[]
    createMany?: ReviewCreateManySwapInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutSentSwapRequestsNestedInput = {
    create?: XOR<UserCreateWithoutSentSwapRequestsInput, UserUncheckedCreateWithoutSentSwapRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentSwapRequestsInput
    upsert?: UserUpsertWithoutSentSwapRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentSwapRequestsInput, UserUpdateWithoutSentSwapRequestsInput>, UserUncheckedUpdateWithoutSentSwapRequestsInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedSwapRequestsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedSwapRequestsInput, UserUncheckedCreateWithoutReceivedSwapRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedSwapRequestsInput
    upsert?: UserUpsertWithoutReceivedSwapRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedSwapRequestsInput, UserUpdateWithoutReceivedSwapRequestsInput>, UserUncheckedUpdateWithoutReceivedSwapRequestsInput>
  }

  export type RatingUpdateManyWithoutSwapNestedInput = {
    create?: XOR<RatingCreateWithoutSwapInput, RatingUncheckedCreateWithoutSwapInput> | RatingCreateWithoutSwapInput[] | RatingUncheckedCreateWithoutSwapInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutSwapInput | RatingCreateOrConnectWithoutSwapInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutSwapInput | RatingUpsertWithWhereUniqueWithoutSwapInput[]
    createMany?: RatingCreateManySwapInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutSwapInput | RatingUpdateWithWhereUniqueWithoutSwapInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutSwapInput | RatingUpdateManyWithWhereWithoutSwapInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutSwapNestedInput = {
    create?: XOR<ReviewCreateWithoutSwapInput, ReviewUncheckedCreateWithoutSwapInput> | ReviewCreateWithoutSwapInput[] | ReviewUncheckedCreateWithoutSwapInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutSwapInput | ReviewCreateOrConnectWithoutSwapInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutSwapInput | ReviewUpsertWithWhereUniqueWithoutSwapInput[]
    createMany?: ReviewCreateManySwapInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutSwapInput | ReviewUpdateWithWhereUniqueWithoutSwapInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutSwapInput | ReviewUpdateManyWithWhereWithoutSwapInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type RatingUncheckedUpdateManyWithoutSwapNestedInput = {
    create?: XOR<RatingCreateWithoutSwapInput, RatingUncheckedCreateWithoutSwapInput> | RatingCreateWithoutSwapInput[] | RatingUncheckedCreateWithoutSwapInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutSwapInput | RatingCreateOrConnectWithoutSwapInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutSwapInput | RatingUpsertWithWhereUniqueWithoutSwapInput[]
    createMany?: RatingCreateManySwapInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutSwapInput | RatingUpdateWithWhereUniqueWithoutSwapInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutSwapInput | RatingUpdateManyWithWhereWithoutSwapInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutSwapNestedInput = {
    create?: XOR<ReviewCreateWithoutSwapInput, ReviewUncheckedCreateWithoutSwapInput> | ReviewCreateWithoutSwapInput[] | ReviewUncheckedCreateWithoutSwapInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutSwapInput | ReviewCreateOrConnectWithoutSwapInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutSwapInput | ReviewUpsertWithWhereUniqueWithoutSwapInput[]
    createMany?: ReviewCreateManySwapInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutSwapInput | ReviewUpdateWithWhereUniqueWithoutSwapInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutSwapInput | ReviewUpdateManyWithWhereWithoutSwapInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRatingsInput = {
    create?: XOR<UserCreateWithoutRatingsInput, UserUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGivenRatingsInput = {
    create?: XOR<UserCreateWithoutGivenRatingsInput, UserUncheckedCreateWithoutGivenRatingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGivenRatingsInput
    connect?: UserWhereUniqueInput
  }

  export type SwapRequestCreateNestedOneWithoutRatingsInput = {
    create?: XOR<SwapRequestCreateWithoutRatingsInput, SwapRequestUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: SwapRequestCreateOrConnectWithoutRatingsInput
    connect?: SwapRequestWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutRatingsNestedInput = {
    create?: XOR<UserCreateWithoutRatingsInput, UserUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingsInput
    upsert?: UserUpsertWithoutRatingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRatingsInput, UserUpdateWithoutRatingsInput>, UserUncheckedUpdateWithoutRatingsInput>
  }

  export type UserUpdateOneRequiredWithoutGivenRatingsNestedInput = {
    create?: XOR<UserCreateWithoutGivenRatingsInput, UserUncheckedCreateWithoutGivenRatingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGivenRatingsInput
    upsert?: UserUpsertWithoutGivenRatingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGivenRatingsInput, UserUpdateWithoutGivenRatingsInput>, UserUncheckedUpdateWithoutGivenRatingsInput>
  }

  export type SwapRequestUpdateOneWithoutRatingsNestedInput = {
    create?: XOR<SwapRequestCreateWithoutRatingsInput, SwapRequestUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: SwapRequestCreateOrConnectWithoutRatingsInput
    upsert?: SwapRequestUpsertWithoutRatingsInput
    disconnect?: SwapRequestWhereInput | boolean
    delete?: SwapRequestWhereInput | boolean
    connect?: SwapRequestWhereUniqueInput
    update?: XOR<XOR<SwapRequestUpdateToOneWithWhereWithoutRatingsInput, SwapRequestUpdateWithoutRatingsInput>, SwapRequestUncheckedUpdateWithoutRatingsInput>
  }

  export type UserCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGivenReviewsInput = {
    create?: XOR<UserCreateWithoutGivenReviewsInput, UserUncheckedCreateWithoutGivenReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGivenReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type SwapRequestCreateNestedOneWithoutReviewsInput = {
    create?: XOR<SwapRequestCreateWithoutReviewsInput, SwapRequestUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: SwapRequestCreateOrConnectWithoutReviewsInput
    connect?: SwapRequestWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    upsert?: UserUpsertWithoutReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewsInput, UserUpdateWithoutReviewsInput>, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateOneRequiredWithoutGivenReviewsNestedInput = {
    create?: XOR<UserCreateWithoutGivenReviewsInput, UserUncheckedCreateWithoutGivenReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGivenReviewsInput
    upsert?: UserUpsertWithoutGivenReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGivenReviewsInput, UserUpdateWithoutGivenReviewsInput>, UserUncheckedUpdateWithoutGivenReviewsInput>
  }

  export type SwapRequestUpdateOneWithoutReviewsNestedInput = {
    create?: XOR<SwapRequestCreateWithoutReviewsInput, SwapRequestUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: SwapRequestCreateOrConnectWithoutReviewsInput
    upsert?: SwapRequestUpsertWithoutReviewsInput
    disconnect?: SwapRequestWhereInput | boolean
    delete?: SwapRequestWhereInput | boolean
    connect?: SwapRequestWhereUniqueInput
    update?: XOR<XOR<SwapRequestUpdateToOneWithWhereWithoutReviewsInput, SwapRequestUpdateWithoutReviewsInput>, SwapRequestUncheckedUpdateWithoutReviewsInput>
  }

  export type UserCreateNestedOneWithoutBroadcastMessagesInput = {
    create?: XOR<UserCreateWithoutBroadcastMessagesInput, UserUncheckedCreateWithoutBroadcastMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBroadcastMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBroadcastMessagesNestedInput = {
    create?: XOR<UserCreateWithoutBroadcastMessagesInput, UserUncheckedCreateWithoutBroadcastMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBroadcastMessagesInput
    upsert?: UserUpsertWithoutBroadcastMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBroadcastMessagesInput, UserUpdateWithoutBroadcastMessagesInput>, UserUncheckedUpdateWithoutBroadcastMessagesInput>
  }

  export type UserCreateNestedOneWithoutAdminLogsInput = {
    create?: XOR<UserCreateWithoutAdminLogsInput, UserUncheckedCreateWithoutAdminLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAdminLogsNestedInput = {
    create?: XOR<UserCreateWithoutAdminLogsInput, UserUncheckedCreateWithoutAdminLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminLogsInput
    upsert?: UserUpsertWithoutAdminLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminLogsInput, UserUpdateWithoutAdminLogsInput>, UserUncheckedUpdateWithoutAdminLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserSkillsOfferedCreateWithoutUserInput = {
    id?: string
    skill: SkillCreateNestedOneWithoutOfferedByInput
  }

  export type UserSkillsOfferedUncheckedCreateWithoutUserInput = {
    id?: string
    skillId: string
  }

  export type UserSkillsOfferedCreateOrConnectWithoutUserInput = {
    where: UserSkillsOfferedWhereUniqueInput
    create: XOR<UserSkillsOfferedCreateWithoutUserInput, UserSkillsOfferedUncheckedCreateWithoutUserInput>
  }

  export type UserSkillsOfferedCreateManyUserInputEnvelope = {
    data: UserSkillsOfferedCreateManyUserInput | UserSkillsOfferedCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserSkillsWantedCreateWithoutUserInput = {
    id?: string
    skill: SkillCreateNestedOneWithoutWantedByInput
  }

  export type UserSkillsWantedUncheckedCreateWithoutUserInput = {
    id?: string
    skillId: string
  }

  export type UserSkillsWantedCreateOrConnectWithoutUserInput = {
    where: UserSkillsWantedWhereUniqueInput
    create: XOR<UserSkillsWantedCreateWithoutUserInput, UserSkillsWantedUncheckedCreateWithoutUserInput>
  }

  export type UserSkillsWantedCreateManyUserInputEnvelope = {
    data: UserSkillsWantedCreateManyUserInput | UserSkillsWantedCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RatingCreateWithoutUserInput = {
    id?: string
    role: string
    stars: number
    givenBy: UserCreateNestedOneWithoutGivenRatingsInput
    swap?: SwapRequestCreateNestedOneWithoutRatingsInput
  }

  export type RatingUncheckedCreateWithoutUserInput = {
    id?: string
    givenById: string
    role: string
    stars: number
    swapId?: string | null
  }

  export type RatingCreateOrConnectWithoutUserInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput>
  }

  export type RatingCreateManyUserInputEnvelope = {
    data: RatingCreateManyUserInput | RatingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutUserInput = {
    id?: string
    role: string
    comment: string
    createdAt?: Date | string
    givenBy: UserCreateNestedOneWithoutGivenReviewsInput
    swap?: SwapRequestCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutUserInput = {
    id?: string
    givenById: string
    role: string
    comment: string
    swapId?: string | null
    createdAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutUserInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewCreateManyUserInputEnvelope = {
    data: ReviewCreateManyUserInput | ReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SwapRequestCreateWithoutFromUserInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    toUser: UserCreateNestedOneWithoutReceivedSwapRequestsInput
    ratings?: RatingCreateNestedManyWithoutSwapInput
    reviews?: ReviewCreateNestedManyWithoutSwapInput
  }

  export type SwapRequestUncheckedCreateWithoutFromUserInput = {
    id?: string
    toUserId: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ratings?: RatingUncheckedCreateNestedManyWithoutSwapInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutSwapInput
  }

  export type SwapRequestCreateOrConnectWithoutFromUserInput = {
    where: SwapRequestWhereUniqueInput
    create: XOR<SwapRequestCreateWithoutFromUserInput, SwapRequestUncheckedCreateWithoutFromUserInput>
  }

  export type SwapRequestCreateManyFromUserInputEnvelope = {
    data: SwapRequestCreateManyFromUserInput | SwapRequestCreateManyFromUserInput[]
    skipDuplicates?: boolean
  }

  export type SwapRequestCreateWithoutToUserInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromUser: UserCreateNestedOneWithoutSentSwapRequestsInput
    ratings?: RatingCreateNestedManyWithoutSwapInput
    reviews?: ReviewCreateNestedManyWithoutSwapInput
  }

  export type SwapRequestUncheckedCreateWithoutToUserInput = {
    id?: string
    fromUserId: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ratings?: RatingUncheckedCreateNestedManyWithoutSwapInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutSwapInput
  }

  export type SwapRequestCreateOrConnectWithoutToUserInput = {
    where: SwapRequestWhereUniqueInput
    create: XOR<SwapRequestCreateWithoutToUserInput, SwapRequestUncheckedCreateWithoutToUserInput>
  }

  export type SwapRequestCreateManyToUserInputEnvelope = {
    data: SwapRequestCreateManyToUserInput | SwapRequestCreateManyToUserInput[]
    skipDuplicates?: boolean
  }

  export type RatingCreateWithoutGivenByInput = {
    id?: string
    role: string
    stars: number
    user: UserCreateNestedOneWithoutRatingsInput
    swap?: SwapRequestCreateNestedOneWithoutRatingsInput
  }

  export type RatingUncheckedCreateWithoutGivenByInput = {
    id?: string
    userId: string
    role: string
    stars: number
    swapId?: string | null
  }

  export type RatingCreateOrConnectWithoutGivenByInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutGivenByInput, RatingUncheckedCreateWithoutGivenByInput>
  }

  export type RatingCreateManyGivenByInputEnvelope = {
    data: RatingCreateManyGivenByInput | RatingCreateManyGivenByInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutGivenByInput = {
    id?: string
    role: string
    comment: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReviewsInput
    swap?: SwapRequestCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutGivenByInput = {
    id?: string
    userId: string
    role: string
    comment: string
    swapId?: string | null
    createdAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutGivenByInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutGivenByInput, ReviewUncheckedCreateWithoutGivenByInput>
  }

  export type ReviewCreateManyGivenByInputEnvelope = {
    data: ReviewCreateManyGivenByInput | ReviewCreateManyGivenByInput[]
    skipDuplicates?: boolean
  }

  export type BroadcastMessageCreateWithoutSentByInput = {
    id?: string
    message: string
    createdAt?: Date | string
  }

  export type BroadcastMessageUncheckedCreateWithoutSentByInput = {
    id?: string
    message: string
    createdAt?: Date | string
  }

  export type BroadcastMessageCreateOrConnectWithoutSentByInput = {
    where: BroadcastMessageWhereUniqueInput
    create: XOR<BroadcastMessageCreateWithoutSentByInput, BroadcastMessageUncheckedCreateWithoutSentByInput>
  }

  export type BroadcastMessageCreateManySentByInputEnvelope = {
    data: BroadcastMessageCreateManySentByInput | BroadcastMessageCreateManySentByInput[]
    skipDuplicates?: boolean
  }

  export type AdminLogCreateWithoutAdminInput = {
    id?: string
    action: string
    targetId?: string | null
    createdAt?: Date | string
  }

  export type AdminLogUncheckedCreateWithoutAdminInput = {
    id?: string
    action: string
    targetId?: string | null
    createdAt?: Date | string
  }

  export type AdminLogCreateOrConnectWithoutAdminInput = {
    where: AdminLogWhereUniqueInput
    create: XOR<AdminLogCreateWithoutAdminInput, AdminLogUncheckedCreateWithoutAdminInput>
  }

  export type AdminLogCreateManyAdminInputEnvelope = {
    data: AdminLogCreateManyAdminInput | AdminLogCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type UserSkillsOfferedUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSkillsOfferedWhereUniqueInput
    update: XOR<UserSkillsOfferedUpdateWithoutUserInput, UserSkillsOfferedUncheckedUpdateWithoutUserInput>
    create: XOR<UserSkillsOfferedCreateWithoutUserInput, UserSkillsOfferedUncheckedCreateWithoutUserInput>
  }

  export type UserSkillsOfferedUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSkillsOfferedWhereUniqueInput
    data: XOR<UserSkillsOfferedUpdateWithoutUserInput, UserSkillsOfferedUncheckedUpdateWithoutUserInput>
  }

  export type UserSkillsOfferedUpdateManyWithWhereWithoutUserInput = {
    where: UserSkillsOfferedScalarWhereInput
    data: XOR<UserSkillsOfferedUpdateManyMutationInput, UserSkillsOfferedUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSkillsOfferedScalarWhereInput = {
    AND?: UserSkillsOfferedScalarWhereInput | UserSkillsOfferedScalarWhereInput[]
    OR?: UserSkillsOfferedScalarWhereInput[]
    NOT?: UserSkillsOfferedScalarWhereInput | UserSkillsOfferedScalarWhereInput[]
    id?: StringFilter<"UserSkillsOffered"> | string
    userId?: StringFilter<"UserSkillsOffered"> | string
    skillId?: StringFilter<"UserSkillsOffered"> | string
  }

  export type UserSkillsWantedUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSkillsWantedWhereUniqueInput
    update: XOR<UserSkillsWantedUpdateWithoutUserInput, UserSkillsWantedUncheckedUpdateWithoutUserInput>
    create: XOR<UserSkillsWantedCreateWithoutUserInput, UserSkillsWantedUncheckedCreateWithoutUserInput>
  }

  export type UserSkillsWantedUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSkillsWantedWhereUniqueInput
    data: XOR<UserSkillsWantedUpdateWithoutUserInput, UserSkillsWantedUncheckedUpdateWithoutUserInput>
  }

  export type UserSkillsWantedUpdateManyWithWhereWithoutUserInput = {
    where: UserSkillsWantedScalarWhereInput
    data: XOR<UserSkillsWantedUpdateManyMutationInput, UserSkillsWantedUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSkillsWantedScalarWhereInput = {
    AND?: UserSkillsWantedScalarWhereInput | UserSkillsWantedScalarWhereInput[]
    OR?: UserSkillsWantedScalarWhereInput[]
    NOT?: UserSkillsWantedScalarWhereInput | UserSkillsWantedScalarWhereInput[]
    id?: StringFilter<"UserSkillsWanted"> | string
    userId?: StringFilter<"UserSkillsWanted"> | string
    skillId?: StringFilter<"UserSkillsWanted"> | string
  }

  export type RatingUpsertWithWhereUniqueWithoutUserInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutUserInput, RatingUncheckedUpdateWithoutUserInput>
    create: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutUserInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutUserInput, RatingUncheckedUpdateWithoutUserInput>
  }

  export type RatingUpdateManyWithWhereWithoutUserInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutUserInput>
  }

  export type RatingScalarWhereInput = {
    AND?: RatingScalarWhereInput | RatingScalarWhereInput[]
    OR?: RatingScalarWhereInput[]
    NOT?: RatingScalarWhereInput | RatingScalarWhereInput[]
    id?: StringFilter<"Rating"> | string
    userId?: StringFilter<"Rating"> | string
    givenById?: StringFilter<"Rating"> | string
    role?: StringFilter<"Rating"> | string
    stars?: IntFilter<"Rating"> | number
    swapId?: StringNullableFilter<"Rating"> | string | null
  }

  export type ReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithWhereWithoutUserInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: StringFilter<"Review"> | string
    userId?: StringFilter<"Review"> | string
    givenById?: StringFilter<"Review"> | string
    role?: StringFilter<"Review"> | string
    comment?: StringFilter<"Review"> | string
    swapId?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
  }

  export type SwapRequestUpsertWithWhereUniqueWithoutFromUserInput = {
    where: SwapRequestWhereUniqueInput
    update: XOR<SwapRequestUpdateWithoutFromUserInput, SwapRequestUncheckedUpdateWithoutFromUserInput>
    create: XOR<SwapRequestCreateWithoutFromUserInput, SwapRequestUncheckedCreateWithoutFromUserInput>
  }

  export type SwapRequestUpdateWithWhereUniqueWithoutFromUserInput = {
    where: SwapRequestWhereUniqueInput
    data: XOR<SwapRequestUpdateWithoutFromUserInput, SwapRequestUncheckedUpdateWithoutFromUserInput>
  }

  export type SwapRequestUpdateManyWithWhereWithoutFromUserInput = {
    where: SwapRequestScalarWhereInput
    data: XOR<SwapRequestUpdateManyMutationInput, SwapRequestUncheckedUpdateManyWithoutFromUserInput>
  }

  export type SwapRequestScalarWhereInput = {
    AND?: SwapRequestScalarWhereInput | SwapRequestScalarWhereInput[]
    OR?: SwapRequestScalarWhereInput[]
    NOT?: SwapRequestScalarWhereInput | SwapRequestScalarWhereInput[]
    id?: StringFilter<"SwapRequest"> | string
    fromUserId?: StringFilter<"SwapRequest"> | string
    toUserId?: StringFilter<"SwapRequest"> | string
    status?: StringFilter<"SwapRequest"> | string
    createdAt?: DateTimeFilter<"SwapRequest"> | Date | string
    updatedAt?: DateTimeFilter<"SwapRequest"> | Date | string
  }

  export type SwapRequestUpsertWithWhereUniqueWithoutToUserInput = {
    where: SwapRequestWhereUniqueInput
    update: XOR<SwapRequestUpdateWithoutToUserInput, SwapRequestUncheckedUpdateWithoutToUserInput>
    create: XOR<SwapRequestCreateWithoutToUserInput, SwapRequestUncheckedCreateWithoutToUserInput>
  }

  export type SwapRequestUpdateWithWhereUniqueWithoutToUserInput = {
    where: SwapRequestWhereUniqueInput
    data: XOR<SwapRequestUpdateWithoutToUserInput, SwapRequestUncheckedUpdateWithoutToUserInput>
  }

  export type SwapRequestUpdateManyWithWhereWithoutToUserInput = {
    where: SwapRequestScalarWhereInput
    data: XOR<SwapRequestUpdateManyMutationInput, SwapRequestUncheckedUpdateManyWithoutToUserInput>
  }

  export type RatingUpsertWithWhereUniqueWithoutGivenByInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutGivenByInput, RatingUncheckedUpdateWithoutGivenByInput>
    create: XOR<RatingCreateWithoutGivenByInput, RatingUncheckedCreateWithoutGivenByInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutGivenByInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutGivenByInput, RatingUncheckedUpdateWithoutGivenByInput>
  }

  export type RatingUpdateManyWithWhereWithoutGivenByInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutGivenByInput>
  }

  export type ReviewUpsertWithWhereUniqueWithoutGivenByInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutGivenByInput, ReviewUncheckedUpdateWithoutGivenByInput>
    create: XOR<ReviewCreateWithoutGivenByInput, ReviewUncheckedCreateWithoutGivenByInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutGivenByInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutGivenByInput, ReviewUncheckedUpdateWithoutGivenByInput>
  }

  export type ReviewUpdateManyWithWhereWithoutGivenByInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutGivenByInput>
  }

  export type BroadcastMessageUpsertWithWhereUniqueWithoutSentByInput = {
    where: BroadcastMessageWhereUniqueInput
    update: XOR<BroadcastMessageUpdateWithoutSentByInput, BroadcastMessageUncheckedUpdateWithoutSentByInput>
    create: XOR<BroadcastMessageCreateWithoutSentByInput, BroadcastMessageUncheckedCreateWithoutSentByInput>
  }

  export type BroadcastMessageUpdateWithWhereUniqueWithoutSentByInput = {
    where: BroadcastMessageWhereUniqueInput
    data: XOR<BroadcastMessageUpdateWithoutSentByInput, BroadcastMessageUncheckedUpdateWithoutSentByInput>
  }

  export type BroadcastMessageUpdateManyWithWhereWithoutSentByInput = {
    where: BroadcastMessageScalarWhereInput
    data: XOR<BroadcastMessageUpdateManyMutationInput, BroadcastMessageUncheckedUpdateManyWithoutSentByInput>
  }

  export type BroadcastMessageScalarWhereInput = {
    AND?: BroadcastMessageScalarWhereInput | BroadcastMessageScalarWhereInput[]
    OR?: BroadcastMessageScalarWhereInput[]
    NOT?: BroadcastMessageScalarWhereInput | BroadcastMessageScalarWhereInput[]
    id?: StringFilter<"BroadcastMessage"> | string
    message?: StringFilter<"BroadcastMessage"> | string
    createdAt?: DateTimeFilter<"BroadcastMessage"> | Date | string
    sentById?: StringFilter<"BroadcastMessage"> | string
  }

  export type AdminLogUpsertWithWhereUniqueWithoutAdminInput = {
    where: AdminLogWhereUniqueInput
    update: XOR<AdminLogUpdateWithoutAdminInput, AdminLogUncheckedUpdateWithoutAdminInput>
    create: XOR<AdminLogCreateWithoutAdminInput, AdminLogUncheckedCreateWithoutAdminInput>
  }

  export type AdminLogUpdateWithWhereUniqueWithoutAdminInput = {
    where: AdminLogWhereUniqueInput
    data: XOR<AdminLogUpdateWithoutAdminInput, AdminLogUncheckedUpdateWithoutAdminInput>
  }

  export type AdminLogUpdateManyWithWhereWithoutAdminInput = {
    where: AdminLogScalarWhereInput
    data: XOR<AdminLogUpdateManyMutationInput, AdminLogUncheckedUpdateManyWithoutAdminInput>
  }

  export type AdminLogScalarWhereInput = {
    AND?: AdminLogScalarWhereInput | AdminLogScalarWhereInput[]
    OR?: AdminLogScalarWhereInput[]
    NOT?: AdminLogScalarWhereInput | AdminLogScalarWhereInput[]
    id?: StringFilter<"AdminLog"> | string
    adminId?: StringFilter<"AdminLog"> | string
    action?: StringFilter<"AdminLog"> | string
    targetId?: StringNullableFilter<"AdminLog"> | string | null
    createdAt?: DateTimeFilter<"AdminLog"> | Date | string
  }

  export type UserSkillsOfferedCreateWithoutSkillInput = {
    id?: string
    user: UserCreateNestedOneWithoutSkillsOfferedInput
  }

  export type UserSkillsOfferedUncheckedCreateWithoutSkillInput = {
    id?: string
    userId: string
  }

  export type UserSkillsOfferedCreateOrConnectWithoutSkillInput = {
    where: UserSkillsOfferedWhereUniqueInput
    create: XOR<UserSkillsOfferedCreateWithoutSkillInput, UserSkillsOfferedUncheckedCreateWithoutSkillInput>
  }

  export type UserSkillsOfferedCreateManySkillInputEnvelope = {
    data: UserSkillsOfferedCreateManySkillInput | UserSkillsOfferedCreateManySkillInput[]
    skipDuplicates?: boolean
  }

  export type UserSkillsWantedCreateWithoutSkillInput = {
    id?: string
    user: UserCreateNestedOneWithoutSkillsWantedInput
  }

  export type UserSkillsWantedUncheckedCreateWithoutSkillInput = {
    id?: string
    userId: string
  }

  export type UserSkillsWantedCreateOrConnectWithoutSkillInput = {
    where: UserSkillsWantedWhereUniqueInput
    create: XOR<UserSkillsWantedCreateWithoutSkillInput, UserSkillsWantedUncheckedCreateWithoutSkillInput>
  }

  export type UserSkillsWantedCreateManySkillInputEnvelope = {
    data: UserSkillsWantedCreateManySkillInput | UserSkillsWantedCreateManySkillInput[]
    skipDuplicates?: boolean
  }

  export type UserSkillsOfferedUpsertWithWhereUniqueWithoutSkillInput = {
    where: UserSkillsOfferedWhereUniqueInput
    update: XOR<UserSkillsOfferedUpdateWithoutSkillInput, UserSkillsOfferedUncheckedUpdateWithoutSkillInput>
    create: XOR<UserSkillsOfferedCreateWithoutSkillInput, UserSkillsOfferedUncheckedCreateWithoutSkillInput>
  }

  export type UserSkillsOfferedUpdateWithWhereUniqueWithoutSkillInput = {
    where: UserSkillsOfferedWhereUniqueInput
    data: XOR<UserSkillsOfferedUpdateWithoutSkillInput, UserSkillsOfferedUncheckedUpdateWithoutSkillInput>
  }

  export type UserSkillsOfferedUpdateManyWithWhereWithoutSkillInput = {
    where: UserSkillsOfferedScalarWhereInput
    data: XOR<UserSkillsOfferedUpdateManyMutationInput, UserSkillsOfferedUncheckedUpdateManyWithoutSkillInput>
  }

  export type UserSkillsWantedUpsertWithWhereUniqueWithoutSkillInput = {
    where: UserSkillsWantedWhereUniqueInput
    update: XOR<UserSkillsWantedUpdateWithoutSkillInput, UserSkillsWantedUncheckedUpdateWithoutSkillInput>
    create: XOR<UserSkillsWantedCreateWithoutSkillInput, UserSkillsWantedUncheckedCreateWithoutSkillInput>
  }

  export type UserSkillsWantedUpdateWithWhereUniqueWithoutSkillInput = {
    where: UserSkillsWantedWhereUniqueInput
    data: XOR<UserSkillsWantedUpdateWithoutSkillInput, UserSkillsWantedUncheckedUpdateWithoutSkillInput>
  }

  export type UserSkillsWantedUpdateManyWithWhereWithoutSkillInput = {
    where: UserSkillsWantedScalarWhereInput
    data: XOR<UserSkillsWantedUpdateManyMutationInput, UserSkillsWantedUncheckedUpdateManyWithoutSkillInput>
  }

  export type UserCreateWithoutSkillsOfferedInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsWanted?: UserSkillsWantedCreateNestedManyWithoutUserInput
    ratings?: RatingCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestCreateNestedManyWithoutFromUserInput
    receivedSwapRequests?: SwapRequestCreateNestedManyWithoutToUserInput
    givenRatings?: RatingCreateNestedManyWithoutGivenByInput
    givenReviews?: ReviewCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageCreateNestedManyWithoutSentByInput
    adminLogs?: AdminLogCreateNestedManyWithoutAdminInput
  }

  export type UserUncheckedCreateWithoutSkillsOfferedInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsWanted?: UserSkillsWantedUncheckedCreateNestedManyWithoutUserInput
    ratings?: RatingUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutFromUserInput
    receivedSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutToUserInput
    givenRatings?: RatingUncheckedCreateNestedManyWithoutGivenByInput
    givenReviews?: ReviewUncheckedCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageUncheckedCreateNestedManyWithoutSentByInput
    adminLogs?: AdminLogUncheckedCreateNestedManyWithoutAdminInput
  }

  export type UserCreateOrConnectWithoutSkillsOfferedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSkillsOfferedInput, UserUncheckedCreateWithoutSkillsOfferedInput>
  }

  export type SkillCreateWithoutOfferedByInput = {
    id?: string
    name: string
    status: string
    wantedBy?: UserSkillsWantedCreateNestedManyWithoutSkillInput
  }

  export type SkillUncheckedCreateWithoutOfferedByInput = {
    id?: string
    name: string
    status: string
    wantedBy?: UserSkillsWantedUncheckedCreateNestedManyWithoutSkillInput
  }

  export type SkillCreateOrConnectWithoutOfferedByInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutOfferedByInput, SkillUncheckedCreateWithoutOfferedByInput>
  }

  export type UserUpsertWithoutSkillsOfferedInput = {
    update: XOR<UserUpdateWithoutSkillsOfferedInput, UserUncheckedUpdateWithoutSkillsOfferedInput>
    create: XOR<UserCreateWithoutSkillsOfferedInput, UserUncheckedCreateWithoutSkillsOfferedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSkillsOfferedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSkillsOfferedInput, UserUncheckedUpdateWithoutSkillsOfferedInput>
  }

  export type UserUpdateWithoutSkillsOfferedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsWanted?: UserSkillsWantedUpdateManyWithoutUserNestedInput
    ratings?: RatingUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUpdateManyWithoutFromUserNestedInput
    receivedSwapRequests?: SwapRequestUpdateManyWithoutToUserNestedInput
    givenRatings?: RatingUpdateManyWithoutGivenByNestedInput
    givenReviews?: ReviewUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUpdateManyWithoutSentByNestedInput
    adminLogs?: AdminLogUpdateManyWithoutAdminNestedInput
  }

  export type UserUncheckedUpdateWithoutSkillsOfferedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsWanted?: UserSkillsWantedUncheckedUpdateManyWithoutUserNestedInput
    ratings?: RatingUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUncheckedUpdateManyWithoutFromUserNestedInput
    receivedSwapRequests?: SwapRequestUncheckedUpdateManyWithoutToUserNestedInput
    givenRatings?: RatingUncheckedUpdateManyWithoutGivenByNestedInput
    givenReviews?: ReviewUncheckedUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUncheckedUpdateManyWithoutSentByNestedInput
    adminLogs?: AdminLogUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type SkillUpsertWithoutOfferedByInput = {
    update: XOR<SkillUpdateWithoutOfferedByInput, SkillUncheckedUpdateWithoutOfferedByInput>
    create: XOR<SkillCreateWithoutOfferedByInput, SkillUncheckedCreateWithoutOfferedByInput>
    where?: SkillWhereInput
  }

  export type SkillUpdateToOneWithWhereWithoutOfferedByInput = {
    where?: SkillWhereInput
    data: XOR<SkillUpdateWithoutOfferedByInput, SkillUncheckedUpdateWithoutOfferedByInput>
  }

  export type SkillUpdateWithoutOfferedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    wantedBy?: UserSkillsWantedUpdateManyWithoutSkillNestedInput
  }

  export type SkillUncheckedUpdateWithoutOfferedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    wantedBy?: UserSkillsWantedUncheckedUpdateManyWithoutSkillNestedInput
  }

  export type UserCreateWithoutSkillsWantedInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedCreateNestedManyWithoutUserInput
    ratings?: RatingCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestCreateNestedManyWithoutFromUserInput
    receivedSwapRequests?: SwapRequestCreateNestedManyWithoutToUserInput
    givenRatings?: RatingCreateNestedManyWithoutGivenByInput
    givenReviews?: ReviewCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageCreateNestedManyWithoutSentByInput
    adminLogs?: AdminLogCreateNestedManyWithoutAdminInput
  }

  export type UserUncheckedCreateWithoutSkillsWantedInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedUncheckedCreateNestedManyWithoutUserInput
    ratings?: RatingUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutFromUserInput
    receivedSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutToUserInput
    givenRatings?: RatingUncheckedCreateNestedManyWithoutGivenByInput
    givenReviews?: ReviewUncheckedCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageUncheckedCreateNestedManyWithoutSentByInput
    adminLogs?: AdminLogUncheckedCreateNestedManyWithoutAdminInput
  }

  export type UserCreateOrConnectWithoutSkillsWantedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSkillsWantedInput, UserUncheckedCreateWithoutSkillsWantedInput>
  }

  export type SkillCreateWithoutWantedByInput = {
    id?: string
    name: string
    status: string
    offeredBy?: UserSkillsOfferedCreateNestedManyWithoutSkillInput
  }

  export type SkillUncheckedCreateWithoutWantedByInput = {
    id?: string
    name: string
    status: string
    offeredBy?: UserSkillsOfferedUncheckedCreateNestedManyWithoutSkillInput
  }

  export type SkillCreateOrConnectWithoutWantedByInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutWantedByInput, SkillUncheckedCreateWithoutWantedByInput>
  }

  export type UserUpsertWithoutSkillsWantedInput = {
    update: XOR<UserUpdateWithoutSkillsWantedInput, UserUncheckedUpdateWithoutSkillsWantedInput>
    create: XOR<UserCreateWithoutSkillsWantedInput, UserUncheckedCreateWithoutSkillsWantedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSkillsWantedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSkillsWantedInput, UserUncheckedUpdateWithoutSkillsWantedInput>
  }

  export type UserUpdateWithoutSkillsWantedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUpdateManyWithoutUserNestedInput
    ratings?: RatingUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUpdateManyWithoutFromUserNestedInput
    receivedSwapRequests?: SwapRequestUpdateManyWithoutToUserNestedInput
    givenRatings?: RatingUpdateManyWithoutGivenByNestedInput
    givenReviews?: ReviewUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUpdateManyWithoutSentByNestedInput
    adminLogs?: AdminLogUpdateManyWithoutAdminNestedInput
  }

  export type UserUncheckedUpdateWithoutSkillsWantedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUncheckedUpdateManyWithoutUserNestedInput
    ratings?: RatingUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUncheckedUpdateManyWithoutFromUserNestedInput
    receivedSwapRequests?: SwapRequestUncheckedUpdateManyWithoutToUserNestedInput
    givenRatings?: RatingUncheckedUpdateManyWithoutGivenByNestedInput
    givenReviews?: ReviewUncheckedUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUncheckedUpdateManyWithoutSentByNestedInput
    adminLogs?: AdminLogUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type SkillUpsertWithoutWantedByInput = {
    update: XOR<SkillUpdateWithoutWantedByInput, SkillUncheckedUpdateWithoutWantedByInput>
    create: XOR<SkillCreateWithoutWantedByInput, SkillUncheckedCreateWithoutWantedByInput>
    where?: SkillWhereInput
  }

  export type SkillUpdateToOneWithWhereWithoutWantedByInput = {
    where?: SkillWhereInput
    data: XOR<SkillUpdateWithoutWantedByInput, SkillUncheckedUpdateWithoutWantedByInput>
  }

  export type SkillUpdateWithoutWantedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    offeredBy?: UserSkillsOfferedUpdateManyWithoutSkillNestedInput
  }

  export type SkillUncheckedUpdateWithoutWantedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    offeredBy?: UserSkillsOfferedUncheckedUpdateManyWithoutSkillNestedInput
  }

  export type UserCreateWithoutSentSwapRequestsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedCreateNestedManyWithoutUserInput
    skillsWanted?: UserSkillsWantedCreateNestedManyWithoutUserInput
    ratings?: RatingCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    receivedSwapRequests?: SwapRequestCreateNestedManyWithoutToUserInput
    givenRatings?: RatingCreateNestedManyWithoutGivenByInput
    givenReviews?: ReviewCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageCreateNestedManyWithoutSentByInput
    adminLogs?: AdminLogCreateNestedManyWithoutAdminInput
  }

  export type UserUncheckedCreateWithoutSentSwapRequestsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedUncheckedCreateNestedManyWithoutUserInput
    skillsWanted?: UserSkillsWantedUncheckedCreateNestedManyWithoutUserInput
    ratings?: RatingUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    receivedSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutToUserInput
    givenRatings?: RatingUncheckedCreateNestedManyWithoutGivenByInput
    givenReviews?: ReviewUncheckedCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageUncheckedCreateNestedManyWithoutSentByInput
    adminLogs?: AdminLogUncheckedCreateNestedManyWithoutAdminInput
  }

  export type UserCreateOrConnectWithoutSentSwapRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentSwapRequestsInput, UserUncheckedCreateWithoutSentSwapRequestsInput>
  }

  export type UserCreateWithoutReceivedSwapRequestsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedCreateNestedManyWithoutUserInput
    skillsWanted?: UserSkillsWantedCreateNestedManyWithoutUserInput
    ratings?: RatingCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestCreateNestedManyWithoutFromUserInput
    givenRatings?: RatingCreateNestedManyWithoutGivenByInput
    givenReviews?: ReviewCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageCreateNestedManyWithoutSentByInput
    adminLogs?: AdminLogCreateNestedManyWithoutAdminInput
  }

  export type UserUncheckedCreateWithoutReceivedSwapRequestsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedUncheckedCreateNestedManyWithoutUserInput
    skillsWanted?: UserSkillsWantedUncheckedCreateNestedManyWithoutUserInput
    ratings?: RatingUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutFromUserInput
    givenRatings?: RatingUncheckedCreateNestedManyWithoutGivenByInput
    givenReviews?: ReviewUncheckedCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageUncheckedCreateNestedManyWithoutSentByInput
    adminLogs?: AdminLogUncheckedCreateNestedManyWithoutAdminInput
  }

  export type UserCreateOrConnectWithoutReceivedSwapRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedSwapRequestsInput, UserUncheckedCreateWithoutReceivedSwapRequestsInput>
  }

  export type RatingCreateWithoutSwapInput = {
    id?: string
    role: string
    stars: number
    user: UserCreateNestedOneWithoutRatingsInput
    givenBy: UserCreateNestedOneWithoutGivenRatingsInput
  }

  export type RatingUncheckedCreateWithoutSwapInput = {
    id?: string
    userId: string
    givenById: string
    role: string
    stars: number
  }

  export type RatingCreateOrConnectWithoutSwapInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutSwapInput, RatingUncheckedCreateWithoutSwapInput>
  }

  export type RatingCreateManySwapInputEnvelope = {
    data: RatingCreateManySwapInput | RatingCreateManySwapInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutSwapInput = {
    id?: string
    role: string
    comment: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReviewsInput
    givenBy: UserCreateNestedOneWithoutGivenReviewsInput
  }

  export type ReviewUncheckedCreateWithoutSwapInput = {
    id?: string
    userId: string
    givenById: string
    role: string
    comment: string
    createdAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutSwapInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutSwapInput, ReviewUncheckedCreateWithoutSwapInput>
  }

  export type ReviewCreateManySwapInputEnvelope = {
    data: ReviewCreateManySwapInput | ReviewCreateManySwapInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSentSwapRequestsInput = {
    update: XOR<UserUpdateWithoutSentSwapRequestsInput, UserUncheckedUpdateWithoutSentSwapRequestsInput>
    create: XOR<UserCreateWithoutSentSwapRequestsInput, UserUncheckedCreateWithoutSentSwapRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentSwapRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentSwapRequestsInput, UserUncheckedUpdateWithoutSentSwapRequestsInput>
  }

  export type UserUpdateWithoutSentSwapRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUpdateManyWithoutUserNestedInput
    skillsWanted?: UserSkillsWantedUpdateManyWithoutUserNestedInput
    ratings?: RatingUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    receivedSwapRequests?: SwapRequestUpdateManyWithoutToUserNestedInput
    givenRatings?: RatingUpdateManyWithoutGivenByNestedInput
    givenReviews?: ReviewUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUpdateManyWithoutSentByNestedInput
    adminLogs?: AdminLogUpdateManyWithoutAdminNestedInput
  }

  export type UserUncheckedUpdateWithoutSentSwapRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUncheckedUpdateManyWithoutUserNestedInput
    skillsWanted?: UserSkillsWantedUncheckedUpdateManyWithoutUserNestedInput
    ratings?: RatingUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    receivedSwapRequests?: SwapRequestUncheckedUpdateManyWithoutToUserNestedInput
    givenRatings?: RatingUncheckedUpdateManyWithoutGivenByNestedInput
    givenReviews?: ReviewUncheckedUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUncheckedUpdateManyWithoutSentByNestedInput
    adminLogs?: AdminLogUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type UserUpsertWithoutReceivedSwapRequestsInput = {
    update: XOR<UserUpdateWithoutReceivedSwapRequestsInput, UserUncheckedUpdateWithoutReceivedSwapRequestsInput>
    create: XOR<UserCreateWithoutReceivedSwapRequestsInput, UserUncheckedCreateWithoutReceivedSwapRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedSwapRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedSwapRequestsInput, UserUncheckedUpdateWithoutReceivedSwapRequestsInput>
  }

  export type UserUpdateWithoutReceivedSwapRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUpdateManyWithoutUserNestedInput
    skillsWanted?: UserSkillsWantedUpdateManyWithoutUserNestedInput
    ratings?: RatingUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUpdateManyWithoutFromUserNestedInput
    givenRatings?: RatingUpdateManyWithoutGivenByNestedInput
    givenReviews?: ReviewUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUpdateManyWithoutSentByNestedInput
    adminLogs?: AdminLogUpdateManyWithoutAdminNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedSwapRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUncheckedUpdateManyWithoutUserNestedInput
    skillsWanted?: UserSkillsWantedUncheckedUpdateManyWithoutUserNestedInput
    ratings?: RatingUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUncheckedUpdateManyWithoutFromUserNestedInput
    givenRatings?: RatingUncheckedUpdateManyWithoutGivenByNestedInput
    givenReviews?: ReviewUncheckedUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUncheckedUpdateManyWithoutSentByNestedInput
    adminLogs?: AdminLogUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type RatingUpsertWithWhereUniqueWithoutSwapInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutSwapInput, RatingUncheckedUpdateWithoutSwapInput>
    create: XOR<RatingCreateWithoutSwapInput, RatingUncheckedCreateWithoutSwapInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutSwapInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutSwapInput, RatingUncheckedUpdateWithoutSwapInput>
  }

  export type RatingUpdateManyWithWhereWithoutSwapInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutSwapInput>
  }

  export type ReviewUpsertWithWhereUniqueWithoutSwapInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutSwapInput, ReviewUncheckedUpdateWithoutSwapInput>
    create: XOR<ReviewCreateWithoutSwapInput, ReviewUncheckedCreateWithoutSwapInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutSwapInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutSwapInput, ReviewUncheckedUpdateWithoutSwapInput>
  }

  export type ReviewUpdateManyWithWhereWithoutSwapInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutSwapInput>
  }

  export type UserCreateWithoutRatingsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedCreateNestedManyWithoutUserInput
    skillsWanted?: UserSkillsWantedCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestCreateNestedManyWithoutFromUserInput
    receivedSwapRequests?: SwapRequestCreateNestedManyWithoutToUserInput
    givenRatings?: RatingCreateNestedManyWithoutGivenByInput
    givenReviews?: ReviewCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageCreateNestedManyWithoutSentByInput
    adminLogs?: AdminLogCreateNestedManyWithoutAdminInput
  }

  export type UserUncheckedCreateWithoutRatingsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedUncheckedCreateNestedManyWithoutUserInput
    skillsWanted?: UserSkillsWantedUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutFromUserInput
    receivedSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutToUserInput
    givenRatings?: RatingUncheckedCreateNestedManyWithoutGivenByInput
    givenReviews?: ReviewUncheckedCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageUncheckedCreateNestedManyWithoutSentByInput
    adminLogs?: AdminLogUncheckedCreateNestedManyWithoutAdminInput
  }

  export type UserCreateOrConnectWithoutRatingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRatingsInput, UserUncheckedCreateWithoutRatingsInput>
  }

  export type UserCreateWithoutGivenRatingsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedCreateNestedManyWithoutUserInput
    skillsWanted?: UserSkillsWantedCreateNestedManyWithoutUserInput
    ratings?: RatingCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestCreateNestedManyWithoutFromUserInput
    receivedSwapRequests?: SwapRequestCreateNestedManyWithoutToUserInput
    givenReviews?: ReviewCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageCreateNestedManyWithoutSentByInput
    adminLogs?: AdminLogCreateNestedManyWithoutAdminInput
  }

  export type UserUncheckedCreateWithoutGivenRatingsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedUncheckedCreateNestedManyWithoutUserInput
    skillsWanted?: UserSkillsWantedUncheckedCreateNestedManyWithoutUserInput
    ratings?: RatingUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutFromUserInput
    receivedSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutToUserInput
    givenReviews?: ReviewUncheckedCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageUncheckedCreateNestedManyWithoutSentByInput
    adminLogs?: AdminLogUncheckedCreateNestedManyWithoutAdminInput
  }

  export type UserCreateOrConnectWithoutGivenRatingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGivenRatingsInput, UserUncheckedCreateWithoutGivenRatingsInput>
  }

  export type SwapRequestCreateWithoutRatingsInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromUser: UserCreateNestedOneWithoutSentSwapRequestsInput
    toUser: UserCreateNestedOneWithoutReceivedSwapRequestsInput
    reviews?: ReviewCreateNestedManyWithoutSwapInput
  }

  export type SwapRequestUncheckedCreateWithoutRatingsInput = {
    id?: string
    fromUserId: string
    toUserId: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reviews?: ReviewUncheckedCreateNestedManyWithoutSwapInput
  }

  export type SwapRequestCreateOrConnectWithoutRatingsInput = {
    where: SwapRequestWhereUniqueInput
    create: XOR<SwapRequestCreateWithoutRatingsInput, SwapRequestUncheckedCreateWithoutRatingsInput>
  }

  export type UserUpsertWithoutRatingsInput = {
    update: XOR<UserUpdateWithoutRatingsInput, UserUncheckedUpdateWithoutRatingsInput>
    create: XOR<UserCreateWithoutRatingsInput, UserUncheckedCreateWithoutRatingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRatingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRatingsInput, UserUncheckedUpdateWithoutRatingsInput>
  }

  export type UserUpdateWithoutRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUpdateManyWithoutUserNestedInput
    skillsWanted?: UserSkillsWantedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUpdateManyWithoutFromUserNestedInput
    receivedSwapRequests?: SwapRequestUpdateManyWithoutToUserNestedInput
    givenRatings?: RatingUpdateManyWithoutGivenByNestedInput
    givenReviews?: ReviewUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUpdateManyWithoutSentByNestedInput
    adminLogs?: AdminLogUpdateManyWithoutAdminNestedInput
  }

  export type UserUncheckedUpdateWithoutRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUncheckedUpdateManyWithoutUserNestedInput
    skillsWanted?: UserSkillsWantedUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUncheckedUpdateManyWithoutFromUserNestedInput
    receivedSwapRequests?: SwapRequestUncheckedUpdateManyWithoutToUserNestedInput
    givenRatings?: RatingUncheckedUpdateManyWithoutGivenByNestedInput
    givenReviews?: ReviewUncheckedUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUncheckedUpdateManyWithoutSentByNestedInput
    adminLogs?: AdminLogUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type UserUpsertWithoutGivenRatingsInput = {
    update: XOR<UserUpdateWithoutGivenRatingsInput, UserUncheckedUpdateWithoutGivenRatingsInput>
    create: XOR<UserCreateWithoutGivenRatingsInput, UserUncheckedCreateWithoutGivenRatingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGivenRatingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGivenRatingsInput, UserUncheckedUpdateWithoutGivenRatingsInput>
  }

  export type UserUpdateWithoutGivenRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUpdateManyWithoutUserNestedInput
    skillsWanted?: UserSkillsWantedUpdateManyWithoutUserNestedInput
    ratings?: RatingUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUpdateManyWithoutFromUserNestedInput
    receivedSwapRequests?: SwapRequestUpdateManyWithoutToUserNestedInput
    givenReviews?: ReviewUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUpdateManyWithoutSentByNestedInput
    adminLogs?: AdminLogUpdateManyWithoutAdminNestedInput
  }

  export type UserUncheckedUpdateWithoutGivenRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUncheckedUpdateManyWithoutUserNestedInput
    skillsWanted?: UserSkillsWantedUncheckedUpdateManyWithoutUserNestedInput
    ratings?: RatingUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUncheckedUpdateManyWithoutFromUserNestedInput
    receivedSwapRequests?: SwapRequestUncheckedUpdateManyWithoutToUserNestedInput
    givenReviews?: ReviewUncheckedUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUncheckedUpdateManyWithoutSentByNestedInput
    adminLogs?: AdminLogUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type SwapRequestUpsertWithoutRatingsInput = {
    update: XOR<SwapRequestUpdateWithoutRatingsInput, SwapRequestUncheckedUpdateWithoutRatingsInput>
    create: XOR<SwapRequestCreateWithoutRatingsInput, SwapRequestUncheckedCreateWithoutRatingsInput>
    where?: SwapRequestWhereInput
  }

  export type SwapRequestUpdateToOneWithWhereWithoutRatingsInput = {
    where?: SwapRequestWhereInput
    data: XOR<SwapRequestUpdateWithoutRatingsInput, SwapRequestUncheckedUpdateWithoutRatingsInput>
  }

  export type SwapRequestUpdateWithoutRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromUser?: UserUpdateOneRequiredWithoutSentSwapRequestsNestedInput
    toUser?: UserUpdateOneRequiredWithoutReceivedSwapRequestsNestedInput
    reviews?: ReviewUpdateManyWithoutSwapNestedInput
  }

  export type SwapRequestUncheckedUpdateWithoutRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromUserId?: StringFieldUpdateOperationsInput | string
    toUserId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewUncheckedUpdateManyWithoutSwapNestedInput
  }

  export type UserCreateWithoutReviewsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedCreateNestedManyWithoutUserInput
    skillsWanted?: UserSkillsWantedCreateNestedManyWithoutUserInput
    ratings?: RatingCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestCreateNestedManyWithoutFromUserInput
    receivedSwapRequests?: SwapRequestCreateNestedManyWithoutToUserInput
    givenRatings?: RatingCreateNestedManyWithoutGivenByInput
    givenReviews?: ReviewCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageCreateNestedManyWithoutSentByInput
    adminLogs?: AdminLogCreateNestedManyWithoutAdminInput
  }

  export type UserUncheckedCreateWithoutReviewsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedUncheckedCreateNestedManyWithoutUserInput
    skillsWanted?: UserSkillsWantedUncheckedCreateNestedManyWithoutUserInput
    ratings?: RatingUncheckedCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutFromUserInput
    receivedSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutToUserInput
    givenRatings?: RatingUncheckedCreateNestedManyWithoutGivenByInput
    givenReviews?: ReviewUncheckedCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageUncheckedCreateNestedManyWithoutSentByInput
    adminLogs?: AdminLogUncheckedCreateNestedManyWithoutAdminInput
  }

  export type UserCreateOrConnectWithoutReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
  }

  export type UserCreateWithoutGivenReviewsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedCreateNestedManyWithoutUserInput
    skillsWanted?: UserSkillsWantedCreateNestedManyWithoutUserInput
    ratings?: RatingCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestCreateNestedManyWithoutFromUserInput
    receivedSwapRequests?: SwapRequestCreateNestedManyWithoutToUserInput
    givenRatings?: RatingCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageCreateNestedManyWithoutSentByInput
    adminLogs?: AdminLogCreateNestedManyWithoutAdminInput
  }

  export type UserUncheckedCreateWithoutGivenReviewsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedUncheckedCreateNestedManyWithoutUserInput
    skillsWanted?: UserSkillsWantedUncheckedCreateNestedManyWithoutUserInput
    ratings?: RatingUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutFromUserInput
    receivedSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutToUserInput
    givenRatings?: RatingUncheckedCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageUncheckedCreateNestedManyWithoutSentByInput
    adminLogs?: AdminLogUncheckedCreateNestedManyWithoutAdminInput
  }

  export type UserCreateOrConnectWithoutGivenReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGivenReviewsInput, UserUncheckedCreateWithoutGivenReviewsInput>
  }

  export type SwapRequestCreateWithoutReviewsInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromUser: UserCreateNestedOneWithoutSentSwapRequestsInput
    toUser: UserCreateNestedOneWithoutReceivedSwapRequestsInput
    ratings?: RatingCreateNestedManyWithoutSwapInput
  }

  export type SwapRequestUncheckedCreateWithoutReviewsInput = {
    id?: string
    fromUserId: string
    toUserId: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ratings?: RatingUncheckedCreateNestedManyWithoutSwapInput
  }

  export type SwapRequestCreateOrConnectWithoutReviewsInput = {
    where: SwapRequestWhereUniqueInput
    create: XOR<SwapRequestCreateWithoutReviewsInput, SwapRequestUncheckedCreateWithoutReviewsInput>
  }

  export type UserUpsertWithoutReviewsInput = {
    update: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUpdateManyWithoutUserNestedInput
    skillsWanted?: UserSkillsWantedUpdateManyWithoutUserNestedInput
    ratings?: RatingUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUpdateManyWithoutFromUserNestedInput
    receivedSwapRequests?: SwapRequestUpdateManyWithoutToUserNestedInput
    givenRatings?: RatingUpdateManyWithoutGivenByNestedInput
    givenReviews?: ReviewUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUpdateManyWithoutSentByNestedInput
    adminLogs?: AdminLogUpdateManyWithoutAdminNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUncheckedUpdateManyWithoutUserNestedInput
    skillsWanted?: UserSkillsWantedUncheckedUpdateManyWithoutUserNestedInput
    ratings?: RatingUncheckedUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUncheckedUpdateManyWithoutFromUserNestedInput
    receivedSwapRequests?: SwapRequestUncheckedUpdateManyWithoutToUserNestedInput
    givenRatings?: RatingUncheckedUpdateManyWithoutGivenByNestedInput
    givenReviews?: ReviewUncheckedUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUncheckedUpdateManyWithoutSentByNestedInput
    adminLogs?: AdminLogUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type UserUpsertWithoutGivenReviewsInput = {
    update: XOR<UserUpdateWithoutGivenReviewsInput, UserUncheckedUpdateWithoutGivenReviewsInput>
    create: XOR<UserCreateWithoutGivenReviewsInput, UserUncheckedCreateWithoutGivenReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGivenReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGivenReviewsInput, UserUncheckedUpdateWithoutGivenReviewsInput>
  }

  export type UserUpdateWithoutGivenReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUpdateManyWithoutUserNestedInput
    skillsWanted?: UserSkillsWantedUpdateManyWithoutUserNestedInput
    ratings?: RatingUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUpdateManyWithoutFromUserNestedInput
    receivedSwapRequests?: SwapRequestUpdateManyWithoutToUserNestedInput
    givenRatings?: RatingUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUpdateManyWithoutSentByNestedInput
    adminLogs?: AdminLogUpdateManyWithoutAdminNestedInput
  }

  export type UserUncheckedUpdateWithoutGivenReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUncheckedUpdateManyWithoutUserNestedInput
    skillsWanted?: UserSkillsWantedUncheckedUpdateManyWithoutUserNestedInput
    ratings?: RatingUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUncheckedUpdateManyWithoutFromUserNestedInput
    receivedSwapRequests?: SwapRequestUncheckedUpdateManyWithoutToUserNestedInput
    givenRatings?: RatingUncheckedUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUncheckedUpdateManyWithoutSentByNestedInput
    adminLogs?: AdminLogUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type SwapRequestUpsertWithoutReviewsInput = {
    update: XOR<SwapRequestUpdateWithoutReviewsInput, SwapRequestUncheckedUpdateWithoutReviewsInput>
    create: XOR<SwapRequestCreateWithoutReviewsInput, SwapRequestUncheckedCreateWithoutReviewsInput>
    where?: SwapRequestWhereInput
  }

  export type SwapRequestUpdateToOneWithWhereWithoutReviewsInput = {
    where?: SwapRequestWhereInput
    data: XOR<SwapRequestUpdateWithoutReviewsInput, SwapRequestUncheckedUpdateWithoutReviewsInput>
  }

  export type SwapRequestUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromUser?: UserUpdateOneRequiredWithoutSentSwapRequestsNestedInput
    toUser?: UserUpdateOneRequiredWithoutReceivedSwapRequestsNestedInput
    ratings?: RatingUpdateManyWithoutSwapNestedInput
  }

  export type SwapRequestUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromUserId?: StringFieldUpdateOperationsInput | string
    toUserId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratings?: RatingUncheckedUpdateManyWithoutSwapNestedInput
  }

  export type UserCreateWithoutBroadcastMessagesInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedCreateNestedManyWithoutUserInput
    skillsWanted?: UserSkillsWantedCreateNestedManyWithoutUserInput
    ratings?: RatingCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestCreateNestedManyWithoutFromUserInput
    receivedSwapRequests?: SwapRequestCreateNestedManyWithoutToUserInput
    givenRatings?: RatingCreateNestedManyWithoutGivenByInput
    givenReviews?: ReviewCreateNestedManyWithoutGivenByInput
    adminLogs?: AdminLogCreateNestedManyWithoutAdminInput
  }

  export type UserUncheckedCreateWithoutBroadcastMessagesInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedUncheckedCreateNestedManyWithoutUserInput
    skillsWanted?: UserSkillsWantedUncheckedCreateNestedManyWithoutUserInput
    ratings?: RatingUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutFromUserInput
    receivedSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutToUserInput
    givenRatings?: RatingUncheckedCreateNestedManyWithoutGivenByInput
    givenReviews?: ReviewUncheckedCreateNestedManyWithoutGivenByInput
    adminLogs?: AdminLogUncheckedCreateNestedManyWithoutAdminInput
  }

  export type UserCreateOrConnectWithoutBroadcastMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBroadcastMessagesInput, UserUncheckedCreateWithoutBroadcastMessagesInput>
  }

  export type UserUpsertWithoutBroadcastMessagesInput = {
    update: XOR<UserUpdateWithoutBroadcastMessagesInput, UserUncheckedUpdateWithoutBroadcastMessagesInput>
    create: XOR<UserCreateWithoutBroadcastMessagesInput, UserUncheckedCreateWithoutBroadcastMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBroadcastMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBroadcastMessagesInput, UserUncheckedUpdateWithoutBroadcastMessagesInput>
  }

  export type UserUpdateWithoutBroadcastMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUpdateManyWithoutUserNestedInput
    skillsWanted?: UserSkillsWantedUpdateManyWithoutUserNestedInput
    ratings?: RatingUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUpdateManyWithoutFromUserNestedInput
    receivedSwapRequests?: SwapRequestUpdateManyWithoutToUserNestedInput
    givenRatings?: RatingUpdateManyWithoutGivenByNestedInput
    givenReviews?: ReviewUpdateManyWithoutGivenByNestedInput
    adminLogs?: AdminLogUpdateManyWithoutAdminNestedInput
  }

  export type UserUncheckedUpdateWithoutBroadcastMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUncheckedUpdateManyWithoutUserNestedInput
    skillsWanted?: UserSkillsWantedUncheckedUpdateManyWithoutUserNestedInput
    ratings?: RatingUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUncheckedUpdateManyWithoutFromUserNestedInput
    receivedSwapRequests?: SwapRequestUncheckedUpdateManyWithoutToUserNestedInput
    givenRatings?: RatingUncheckedUpdateManyWithoutGivenByNestedInput
    givenReviews?: ReviewUncheckedUpdateManyWithoutGivenByNestedInput
    adminLogs?: AdminLogUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type UserCreateWithoutAdminLogsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedCreateNestedManyWithoutUserInput
    skillsWanted?: UserSkillsWantedCreateNestedManyWithoutUserInput
    ratings?: RatingCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestCreateNestedManyWithoutFromUserInput
    receivedSwapRequests?: SwapRequestCreateNestedManyWithoutToUserInput
    givenRatings?: RatingCreateNestedManyWithoutGivenByInput
    givenReviews?: ReviewCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageCreateNestedManyWithoutSentByInput
  }

  export type UserUncheckedCreateWithoutAdminLogsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: string
    experience?: string | null
    projects?: string | null
    profilePhoto?: string | null
    location?: string | null
    availability?: string | null
    isPublic?: boolean
    banned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: UserSkillsOfferedUncheckedCreateNestedManyWithoutUserInput
    skillsWanted?: UserSkillsWantedUncheckedCreateNestedManyWithoutUserInput
    ratings?: RatingUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    sentSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutFromUserInput
    receivedSwapRequests?: SwapRequestUncheckedCreateNestedManyWithoutToUserInput
    givenRatings?: RatingUncheckedCreateNestedManyWithoutGivenByInput
    givenReviews?: ReviewUncheckedCreateNestedManyWithoutGivenByInput
    broadcastMessages?: BroadcastMessageUncheckedCreateNestedManyWithoutSentByInput
  }

  export type UserCreateOrConnectWithoutAdminLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminLogsInput, UserUncheckedCreateWithoutAdminLogsInput>
  }

  export type UserUpsertWithoutAdminLogsInput = {
    update: XOR<UserUpdateWithoutAdminLogsInput, UserUncheckedUpdateWithoutAdminLogsInput>
    create: XOR<UserCreateWithoutAdminLogsInput, UserUncheckedCreateWithoutAdminLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminLogsInput, UserUncheckedUpdateWithoutAdminLogsInput>
  }

  export type UserUpdateWithoutAdminLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUpdateManyWithoutUserNestedInput
    skillsWanted?: UserSkillsWantedUpdateManyWithoutUserNestedInput
    ratings?: RatingUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUpdateManyWithoutFromUserNestedInput
    receivedSwapRequests?: SwapRequestUpdateManyWithoutToUserNestedInput
    givenRatings?: RatingUpdateManyWithoutGivenByNestedInput
    givenReviews?: ReviewUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUpdateManyWithoutSentByNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    banned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: UserSkillsOfferedUncheckedUpdateManyWithoutUserNestedInput
    skillsWanted?: UserSkillsWantedUncheckedUpdateManyWithoutUserNestedInput
    ratings?: RatingUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    sentSwapRequests?: SwapRequestUncheckedUpdateManyWithoutFromUserNestedInput
    receivedSwapRequests?: SwapRequestUncheckedUpdateManyWithoutToUserNestedInput
    givenRatings?: RatingUncheckedUpdateManyWithoutGivenByNestedInput
    givenReviews?: ReviewUncheckedUpdateManyWithoutGivenByNestedInput
    broadcastMessages?: BroadcastMessageUncheckedUpdateManyWithoutSentByNestedInput
  }

  export type UserSkillsOfferedCreateManyUserInput = {
    id?: string
    skillId: string
  }

  export type UserSkillsWantedCreateManyUserInput = {
    id?: string
    skillId: string
  }

  export type RatingCreateManyUserInput = {
    id?: string
    givenById: string
    role: string
    stars: number
    swapId?: string | null
  }

  export type ReviewCreateManyUserInput = {
    id?: string
    givenById: string
    role: string
    comment: string
    swapId?: string | null
    createdAt?: Date | string
  }

  export type SwapRequestCreateManyFromUserInput = {
    id?: string
    toUserId: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SwapRequestCreateManyToUserInput = {
    id?: string
    fromUserId: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingCreateManyGivenByInput = {
    id?: string
    userId: string
    role: string
    stars: number
    swapId?: string | null
  }

  export type ReviewCreateManyGivenByInput = {
    id?: string
    userId: string
    role: string
    comment: string
    swapId?: string | null
    createdAt?: Date | string
  }

  export type BroadcastMessageCreateManySentByInput = {
    id?: string
    message: string
    createdAt?: Date | string
  }

  export type AdminLogCreateManyAdminInput = {
    id?: string
    action: string
    targetId?: string | null
    createdAt?: Date | string
  }

  export type UserSkillsOfferedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    skill?: SkillUpdateOneRequiredWithoutOfferedByNestedInput
  }

  export type UserSkillsOfferedUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    skillId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSkillsOfferedUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    skillId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSkillsWantedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    skill?: SkillUpdateOneRequiredWithoutWantedByNestedInput
  }

  export type UserSkillsWantedUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    skillId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSkillsWantedUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    skillId?: StringFieldUpdateOperationsInput | string
  }

  export type RatingUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    givenBy?: UserUpdateOneRequiredWithoutGivenRatingsNestedInput
    swap?: SwapRequestUpdateOneWithoutRatingsNestedInput
  }

  export type RatingUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    givenById?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    swapId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RatingUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    givenById?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    swapId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    givenBy?: UserUpdateOneRequiredWithoutGivenReviewsNestedInput
    swap?: SwapRequestUpdateOneWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    givenById?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    swapId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    givenById?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    swapId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwapRequestUpdateWithoutFromUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    toUser?: UserUpdateOneRequiredWithoutReceivedSwapRequestsNestedInput
    ratings?: RatingUpdateManyWithoutSwapNestedInput
    reviews?: ReviewUpdateManyWithoutSwapNestedInput
  }

  export type SwapRequestUncheckedUpdateWithoutFromUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    toUserId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratings?: RatingUncheckedUpdateManyWithoutSwapNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutSwapNestedInput
  }

  export type SwapRequestUncheckedUpdateManyWithoutFromUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    toUserId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwapRequestUpdateWithoutToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromUser?: UserUpdateOneRequiredWithoutSentSwapRequestsNestedInput
    ratings?: RatingUpdateManyWithoutSwapNestedInput
    reviews?: ReviewUpdateManyWithoutSwapNestedInput
  }

  export type SwapRequestUncheckedUpdateWithoutToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromUserId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratings?: RatingUncheckedUpdateManyWithoutSwapNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutSwapNestedInput
  }

  export type SwapRequestUncheckedUpdateManyWithoutToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromUserId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUpdateWithoutGivenByInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutRatingsNestedInput
    swap?: SwapRequestUpdateOneWithoutRatingsNestedInput
  }

  export type RatingUncheckedUpdateWithoutGivenByInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    swapId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RatingUncheckedUpdateManyWithoutGivenByInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    swapId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUpdateWithoutGivenByInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
    swap?: SwapRequestUpdateOneWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutGivenByInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    swapId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutGivenByInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    swapId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BroadcastMessageUpdateWithoutSentByInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BroadcastMessageUncheckedUpdateWithoutSentByInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BroadcastMessageUncheckedUpdateManyWithoutSentByInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminLogUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminLogUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminLogUncheckedUpdateManyWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSkillsOfferedCreateManySkillInput = {
    id?: string
    userId: string
  }

  export type UserSkillsWantedCreateManySkillInput = {
    id?: string
    userId: string
  }

  export type UserSkillsOfferedUpdateWithoutSkillInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSkillsOfferedNestedInput
  }

  export type UserSkillsOfferedUncheckedUpdateWithoutSkillInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSkillsOfferedUncheckedUpdateManyWithoutSkillInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSkillsWantedUpdateWithoutSkillInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSkillsWantedNestedInput
  }

  export type UserSkillsWantedUncheckedUpdateWithoutSkillInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSkillsWantedUncheckedUpdateManyWithoutSkillInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type RatingCreateManySwapInput = {
    id?: string
    userId: string
    givenById: string
    role: string
    stars: number
  }

  export type ReviewCreateManySwapInput = {
    id?: string
    userId: string
    givenById: string
    role: string
    comment: string
    createdAt?: Date | string
  }

  export type RatingUpdateWithoutSwapInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutRatingsNestedInput
    givenBy?: UserUpdateOneRequiredWithoutGivenRatingsNestedInput
  }

  export type RatingUncheckedUpdateWithoutSwapInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    givenById?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
  }

  export type RatingUncheckedUpdateManyWithoutSwapInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    givenById?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewUpdateWithoutSwapInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
    givenBy?: UserUpdateOneRequiredWithoutGivenReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutSwapInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    givenById?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutSwapInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    givenById?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}