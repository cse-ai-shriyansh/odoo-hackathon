// Prisma schema for Skill Swap Platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String              @id @default(uuid())
  name          String
  email         String              @unique
  passwordHash  String
  role          String // 'user' | 'admin'
  experience    String?
  projects      String?
  profilePhoto  String?
  location      String?
  availability  String?
  isPublic      Boolean             @default(true)
  banned        Boolean             @default(false)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  skillsOffered UserSkillsOffered[]
  skillsWanted  UserSkillsWanted[]
  ratings       Rating[]
  reviews       Review[]

  sentSwapRequests     SwapRequest[]      @relation("SentRequests")
  receivedSwapRequests SwapRequest[]      @relation("ReceivedRequests")
  givenRatings         Rating[]           @relation("GivenRatings")
  givenReviews         Review[]           @relation("GivenReviews")
  broadcastMessages    BroadcastMessage[]
  adminLogs            AdminLog[]
}

model Skill {
  id        String              @id @default(uuid())
  name      String              @unique
  status    String // 'approved' | 'pending' | 'rejected'
  offeredBy UserSkillsOffered[]
  wantedBy  UserSkillsWanted[]
}

model UserSkillsOffered {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  skill   Skill  @relation(fields: [skillId], references: [id])
  skillId String
}

model UserSkillsWanted {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  skill   Skill  @relation(fields: [skillId], references: [id])
  skillId String
}

model SwapRequest {
  id         String   @id @default(uuid())
  fromUser   User     @relation("SentRequests", fields: [fromUserId], references: [id])
  fromUserId String
  toUser     User     @relation("ReceivedRequests", fields: [toUserId], references: [id])
  toUserId   String
  status     String // 'pending' | 'accepted' | 'rejected'
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  ratings Rating[]
  reviews Review[]
}

model Rating {
  id        String       @id @default(uuid())
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  givenBy   User         @relation("GivenRatings", fields: [givenById], references: [id])
  givenById String
  role      String // 'educator' | 'learner'
  stars     Int
  swap      SwapRequest? @relation(fields: [swapId], references: [id])
  swapId    String?
}

model Review {
  id        String       @id @default(uuid())
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  givenBy   User         @relation("GivenReviews", fields: [givenById], references: [id])
  givenById String
  role      String // 'educator' | 'learner'
  comment   String
  swap      SwapRequest? @relation(fields: [swapId], references: [id])
  swapId    String?
  createdAt DateTime     @default(now())
}

model BroadcastMessage {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())
  sentBy    User     @relation(fields: [sentById], references: [id])
  sentById  String
}

model AdminLog {
  id        String   @id @default(uuid())
  admin     User     @relation(fields: [adminId], references: [id])
  adminId   String
  action    String
  targetId  String?
  createdAt DateTime @default(now())
}
